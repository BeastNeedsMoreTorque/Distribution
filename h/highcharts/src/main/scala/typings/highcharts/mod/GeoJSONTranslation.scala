package typings.highcharts.mod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait GeoJSONTranslation extends js.Object {
  /**
    * The coordinate reference system used to generate this portion of the map.
    */
  var crs: String
  /**
    * Define the portion of the map that this defintion applies to. Defined as
    * a GeoJSON polygon feature object, with `type` and `coordinates`
    * properties.
    */
  var hitZone: js.UndefOr[Dictionary[_]] = js.undefined
  /**
    * Property for internal use for maps generated by Highsoft.
    */
  var jsonmarginX: js.UndefOr[Double] = js.undefined
  /**
    * Property for internal use for maps generated by Highsoft.
    */
  var jsonmarginY: js.UndefOr[Double] = js.undefined
  /**
    * Property for internal use for maps generated by Highsoft.
    */
  var jsonres: js.UndefOr[Double] = js.undefined
  /**
    * Specifies clockwise rotation of the coordinates after the projection, but
    * before scaling and panning. Defined in radians, relative to the
    * coordinate system origin.
    */
  var rotation: js.UndefOr[Double] = js.undefined
  /**
    * The scaling factor applied to the projected coordinates.
    */
  var scale: js.UndefOr[Double] = js.undefined
  /**
    * Property for internal use for maps generated by Highsoft.
    */
  var xoffset: js.UndefOr[Double] = js.undefined
  /**
    * X offset of projected coordinates after scaling.
    */
  var xpan: js.UndefOr[Double] = js.undefined
  /**
    * Property for internal use for maps generated by Highsoft.
    */
  var yoffset: js.UndefOr[Double] = js.undefined
  /**
    * Y offset of projected coordinates after scaling.
    */
  var ypan: js.UndefOr[Double] = js.undefined
}

object GeoJSONTranslation {
  @scala.inline
  def apply(
    crs: String,
    hitZone: Dictionary[_] = null,
    jsonmarginX: js.UndefOr[Double] = js.undefined,
    jsonmarginY: js.UndefOr[Double] = js.undefined,
    jsonres: js.UndefOr[Double] = js.undefined,
    rotation: js.UndefOr[Double] = js.undefined,
    scale: js.UndefOr[Double] = js.undefined,
    xoffset: js.UndefOr[Double] = js.undefined,
    xpan: js.UndefOr[Double] = js.undefined,
    yoffset: js.UndefOr[Double] = js.undefined,
    ypan: js.UndefOr[Double] = js.undefined
  ): GeoJSONTranslation = {
    val __obj = js.Dynamic.literal(crs = crs.asInstanceOf[js.Any])
    if (hitZone != null) __obj.updateDynamic("hitZone")(hitZone.asInstanceOf[js.Any])
    if (!js.isUndefined(jsonmarginX)) __obj.updateDynamic("jsonmarginX")(jsonmarginX.get.asInstanceOf[js.Any])
    if (!js.isUndefined(jsonmarginY)) __obj.updateDynamic("jsonmarginY")(jsonmarginY.get.asInstanceOf[js.Any])
    if (!js.isUndefined(jsonres)) __obj.updateDynamic("jsonres")(jsonres.get.asInstanceOf[js.Any])
    if (!js.isUndefined(rotation)) __obj.updateDynamic("rotation")(rotation.get.asInstanceOf[js.Any])
    if (!js.isUndefined(scale)) __obj.updateDynamic("scale")(scale.get.asInstanceOf[js.Any])
    if (!js.isUndefined(xoffset)) __obj.updateDynamic("xoffset")(xoffset.get.asInstanceOf[js.Any])
    if (!js.isUndefined(xpan)) __obj.updateDynamic("xpan")(xpan.get.asInstanceOf[js.Any])
    if (!js.isUndefined(yoffset)) __obj.updateDynamic("yoffset")(yoffset.get.asInstanceOf[js.Any])
    if (!js.isUndefined(ypan)) __obj.updateDynamic("ypan")(ypan.get.asInstanceOf[js.Any])
    __obj.asInstanceOf[GeoJSONTranslation]
  }
}

