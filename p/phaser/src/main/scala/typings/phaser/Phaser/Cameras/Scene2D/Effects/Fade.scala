package typings.phaser.Phaser.Cameras.Scene2D.Effects

import typings.phaser.Phaser.Cameras.Scene2D.Camera
import typings.phaser.Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline
import typings.phaser.Phaser.Types.Cameras.Scene2D.CameraFadeCallback
import typings.phaser.integer
import typings.std.CanvasRenderingContext2D
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A Camera Fade effect.
  * 
  * This effect will fade the camera viewport to the given color, over the duration specified.
  * 
  * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do
  * not change.
  * 
  * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,
  * which is invoked each frame for the duration of the effect, if required.
  */
trait Fade extends js.Object {
  /**
    * The Camera this effect belongs to.
    */
  val camera: Camera
  /**
    * The direction of the fade.
    * `true` = fade out (transparent to color), `false` = fade in (color to transparent)
    */
  val direction: Boolean
  /**
    * The duration of the effect, in milliseconds.
    */
  val duration: integer
  /**
    * Has this effect finished running?
    * 
    * This is different from `isRunning` because it remains set to `true` when the effect is over,
    * until the effect is either reset or started again.
    */
  val isComplete: Boolean
  /**
    * Is this effect actively running?
    */
  val isRunning: Boolean
  /**
    * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.
    */
  var progress: Double
  /**
    * Destroys this effect, releasing it from the Camera.
    */
  def destroy(): Unit
  /**
    * Called internally when the effect completes.
    */
  def effectComplete(): Unit
  /**
    * Called internally by the Canvas Renderer.
    * @param ctx The Canvas context to render to.
    */
  def postRenderCanvas(ctx: CanvasRenderingContext2D): Boolean
  /**
    * Called internally by the WebGL Renderer.
    * @param pipeline The WebGL Pipeline to render to.
    * @param getTintFunction A function that will return the gl safe tint colors.
    */
  def postRenderWebGL(pipeline: TextureTintPipeline, getTintFunction: js.Function): Boolean
  /**
    * Resets this camera effect.
    * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.
    */
  def reset(): Unit
  /**
    * Fades the Camera to or from the given color over the duration specified.
    * @param direction The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent) Default true.
    * @param duration The duration of the effect in milliseconds. Default 1000.
    * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.
    * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.
    * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.
    * @param force Force the effect to start immediately, even if already running. Default false.
    * @param callback This callback will be invoked every frame for the duration of the effect.
    * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.
    * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.
    */
  def start(
    direction: js.UndefOr[Boolean],
    duration: js.UndefOr[integer],
    red: js.UndefOr[integer],
    green: js.UndefOr[integer],
    blue: js.UndefOr[integer],
    force: js.UndefOr[Boolean],
    callback: js.UndefOr[CameraFadeCallback],
    context: js.UndefOr[js.Any]
  ): Camera
  /**
    * The main update loop for this effect. Called automatically by the Camera.
    * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
    * @param delta The delta time, in ms, elapsed since the last frame.
    */
  def update(time: integer, delta: Double): Unit
}

object Fade {
  @scala.inline
  def apply(
    camera: Camera,
    destroy: () => Unit,
    direction: Boolean,
    duration: integer,
    effectComplete: () => Unit,
    isComplete: Boolean,
    isRunning: Boolean,
    postRenderCanvas: CanvasRenderingContext2D => Boolean,
    postRenderWebGL: (TextureTintPipeline, js.Function) => Boolean,
    progress: Double,
    reset: () => Unit,
    start: (js.UndefOr[Boolean], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[Boolean], js.UndefOr[CameraFadeCallback], js.UndefOr[js.Any]) => Camera,
    update: (integer, Double) => Unit
  ): Fade = {
    val __obj = js.Dynamic.literal(camera = camera.asInstanceOf[js.Any], destroy = js.Any.fromFunction0(destroy), direction = direction.asInstanceOf[js.Any], duration = duration.asInstanceOf[js.Any], effectComplete = js.Any.fromFunction0(effectComplete), isComplete = isComplete.asInstanceOf[js.Any], isRunning = isRunning.asInstanceOf[js.Any], postRenderCanvas = js.Any.fromFunction1(postRenderCanvas), postRenderWebGL = js.Any.fromFunction2(postRenderWebGL), progress = progress.asInstanceOf[js.Any], reset = js.Any.fromFunction0(reset), start = js.Any.fromFunction8(start), update = js.Any.fromFunction2(update))
    __obj.asInstanceOf[Fade]
  }
}

