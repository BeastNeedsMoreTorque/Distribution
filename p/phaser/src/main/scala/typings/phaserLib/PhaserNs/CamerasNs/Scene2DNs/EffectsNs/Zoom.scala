package typings
package phaserLib.PhaserNs.CamerasNs.Scene2DNs.EffectsNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A Camera Zoom effect.
  * 
  * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.
  * 
  * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,
  * which is invoked each frame for the duration of the effect if required.
  */
@JSGlobal("Phaser.Cameras.Scene2D.Effects.Zoom")
@js.native
class Zoom protected () extends js.Object {
  /**
    * 
    * @param camera The camera this effect is acting upon.
    */
  def this(camera: phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera) = this()
  /**
    * The Camera this effect belongs to.
    */
  val camera: phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  /**
    * The destination zoom value.
    */
  var destination: scala.Double = js.native
  /**
    * The duration of the effect, in milliseconds.
    */
  val duration: phaserLib.integer = js.native
  /**
    * The ease function to use during the zoom.
    */
  var ease: js.Function = js.native
  /**
    * Is this effect actively running?
    */
  val isRunning: scala.Boolean = js.native
  /**
    * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.
    */
  var progress: scala.Double = js.native
  /**
    * The starting zoom value;
    */
  var source: scala.Double = js.native
  /**
    * Destroys this effect, releasing it from the Camera.
    */
  def destroy(): scala.Unit = js.native
  /**
    * Called internally when the effect completes.
    */
  def effectComplete(): scala.Unit = js.native
  /**
    * Resets this camera effect.
    * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.
    */
  def reset(): scala.Unit = js.native
  /**
    * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.
    * @param zoom The target Camera zoom value.
    * @param duration The duration of the effect in milliseconds. Default 1000.
    * @param ease The ease to use for the Zoom. Can be any of the Phaser Easing constants or a custom function. Default 'Linear'.
    * @param force Force the zoom effect to start immediately, even if already running. Default false.
    * @param callback This callback will be invoked every frame for the duration of the effect.
    * It is sent three arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,
    * and the current camera zoom value.
    * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.
    */
  def start(zoom: scala.Double): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(zoom: scala.Double, duration: phaserLib.integer): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(zoom: scala.Double, duration: phaserLib.integer, ease: java.lang.String): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(zoom: scala.Double, duration: phaserLib.integer, ease: java.lang.String, force: scala.Boolean): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(
    zoom: scala.Double,
    duration: phaserLib.integer,
    ease: java.lang.String,
    force: scala.Boolean,
    callback: phaserLib.PhaserNs.TypesNs.CamerasNs.Scene2DNs.CameraZoomCallback
  ): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(
    zoom: scala.Double,
    duration: phaserLib.integer,
    ease: java.lang.String,
    force: scala.Boolean,
    callback: phaserLib.PhaserNs.TypesNs.CamerasNs.Scene2DNs.CameraZoomCallback,
    context: js.Any
  ): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(zoom: scala.Double, duration: phaserLib.integer, ease: js.Function): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(zoom: scala.Double, duration: phaserLib.integer, ease: js.Function, force: scala.Boolean): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(
    zoom: scala.Double,
    duration: phaserLib.integer,
    ease: js.Function,
    force: scala.Boolean,
    callback: phaserLib.PhaserNs.TypesNs.CamerasNs.Scene2DNs.CameraZoomCallback
  ): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  def start(
    zoom: scala.Double,
    duration: phaserLib.integer,
    ease: js.Function,
    force: scala.Boolean,
    callback: phaserLib.PhaserNs.TypesNs.CamerasNs.Scene2DNs.CameraZoomCallback,
    context: js.Any
  ): phaserLib.PhaserNs.CamerasNs.Scene2DNs.Camera = js.native
  /**
    * The main update loop for this effect. Called automatically by the Camera.
    * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
    * @param delta The delta time, in ms, elapsed since the last frame.
    */
  def update(time: phaserLib.integer, delta: scala.Double): scala.Unit = js.native
}

