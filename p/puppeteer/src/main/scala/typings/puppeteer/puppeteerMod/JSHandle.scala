package typings.puppeteer.puppeteerMod

import typings.std.Element
import typings.std.Map
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait JSHandle[T] extends JSEvalable[T] {
  /**
    * Returns a ElementHandle
    */
  def asElement(): ElementHandle[Element] | Null
  /**
    * Stops referencing the element handle.
    */
  def dispose(): js.Promise[Unit]
  /**
    * Gets the execution context.
    */
  def executionContext(): ExecutionContext
  /**
    * Returns a map with property names as keys and JSHandle instances for the property values.
    */
  def getProperties(): js.Promise[Map[String, JSHandle[_]]]
  /**
    * Fetches a single property from the objectHandle.
    * @param propertyName The property to get.
    */
  def getProperty(propertyName: String): js.Promise[JSHandle[_]]
  /**
    * Returns a JSON representation of the object.
    * The JSON is generated by running JSON.stringify on the object in page and consequent JSON.parse in puppeteer.
    * @throws The method will throw if the referenced object is not stringifiable.
    */
  def jsonValue(): js.Promise[_]
}

object JSHandle {
  @scala.inline
  def apply[T](
    asElement: () => ElementHandle[Element] | Null,
    dispose: () => js.Promise[Unit],
    evaluate: (js.Any, /* repeated */ SerializableOrJSHandle) => js.Promise[EvaluateFnReturnType[js.Any]],
    evaluateHandle: (js.Function2[T, /* repeated */ js.Any, _], /* repeated */ SerializableOrJSHandle) => js.Promise[JSHandle[_]],
    executionContext: () => ExecutionContext,
    getProperties: () => js.Promise[Map[String, JSHandle[_]]],
    getProperty: String => js.Promise[JSHandle[_]],
    jsonValue: () => js.Promise[_]
  ): JSHandle[T] = {
    val __obj = js.Dynamic.literal(asElement = js.Any.fromFunction0(asElement), dispose = js.Any.fromFunction0(dispose), evaluate = js.Any.fromFunction2(evaluate), evaluateHandle = js.Any.fromFunction2(evaluateHandle), executionContext = js.Any.fromFunction0(executionContext), getProperties = js.Any.fromFunction0(getProperties), getProperty = js.Any.fromFunction1(getProperty), jsonValue = js.Any.fromFunction0(jsonValue))
  
    __obj.asInstanceOf[JSHandle[T]]
  }
}

