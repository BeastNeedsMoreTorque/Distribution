package typings
package puppeteerLib.puppeteerMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait JSHandle extends _SerializableOrJSHandle {
  /**
    * Returns a ElementHandle
    */
  def asElement(): ElementHandle[stdLib.Element] | scala.Null
  /**
    * Stops referencing the element handle.
    */
  def dispose(): js.Promise[scala.Unit]
  /**
    * Gets the execution context.
    */
  def executionContext(): ExecutionContext
  /**
    * Returns a map with property names as keys and JSHandle instances for the property values.
    */
  def getProperties(): js.Promise[stdLib.Map[java.lang.String, JSHandle]]
  /**
    * Fetches a single property from the objectHandle.
    * @param propertyName The property to get.
    */
  def getProperty(propertyName: java.lang.String): js.Promise[JSHandle]
  /**
    * Returns a JSON representation of the object.
    * The JSON is generated by running JSON.stringify on the object in page and consequent JSON.parse in puppeteer.
    * @throws The method will throw if the referenced object is not stringifiable.
    */
  def jsonValue(): js.Promise[_]
}

object JSHandle {
  @scala.inline
  def apply(
    asElement: () => ElementHandle[stdLib.Element] | scala.Null,
    dispose: () => js.Promise[scala.Unit],
    executionContext: () => ExecutionContext,
    getProperties: () => js.Promise[stdLib.Map[java.lang.String, JSHandle]],
    getProperty: java.lang.String => js.Promise[JSHandle],
    jsonValue: () => js.Promise[_]
  ): JSHandle = {
    val __obj = js.Dynamic.literal(asElement = js.Any.fromFunction0(asElement), dispose = js.Any.fromFunction0(dispose), executionContext = js.Any.fromFunction0(executionContext), getProperties = js.Any.fromFunction0(getProperties), getProperty = js.Any.fromFunction1(getProperty), jsonValue = js.Any.fromFunction0(jsonValue))
  
    __obj.asInstanceOf[JSHandle]
  }
}

