package typings
package protractorLib.builtPluginsMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("protractor/built/plugins", "Plugins")
@js.native
class Plugins protected () extends js.Object {
  def this(config: protractorLib.builtConfigMod.Config) = this()
  /**
    * Adds properties to a plugin's object
    *
    * @see docs/plugins.md#provided-properties-and-functions
    */
  var annotatePluginObj: js.Any = js.native
  var assertions: org.scalablytyped.runtime.StringDictionary[js.Array[AssertionResult]] = js.native
  /**
    * Generates the handler for a plugin function (e.g. the setup() function)
    *
    * @param {string} funName The name of the function to make a handler for
    * @param {boolean=} failReturnVal The value that the function should return if the plugin crashes
    *
    * @return The handler
    */
  var pluginFunFactory: js.Any = js.native
  var pluginObjs: js.Array[ProtractorPlugin] = js.native
  var printPluginResults: js.Any = js.native
  var resultsReported: scala.Boolean = js.native
  /**
    * Calls a function from a plugin safely.  If the plugin's function throws an
    * exception or returns a rejected promise, that failure will be logged as a
    * failed test result instead of crashing protractor.  If the tests results have
    * already been reported, the failure will be logged to the console.
    *
    * @param {Object} pluginObj The plugin object containing the function to be run
    * @param {string} funName The name of the function we want to run
    * @param {*[]} args The arguments we want to invoke the function with
    * @param {boolean} resultsReported If the results have already been reported
    * @param {*} failReturnVal The value to return if the function fails
    *
    * @return {Promise} A promise which resolves to the
    *     function's return value
    */
  var safeCallPluginFun: js.Any = js.native
  /**
    * Gets the tests results generated by any plugins
    *
    * @see lib/frameworks/README.md#requirements for a complete description of what
    *     the results object must look like
    *
    * @return {Object} The results object
    */
  def getResults(): protractorLib.Anon_FailedCount = js.native
  def onPageLoad(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def onPageStable(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def onPrepare(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def postResults(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def postTest(args: js.Any*): js.Promise[js.Array[_]] = js.native
  /**
    * @see docs/plugins.md#writing-plugins for information on these functions
    */
  def setup(args: js.Any*): js.Promise[js.Array[_]] = js.native
  /**
    * Returns true if any loaded plugin has skipAngularStability enabled.
    *
    * @return {boolean}
    */
  def skipAngularStability(): scala.Boolean = js.native
  def teardown(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def waitForCondition(args: js.Any*): js.Promise[js.Array[_]] = js.native
  def waitForPromise(args: js.Any*): js.Promise[js.Array[_]] = js.native
}

