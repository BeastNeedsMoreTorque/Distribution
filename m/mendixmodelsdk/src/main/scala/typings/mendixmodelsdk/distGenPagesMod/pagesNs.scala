package typings.mendixmodelsdk.distGenPagesMod

import typings.mendixmodelsdk.distCommonMod.commonNs.ISize
import typings.mendixmodelsdk.distGenBaseDashModelMod.IModel
import typings.mendixmodelsdk.distGenCustomwidgetsMod.customwidgetsNs.CustomWidget
import typings.mendixmodelsdk.distGenCustomwidgetsMod.customwidgetsNs.WidgetObject
import typings.mendixmodelsdk.distGenCustomwidgetsMod.customwidgetsNs.WidgetValue
import typings.mendixmodelsdk.distGenDocumenttemplatesMod.documenttemplatesNs.DataGridColumn
import typings.mendixmodelsdk.distGenDocumenttemplatesMod.documenttemplatesNs.DynamicLabel
import typings.mendixmodelsdk.distGenDomainmodelsMod.domainmodelsNs.AttributeRef
import typings.mendixmodelsdk.distGenDomainmodelsMod.domainmodelsNs.EntityRef
import typings.mendixmodelsdk.distGenDomainmodelsMod.domainmodelsNs.IAttribute
import typings.mendixmodelsdk.distGenDomainmodelsMod.domainmodelsNs.IEntity
import typings.mendixmodelsdk.distGenEnumerationsMod.enumerationsNs.Condition
import typings.mendixmodelsdk.distGenExpressionsMod.expressionsNs.Expression
import typings.mendixmodelsdk.distGenImagesMod.imagesNs.IImage
import typings.mendixmodelsdk.distGenMenusMod.menusNs.IMenuDocument
import typings.mendixmodelsdk.distGenMenusMod.menusNs.MenuItem
import typings.mendixmodelsdk.distGenMicroflowsMod.microflowsNs.IMicroflow
import typings.mendixmodelsdk.distGenMicroflowsMod.microflowsNs.IMicroflowParameter
import typings.mendixmodelsdk.distGenMicroflowsMod.microflowsNs.INanoflow
import typings.mendixmodelsdk.distGenMicroflowsMod.microflowsNs.INanoflowParameter
import typings.mendixmodelsdk.distGenMicroflowsMod.microflowsNs.ShowPageAction
import typings.mendixmodelsdk.distGenNativepagesMod.nativepagesNs.BottomBarItem
import typings.mendixmodelsdk.distGenNativepagesMod.nativepagesNs.NativeLayout
import typings.mendixmodelsdk.distGenNativepagesMod.nativepagesNs.NativeLayoutCallArgument
import typings.mendixmodelsdk.distGenNavigationMod.navigationNs.INavigationProfile
import typings.mendixmodelsdk.distGenNavigationMod.navigationNs.NavigationProfile
import typings.mendixmodelsdk.distGenNavigationMod.navigationNs.ProfileType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ActionButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ActionItem
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AggregateFunction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AlignmentEnum
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Appearance
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AssociationSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AssociationWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AttributeWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.AttributeWidgetWithPlaceholder
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.BackButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.BuildingBlock
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Button
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ButtonStyle
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.CallNanoflowClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.CancelButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.CancelChangesClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.CheckBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ClickTypeType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ClientTemplate
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ClientTemplateParameter
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ClosePageClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ColumnGrid
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ComparisonSearchField
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConditionalEditabilitySettings
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConditionalSettings
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConditionalVisibilitySettings
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConditionallyEditableWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConditionallyVisibleWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ConfirmationInfo
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ContainerRenderMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ContainerWidth
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ControlBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ControlBarButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ControlBarItem
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.CreateObjectClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataGrid
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataGridAddButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataGridExportToCSVButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataGridExportToExcelButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataGridRemoveButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataView
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewActionButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewCancelButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewCloseButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewControlBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewControlBarButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewReadOnlyStyle
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewSaveButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DataViewSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DatabaseConstraint
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DatabaseConstraintOperator
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DatabaseSourceBase
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DateFormat
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DatePicker
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DeleteClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DesignPropertyValue
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DesignPropertyValueType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DivContainer
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DropDown
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DropDownButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DropDownButtonItem
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DropDownSearchField
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DynamicImageViewer
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.DynamicText
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.EditableEnum
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.EntityPathSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.EntityWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.EnumFormat
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FileManager
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FileManagerType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FormBase
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FormLocation
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FormValidations
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.FormattingInfo
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GlyphIcon
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Grid
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridActionButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridBaseSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridColumn
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridControlBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridControlBarButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridDatabaseSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridDeleteButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridDeselectAllButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridEditButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridNewButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridSearchButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridSelectAllButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridSelectionMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridSortBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridSortItem
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GridXPathSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GroupBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.GroupBoxCollapsible
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Header
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.HorizontalSplitPane
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.IFormBase
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayout
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutCall
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutContent
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutParameter
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.IPage
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.IPageTemplate
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ISnippet
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ITemplateFormBase
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.IWebLayoutContent
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Icon
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ImageIcon
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ImageSizeUnit
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ImageUploader
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ImageViewerSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.InputReferenceSetSelector
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.InputWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.KeyboardType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Label
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LabelPosition
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Layout
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutCall
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutCallArgument
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutContent
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutGrid
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutGridColumn
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutGridRow
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutModeType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LayoutType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LinkButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LinkType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListView
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListViewDatabaseSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListViewSearch
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListViewTemplate
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListViewXPathSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListenTargetSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ListenTargetWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LoginButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LoginIdTextBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LoginTextBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.LogoutButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MasterDetail
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MasterDetailDetailRegion
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MasterDetailMasterRegion
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MasterDetailRegion
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MemberWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MenuBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MenuDocumentSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MenuSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MenuWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MicroflowClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MicroflowParameterMapping
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MicroflowSettings
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MicroflowSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.MobileFooterType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NanoflowParameterMapping
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NanoflowSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NativeLayoutContent
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NativeTextStyle
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NavigationList
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NavigationListItem
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NavigationSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NavigationTree
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NewButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NewButtonEditLocation
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.NoClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OfflineSchema
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OfflineSchemaFetchInstruction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OnClickBehavior
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OnClickEnlarge
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OnClickMicroflow
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OnClickNothing
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.OpenLinkClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Page
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PageClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PageForSpecialization
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PageSettings
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PageTemplate
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PageTemplateType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.PasswordTextBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Placeholder
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ProgressBarType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.RadioButtonGroup
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.RangeSearchField
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ReadOnlyStyle
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ReferenceSelector
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ReferenceSelectorRenderModeType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ReferenceSetSelector
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ReferenceSetSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.RenderType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.RetrievalQuery
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.RetrievalSchema
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SaveButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SaveChangesClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ScrollBehavior
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ScrollContainer
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ScrollContainerRegion
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ScrollDirection
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SearchBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SearchBarTypeEnum
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SearchField
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SearchFieldOperator
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SearchFieldType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectionType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectorDatabaseSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectorMicroflowSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectorSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SelectorXPathSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SidebarToggleButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SidebarToggleMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SidebarToggleRegion
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SignOutClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SimpleMenuBar
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SimpleMenuBarOrientation
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SingleSearchField
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SizeMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Snippet
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SnippetCall
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SnippetCallWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SnippetType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SortDirection
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SortableEntityPathSource
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SplitPane
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.StaticImageViewer
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.StaticOrDynamicString
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SyncButton
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.SyncClientAction
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TabContainer
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TabPage
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Table
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TableCell
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TableCellRenderModeType
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TableColumn
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TableRow
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TemplateFormBase
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TemplateGrid
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TemplateGridContents
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TextArea
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TextBox
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TextRenderMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.TextWidget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Title
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ToggleMode
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.UnitEnum
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.ValidationMessage
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.VerticalFlow
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.VerticalSplitPane
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.WebLayoutContent
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.Widget
import typings.mendixmodelsdk.distGenPagesMod.pagesNs.WidgetValidation
import typings.mendixmodelsdk.distGenProjectsMod.projectsNs.Document
import typings.mendixmodelsdk.distGenProjectsMod.projectsNs.IDocument
import typings.mendixmodelsdk.distGenProjectsMod.projectsNs.IFolderBase
import typings.mendixmodelsdk.distGenReportsMod.reportsNs.ReportPane
import typings.mendixmodelsdk.distGenSecurityMod.securityNs.IModuleRole
import typings.mendixmodelsdk.distGenSecurityMod.securityNs.IUserRole
import typings.mendixmodelsdk.distGenTextsMod.textsNs.Text
import typings.mendixmodelsdk.distSdkInternalElementsMod.IByNameReferrable
import typings.mendixmodelsdk.distSdkInternalElementsMod.IElement
import typings.mendixmodelsdk.distSdkInternalInstancesMod.IList
import typings.mendixmodelsdk.distSdkInternalMod.AbstractElement
import typings.mendixmodelsdk.distSdkInternalMod.AbstractEnum
import typings.mendixmodelsdk.distSdkInternalMod.AbstractModel
import typings.mendixmodelsdk.distSdkInternalMod.Element
import typings.mendixmodelsdk.distSdkInternalMod.ModelUnit
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("mendixmodelsdk/dist/gen/pages", "pages")
@js.native
object pagesNs extends js.Object {
  /**
    * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
    */
  @js.native
  class ActionButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var action: ClientAction = js.native
    var disabledDuringAction: Boolean = js.native
  }
  
  @js.native
  abstract class ActionItem protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var action: ClientAction = js.native
    val containerAsDropDownButton: DropDownButton = js.native
    val containerAsNavigationList: NavigationList = js.native
    @JSName("model")
    var model_ActionItem: IModel = js.native
  }
  
  @js.native
  class AggregateFunction () extends AbstractEnum
  
  @js.native
  class AlignmentEnum () extends AbstractEnum
  
  /**
    * In version 8.0.0: introduced
    */
  @js.native
  class Appearance protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var `class`: String = js.native
    val containerAsControlBarButton: ControlBarButton = js.native
    val containerAsGridColumn: GridColumn = js.native
    val containerAsLayout: Layout = js.native
    val containerAsLayoutGridColumn: LayoutGridColumn = js.native
    val containerAsLayoutGridRow: LayoutGridRow = js.native
    val containerAsNavigationListItem: NavigationListItem = js.native
    val containerAsPage: Page = js.native
    val containerAsPageTemplate: PageTemplate = js.native
    val containerAsScrollContainerRegion: ScrollContainerRegion = js.native
    val containerAsTableCell: TableCell = js.native
    val containerAsTableRow: TableRow = js.native
    val containerAsWidget: Widget = js.native
    val designProperties: IList[DesignPropertyValue] = js.native
    @JSName("model")
    var model_Appearance: IModel = js.native
    var style: String = js.native
  }
  
  @js.native
  class AssociationSource protected () extends EntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  abstract class AssociationWidget protected () extends MemberWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.13.0: introduced
      */
    var onChangeAction: ClientAction = js.native
    /**
      * In version 7.13.0: deleted
      */
    var onChangeMicroflowSettings: MicroflowSettings = js.native
    var selectPageSettings: PageSettings = js.native
    var selectorSource: SelectorSource = js.native
  }
  
  @js.native
  abstract class AttributeWidget protected () extends MemberWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.13.0: introduced
      */
    var onChangeAction: ClientAction = js.native
    /**
      * In version 7.13.0: deleted
      */
    var onChangeMicroflowSettings: MicroflowSettings = js.native
    /**
      * In version 7.13.0: introduced
      */
    var onEnterAction: ClientAction = js.native
    /**
      * In version 7.13.0: deleted
      */
    var onEnterMicroflowSettings: MicroflowSettings = js.native
    /**
      * In version 7.13.0: introduced
      */
    var onLeaveAction: ClientAction = js.native
    /**
      * In version 7.13.0: deleted
      */
    var onLeaveMicroflowSettings: MicroflowSettings = js.native
    /**
      * In version 7.6.0: deleted
      */
    var required: Boolean = js.native
    /**
      * In version 7.6.0: deleted
      */
    var requiredMessage: Text = js.native
    /**
      * In version 7.6.0: introduced
      */
    var validation: WidgetValidation = js.native
  }
  
  @js.native
  abstract class AttributeWidgetWithPlaceholder protected () extends AttributeWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var placeholder: Text = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
    *
    * In version 7.0.2: deleted
    */
  @js.native
  class BackButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/building-block relevant section in reference guide}
    *
    * In version 7.7.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.IBuildingBlock because var conflicts: displayName, documentationUrl, id, isLoaded, model, structureTypeName, unit. Inlined  */ @js.native
  class BuildingBlock protected () extends TemplateFormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
    */
  @js.native
  abstract class Button protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var buttonStyle: ButtonStyle = js.native
    var caption: ClientTemplate = js.native
    var icon: Icon | Null = js.native
    var renderType: RenderType = js.native
    var tooltip: Text = js.native
  }
  
  @js.native
  class ButtonStyle () extends AbstractEnum
  
  /**
    * In version 7.12.0: removed experimental
    * In version 7.8.0: introduced
    */
  @js.native
  class CallNanoflowClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var confirmationInfo: ConfirmationInfo | Null = js.native
    /**
      * In version 7.10.0: introduced
      */
    var nanoflow: INanoflow | Null = js.native
    val nanoflowQualifiedName: String | Null = js.native
    /**
      * In version 7.19.0: introduced
      */
    val parameterMappings: IList[NanoflowParameterMapping] = js.native
    var progressBar: ProgressBarType = js.native
    var progressMessage: Text | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
    *
    * In version 7.0.2: deleted
    */
  @js.native
  class CancelButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.7.0: introduced
      */
    var closePage: Boolean = js.native
  }
  
  /**
    * In version 7.0.2: introduced
    */
  @js.native
  class CancelChangesClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var closePage: Boolean = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
    */
  @js.native
  class CheckBox protected () extends AttributeWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var labelPosition: LabelPosition = js.native
  }
  
  @js.native
  class ClickTypeType () extends AbstractEnum
  
  @js.native
  abstract class ClientAction protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsActionButton: ActionButton = js.native
    val containerAsActionItem: ActionItem = js.native
    val containerAsAssociationWidget: AssociationWidget = js.native
    val containerAsAttributeWidget: AttributeWidget = js.native
    val containerAsBottomBarItem: BottomBarItem = js.native
    val containerAsDataViewActionButton: DataViewActionButton = js.native
    val containerAsDynamicImageViewer: DynamicImageViewer = js.native
    val containerAsGridActionButton: GridActionButton = js.native
    val containerAsListView: ListView = js.native
    val containerAsMenuItem: MenuItem = js.native
    val containerAsReferenceSetSelector: ReferenceSetSelector = js.native
    val containerAsStaticImageViewer: StaticImageViewer = js.native
    val containerAsWidgetValue: WidgetValue = js.native
    @JSName("model")
    var model_ClientAction: IModel = js.native
  }
  
  @js.native
  class ClientTemplate protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsButton: Button = js.native
    val containerAsControlBarButton: ControlBarButton = js.native
    val containerAsCustomWidget: CustomWidget = js.native
    val containerAsDataGrid: DataGrid = js.native
    val containerAsDynamicText: DynamicText = js.native
    val containerAsGroupBox: GroupBox = js.native
    val containerAsInputWidget: InputWidget = js.native
    val containerAsWidgetObject: WidgetObject = js.native
    val containerAsWidgetValue: WidgetValue = js.native
    @JSName("model")
    var model_ClientTemplate: IModel = js.native
    val parameters: IList[ClientTemplateParameter] = js.native
    var template: Text = js.native
  }
  
  @js.native
  class ClientTemplateParameter protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attributePath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef | Null = js.native
    val containerAsClientTemplate: ClientTemplate = js.native
    /**
      * In version 7.15.0: introduced
      */
    var formattingInfo: FormattingInfo = js.native
    @JSName("model")
    var model_ClientTemplateParameter: IModel = js.native
  }
  
  /**
    * In version 7.0.2: introduced
    */
  @js.native
  class ClosePageClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  abstract class ColumnGrid protected () extends Grid {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val columns: IList[GridColumn] = js.native
    var numberOfRows: Double = js.native
    var showEmptyRows: Boolean = js.native
    var tooltipPage: IPage | Null = js.native
    val tooltipPageQualifiedName: String | Null = js.native
    var widthUnit: UnitEnum = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
    */
  @js.native
  class ComparisonSearchField protected () extends SingleSearchField {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class ConditionalEditabilitySettings protected () extends ConditionalSettings {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  abstract class ConditionalSettings protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var attribute: IAttribute | Null = js.native
    val attributeQualifiedName: String | Null = js.native
    val conditions: IList[Condition] = js.native
    val containerAsConditionallyEditableWidget: ConditionallyEditableWidget = js.native
    val containerAsConditionallyVisibleWidget: ConditionallyVisibleWidget = js.native
    val containerAsControlBarButton: ControlBarButton = js.native
    val containerAsCustomWidget: CustomWidget = js.native
    val containerAsLayoutGridRow: LayoutGridRow = js.native
    val containerAsNavigationListItem: NavigationListItem = js.native
    val containerAsTabPage: TabPage = js.native
    val containerAsTableRow: TableRow = js.native
    /**
      * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
      *
      * In version 7.0.1: introduced
      */
    var expression: String = js.native
    /**
      * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
      *
      * In version 7.9.0: introduced
      */
    var expressionModel: Expression = js.native
    @JSName("model")
    var model_ConditionalSettings: IModel = js.native
  }
  
  @js.native
  class ConditionalVisibilitySettings protected () extends ConditionalSettings {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var ignoreSecurity: Boolean = js.native
    val moduleRoles: IList[IModuleRole] = js.native
    val moduleRolesQualifiedNames: js.Array[String] = js.native
  }
  
  @js.native
  abstract class ConditionallyEditableWidget protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var conditionalEditabilitySettings: ConditionalEditabilitySettings | Null = js.native
    var editable: EditableEnum = js.native
  }
  
  @js.native
  abstract class ConditionallyVisibleWidget protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
  }
  
  @js.native
  class ConfirmationInfo protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var cancelButtonCaption: Text = js.native
    val containerAsCallNanoflowClientAction: CallNanoflowClientAction = js.native
    val containerAsMicroflowSettings: MicroflowSettings = js.native
    @JSName("model")
    var model_ConfirmationInfo: IModel = js.native
    var proceedButtonCaption: Text = js.native
    var question: Text = js.native
  }
  
  @js.native
  class ContainerRenderMode () extends AbstractEnum
  
  @js.native
  class ContainerWidth () extends AbstractEnum
  
  @js.native
  abstract class ControlBar protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsDataView: DataView = js.native
    val containerAsGrid: Grid = js.native
    val containerAsGridBaseSource: GridBaseSource = js.native
    val containerAsGridDatabaseSource: GridDatabaseSource = js.native
    val items: IList[ControlBarItem] = js.native
    @JSName("model")
    var model_ControlBar: IModel = js.native
  }
  
  @js.native
  abstract class ControlBarButton protected () extends ControlBarItem {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    var buttonStyle: ButtonStyle = js.native
    var caption: ClientTemplate = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
    var icon: Icon | Null = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var tooltip: Text = js.native
  }
  
  @js.native
  abstract class ControlBarItem protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsControlBar: ControlBar = js.native
    val containerAsGridControlBar: GridControlBar = js.native
    @JSName("model")
    var model_ControlBarItem: IModel = js.native
    var name: String = js.native
  }
  
  /**
    * In version 7.17.0: introduced
    */
  @js.native
  class CreateObjectClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var entityRef: EntityRef | Null = js.native
    var pageSettings: PageSettings = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
    */
  @js.native
  class DataGrid protected () extends ColumnGrid {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var caption: ClientTemplate = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
    */
  @js.native
  class DataGridAddButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var pageSettings: PageSettings = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
    */
  @js.native
  class DataGridExportToCSVButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var decimalSeparator: String = js.native
    var delimiter: String = js.native
    var generateExcelHint: Boolean = js.native
    var groupSeparator: String = js.native
    var maxNumberOfRows: Double = js.native
    var useGridDateFormat: Boolean = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
    */
  @js.native
  class DataGridExportToExcelButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var maxNumberOfRows: Double = js.native
    var useExcelDateType: Boolean = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
    */
  @js.native
  class DataGridRemoveButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
    */
  @js.native
  abstract class DataSource protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsEntityWidget: EntityWidget = js.native
    @JSName("model")
    var model_DataSource: IModel = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
    */
  @js.native
  class DataView protected () extends EntityWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.7.0: deleted
      */
    var closeOnSaveOrCancel: Boolean = js.native
    /**
      * In version 6.7.0: deleted
      * In version 6.5.0: added optional
      */
    var controlBar: DataViewControlBar | Null = js.native
    var editable: Boolean = js.native
    /**
      * In version 7.15.0: deleted
      * In version 6.7.0: introduced
      */
    var footerWidget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val footerWidgets: IList[Widget] = js.native
    var labelWidth: Double = js.native
    var noEntityMessage: Text = js.native
    /**
      * In version 6.9.0: introduced
      */
    var readOnlyStyle: DataViewReadOnlyStyle = js.native
    /**
      * In version 6.7.0: deleted
      */
    var showControlBar: Boolean = js.native
    /**
      * In version 6.7.0: introduced
      */
    var showFooter: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    var useSchema: Boolean = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
    *
    * In version 6.7.0: deleted
    */
  @js.native
  class DataViewActionButton protected () extends DataViewControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var action: ClientAction = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
    *
    * In version 6.7.0: deleted
    */
  @js.native
  class DataViewCancelButton protected () extends DataViewControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
    *
    * In version 6.7.0: deleted
    */
  @js.native
  class DataViewCloseButton protected () extends DataViewControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
    *
    * In version 6.7.0: deleted
    */
  @js.native
  class DataViewControlBar protected () extends ControlBar {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var closeButton: ControlBarItem | Null = js.native
  }
  
  /**
    * In version 6.7.0: deleted
    */
  @js.native
  abstract class DataViewControlBarButton protected () extends ControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var tabIndex: Double = js.native
  }
  
  @js.native
  class DataViewReadOnlyStyle () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
    *
    * In version 6.7.0: deleted
    */
  @js.native
  class DataViewSaveButton protected () extends DataViewControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.6.0: introduced
      */
    var syncAutomatically: Boolean = js.native
  }
  
  @js.native
  class DataViewSource protected () extends EntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class DatabaseConstraint protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var attribute: IAttribute | Null = js.native
    val attributeQualifiedName: String | Null = js.native
    val containerAsDatabaseSourceBase: DatabaseSourceBase = js.native
    val containerAsSelectorDatabaseSource: SelectorDatabaseSource = js.native
    @JSName("model")
    var model_DatabaseConstraint: IModel = js.native
    var operator: DatabaseConstraintOperator = js.native
    var value: String = js.native
  }
  
  @js.native
  class DatabaseConstraintOperator () extends AbstractEnum
  
  @js.native
  abstract class DatabaseSourceBase protected () extends SortableEntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val databaseConstraints: IList[DatabaseConstraint] = js.native
  }
  
  @js.native
  class DateFormat () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
    */
  @js.native
  class DatePicker protected () extends AttributeWidgetWithPlaceholder {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var formattingInfo: FormattingInfo = js.native
  }
  
  /**
    * In version 7.17.0: introduced
    */
  @js.native
  class DeleteClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var closePage: Boolean = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  @js.native
  class DesignPropertyValue protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var booleanValue: Boolean = js.native
    val containerAsAppearance: Appearance = js.native
    var key: String = js.native
    @JSName("model")
    var model_DesignPropertyValue: IModel = js.native
    var stringValue: String = js.native
    var `type`: DesignPropertyValueType = js.native
  }
  
  @js.native
  class DesignPropertyValueType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
    */
  @js.native
  class DivContainer protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.23.0: introduced
      */
    var renderMode: ContainerRenderMode = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
    */
  @js.native
  class DropDown protected () extends AttributeWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.2.0: introduced
      */
    var emptyOptionCaption: Text = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
    */
  @js.native
  class DropDownButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val items: IList[DropDownButtonItem] = js.native
  }
  
  @js.native
  class DropDownButtonItem protected () extends ActionItem {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var caption: Text = js.native
    var image: IImage | Null = js.native
    val imageQualifiedName: String | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
    */
  @js.native
  class DropDownSearchField protected () extends SingleSearchField {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var allowMultipleSelect: Boolean = js.native
    var sortBar: GridSortBar = js.native
    /**
      * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
      */
    var xPathConstraint: String = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
    */
  @js.native
  class DynamicImageViewer protected () extends EntityWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.18.0: introduced
      */
    var clickAction: ClientAction = js.native
    var defaultImage: IImage | Null = js.native
    val defaultImageQualifiedName: String | Null = js.native
    var height: Double = js.native
    var heightUnit: ImageSizeUnit = js.native
    /**
      * In version 7.18.0: deleted
      */
    var onClickBehavior: OnClickBehavior = js.native
    /**
      * In version 7.18.0: introduced
      */
    var onClickEnlarge: Boolean = js.native
    var responsive: Boolean = js.native
    var showAsThumbnail: Boolean = js.native
    var width: Double = js.native
    var widthUnit: ImageSizeUnit = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
    */
  @js.native
  class DynamicText protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var content: ClientTemplate = js.native
    /**
      * In version 8.0.0: introduced
      */
    var nativeTextStyle: NativeTextStyle = js.native
    var renderMode: TextRenderMode = js.native
  }
  
  @js.native
  class EditableEnum () extends AbstractEnum
  
  @js.native
  abstract class EntityPathSource protected () extends DataSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyEntityPath.
      *
      * In version 7.11.0: deleted
      */
    var entityPath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var entityRef: EntityRef | Null = js.native
  }
  
  @js.native
  abstract class EntityWidget protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var dataSource: DataSource = js.native
  }
  
  @js.native
  class EnumFormat () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
    */
  @js.native
  class FileManager protected () extends InputWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var allowedExtensions: String = js.native
    var maxFileSize: Double = js.native
    var showFileInBrowser: Boolean = js.native
    var `type`: FileManagerType = js.native
  }
  
  @js.native
  class FileManagerType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.IFormBase because var conflicts: id, isLoaded, model, name, structureTypeName, unit. Inlined  */ @js.native
  abstract class FormBase protected () extends Document {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    var canvasHeight: Double = js.native
    var canvasWidth: Double = js.native
  }
  
  @js.native
  class FormLocation () extends AbstractEnum
  
  @js.native
  class FormValidations () extends AbstractEnum
  
  @js.native
  class FormattingInfo protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsClientTemplateParameter: ClientTemplateParameter = js.native
    val containerAsDataGridColumn: DataGridColumn = js.native
    val containerAsDatePicker: DatePicker = js.native
    val containerAsDynamicLabel: DynamicLabel = js.native
    val containerAsGridColumn: GridColumn = js.native
    val containerAsReferenceSelector: ReferenceSelector = js.native
    val containerAsTextBox: TextBox = js.native
    var customDateFormat: String = js.native
    var dateFormat: DateFormat = js.native
    var decimalPrecision: Double = js.native
    var enumFormat: EnumFormat = js.native
    var groupDigits: Boolean = js.native
    @JSName("model")
    var model_FormattingInfo: IModel = js.native
  }
  
  @js.native
  class GlyphIcon protected () extends Icon {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var code: Double = js.native
  }
  
  @js.native
  abstract class Grid protected () extends ListenTargetWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var controlBar: GridControlBar = js.native
    var defaultButtonTrigger: ClickTypeType = js.native
    var isControlBarVisible: Boolean = js.native
    var isPagingEnabled: Boolean = js.native
    var refreshTime: Double = js.native
    var selectFirst: Boolean = js.native
    var selectionMode: GridSelectionMode = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
    */
  @js.native
  class GridActionButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var action: ClientAction = js.native
    var maintainSelectionAfterMicroflow: Boolean = js.native
  }
  
  @js.native
  abstract class GridBaseSource protected () extends SortableEntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var searchBar: SearchBar = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
    */
  @js.native
  class GridColumn protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var aggregateCaption: Text = js.native
    var aggregateFunction: AggregateFunction = js.native
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attributePath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef | Null = js.native
    var caption: Text = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val containerAsColumnGrid: ColumnGrid = js.native
    var editable: Boolean = js.native
    var formattingInfo: FormattingInfo = js.native
    @JSName("model")
    var model_GridColumn: IModel = js.native
    var name: String = js.native
    var showTooltip: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var width: Double = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
    */
  @js.native
  class GridControlBar protected () extends ControlBar {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var defaultButton: ControlBarItem | Null = js.native
    /**
      * In version 7.13.0: deleted
      */
    var searchButton: GridSearchButton = js.native
  }
  
  @js.native
  abstract class GridControlBarButton protected () extends ControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class GridDatabaseSource protected () extends DatabaseSourceBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var searchBar: SearchBar = js.native
  }
  
  /**
    * In version 7.17.0: deleted
    */
  @js.native
  class GridDeleteButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
    */
  @js.native
  class GridDeselectAllButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
    *
    * In version 7.17.0: deleted
    */
  @js.native
  class GridEditButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var pageSettings: PageSettings = js.native
    val pagesForSpecializations: IList[PageForSpecialization] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
    */
  @js.native
  class GridNewButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var editLocation: NewButtonEditLocation = js.native
    var entity: IEntity | Null = js.native
    val entityQualifiedName: String | Null = js.native
    /**
      * In version 6.2.0: deleted
      * In version 6.0.0: deprecated
      */
    var isPersistent: Boolean = js.native
    var pageSettings: PageSettings = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
    */
  @js.native
  class GridSearchButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
    */
  @js.native
  class GridSelectAllButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var selectionType: SelectionType = js.native
  }
  
  @js.native
  class GridSelectionMode () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
    */
  @js.native
  class GridSortBar protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsDropDownSearchField: DropDownSearchField = js.native
    val containerAsSelectorDatabaseSource: SelectorDatabaseSource = js.native
    val containerAsSelectorXPathSource: SelectorXPathSource = js.native
    val containerAsSortableEntityPathSource: SortableEntityPathSource = js.native
    @JSName("model")
    var model_GridSortBar: IModel = js.native
    val sortItems: IList[GridSortItem] = js.native
  }
  
  @js.native
  class GridSortItem protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attributePath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef = js.native
    val containerAsGridSortBar: GridSortBar = js.native
    @JSName("model")
    var model_GridSortItem: IModel = js.native
    var sortDirection: SortDirection = js.native
  }
  
  @js.native
  class GridXPathSource protected () extends GridBaseSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: deleted
      */
    var applyContext: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    var removeAllFromContext: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    val removeFromContextIds: IList[IEntity] = js.native
    val removeFromContextIdsQualifiedNames: js.Array[String] = js.native
    /**
      * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
      */
    var xPathConstraint: String = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
    */
  @js.native
  class GroupBox protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var caption: ClientTemplate | Null = js.native
    var collapsible: GroupBoxCollapsible = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class GroupBoxCollapsible () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
    */
  @js.native
  class Header protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.15.0: deleted
      */
    var leftWidget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val leftWidgets: IList[Widget] = js.native
    /**
      * In version 7.15.0: deleted
      */
    var rightWidget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val rightWidgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
    *
    * In version 8.0.0: deleted
    */
  @js.native
  class HorizontalSplitPane protected () extends SplitPane {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/building-block relevant section in reference guide}
    *
    * In version 7.7.0: introduced
    */
  @js.native
  trait IBuildingBlock extends ITemplateFormBase
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
    */
  @js.native
  trait IFormBase extends IDocument
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
    */
  @js.native
  trait ILayout extends IFormBase {
    /**
      * This property is required and cannot be set to null.
      *
      * In version 8.0.0: introduced
      */
    val content: ILayoutContent = js.native
    /**
      * In version 8.0.0: deleted
      * In version 7.17.0: added public
      * In version 6.8.0: added optional
      */
    val layoutCall: ILayoutCall | Null = js.native
    /**
      * In version 8.0.0: deleted
      * In version 6.8.0: added public
      */
    val layoutType: LayoutType = js.native
  }
  
  /**
    * In version 7.17.0: added public
    */
  @js.native
  trait ILayoutCall extends IElement {
    val containerAsLayout: ILayout = js.native
    val containerAsPage: IPage = js.native
    val containerAsPageTemplate: IPageTemplate = js.native
    val containerAsWebLayoutContent: IWebLayoutContent = js.native
    /**
      * This property is required and cannot be set to null.
      *
      * In version 8.0.0: removed optional
      * In version 7.17.0: added public
      */
    val layout: ILayout | Null = js.native
    val layoutQualifiedName: String | Null = js.native
    @JSName("model")
    val model_ILayoutCall: IModel = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  @js.native
  trait ILayoutContent extends IElement {
    val containerAsLayout: ILayout = js.native
    @JSName("model")
    val model_ILayoutContent: IModel = js.native
  }
  
  @js.native
  trait ILayoutParameter
    extends IElement
       with IByNameReferrable {
    val containerAsLayout: ILayout = js.native
    @JSName("model")
    val model_ILayoutParameter: IModel = js.native
    val name: String = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  @js.native
  trait INativeLayoutContent extends ILayoutContent
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
    */
  @js.native
  trait IPage extends IFormBase {
    /**
      * In version 7.23.0: added public
      */
    val allowedRoles: IList[IModuleRole] = js.native
    val allowedRolesQualifiedNames: js.Array[String] = js.native
    /**
      * This property is required and cannot be set to null.
      *
      * In version 7.17.0: added public
      */
    val layoutCall: ILayoutCall = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/page-template relevant section in reference guide}
    *
    * In version 7.7.0: introduced
    */
  @js.native
  trait IPageTemplate extends ITemplateFormBase {
    /**
      * This property is required and cannot be set to null.
      *
      * In version 7.17.0: added public
      */
    val layoutCall: ILayoutCall = js.native
    /**
      * In version 7.17.0: added public
      */
    val `type`: PageTemplateType = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
    */
  @js.native
  trait ISnippet extends IFormBase {
    val entity: IEntity | Null = js.native
    val entityQualifiedName: String | Null = js.native
  }
  
  /**
    * In version 7.7.0: introduced
    */
  @js.native
  trait ITemplateFormBase extends IFormBase {
    /**
      * In version 7.17.0: added public
      */
    val displayName: String = js.native
    /**
      * In version 7.17.0: introduced
      */
    val documentationUrl: String = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  @js.native
  trait IWebLayoutContent extends ILayoutContent {
    val layoutCall: ILayoutCall | Null = js.native
    val layoutType: LayoutType = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
    */
  @js.native
  abstract class Icon protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsBottomBarItem: BottomBarItem = js.native
    val containerAsButton: Button = js.native
    val containerAsControlBarButton: ControlBarButton = js.native
    val containerAsMenuItem: MenuItem = js.native
    val containerAsWidgetValue: WidgetValue = js.native
    @JSName("model")
    var model_Icon: IModel = js.native
  }
  
  @js.native
  class ImageIcon protected () extends Icon {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var image: IImage = js.native
    val imageQualifiedName: String = js.native
  }
  
  @js.native
  class ImageSizeUnit () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
    */
  @js.native
  class ImageUploader protected () extends InputWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var allowedExtensions: String = js.native
    var maxFileSize: Double = js.native
    var thumbnailSize: ISize = js.native
  }
  
  @js.native
  class ImageViewerSource protected () extends EntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
    */
  @js.native
  class InputReferenceSetSelector protected () extends AssociationWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  abstract class InputWidget protected () extends ConditionallyEditableWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.18.0: deleted
      */
    var label: Text | Null = js.native
    /**
      * In version 7.18.0: introduced
      */
    var labelTemplate: ClientTemplate | Null = js.native
  }
  
  @js.native
  class KeyboardType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
    */
  @js.native
  class Label protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var caption: Text = js.native
  }
  
  @js.native
  class LabelPosition () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayout because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined content, layoutCall, layoutType */ @js.native
  class Layout protected () extends FormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    /**
      * In version 6.8.0: deleted
      */
    var acceptButtonPlaceholder: ILayoutParameter | Null = js.native
    val acceptButtonPlaceholderQualifiedName: String | Null = js.native
    /**
      * In version 7.9.0: deleted
      * In version 6.8.0: introduced
      */
    var acceptPlaceholderName: String = js.native
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 6.8.0: deleted
      */
    var cancelButtonPlaceholder: ILayoutParameter | Null = js.native
    val cancelButtonPlaceholderQualifiedName: String | Null = js.native
    /**
      * In version 7.9.0: deleted
      * In version 6.8.0: introduced
      */
    var cancelPlaceholderName: String = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    /**
      * In version 8.0.0: introduced
      */
    var content: ILayoutContent | LayoutContent = js.native
    /**
      * In version 8.0.0: deleted
      * In version 7.17.0: added public
      * In version 6.8.0: added optional
      */
    var layoutCall: ILayoutCall | LayoutCall | Null = js.native
    /**
      * In version 8.0.0: deleted
      * In version 6.8.0: added public
      */
    var layoutType: LayoutType = js.native
    /**
      * In version 6.8.0: deleted
      */
    var mainPlaceholder: ILayoutParameter | Null = js.native
    /**
      * In version 7.9.0: deleted
      * In version 6.8.0: introduced
      */
    var mainPlaceholderName: String = js.native
    val mainPlaceholderQualifiedName: String | Null = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    /**
      * In version 7.9.0: deleted
      */
    var useMainPlaceholderForPopups: Boolean = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 8.0.0: deleted
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * In version 7.17.0: added public
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutCall because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined containerAsLayout, containerAsPage, containerAsPageTemplate, containerAsWebLayoutContent, layout, layoutQualifiedName */ @js.native
  class LayoutCall protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val arguments: IList[LayoutCallArgument] = js.native
    val containerAsLayout: ILayout | Layout = js.native
    val containerAsPage: IPage | Page = js.native
    val containerAsPageTemplate: IPageTemplate | PageTemplate = js.native
    val containerAsWebLayoutContent: IWebLayoutContent | WebLayoutContent = js.native
    /**
      * In version 8.0.0: removed optional
      * In version 7.17.0: added public
      */
    var layout: ILayout | Null = js.native
    val layoutQualifiedName: Null | String = js.native
    @JSName("model")
    var model_LayoutCall: IModel = js.native
  }
  
  @js.native
  class LayoutCallArgument protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsLayoutCall: LayoutCall = js.native
    @JSName("model")
    var model_LayoutCallArgument: IModel = js.native
    /**
      * In version 6.8.0: introduced
      */
    var parameter: ILayoutParameter = js.native
    /**
      * In version 6.8.0: deleted
      */
    var parameterName: String = js.native
    val parameterQualifiedName: String = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutContent because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined containerAsLayout */ @js.native
  abstract class LayoutContent protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsLayout: ILayout | Layout = js.native
    @JSName("model")
    var model_LayoutContent: IModel = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
    */
  @js.native
  class LayoutGrid protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val rows: IList[LayoutGridRow] = js.native
    var width: ContainerWidth = js.native
  }
  
  @js.native
  class LayoutGridColumn protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val containerAsLayoutGridRow: LayoutGridRow = js.native
    @JSName("model")
    var model_LayoutGridColumn: IModel = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var weight: Double = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class LayoutGridRow protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val columns: IList[LayoutGridColumn] = js.native
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
    val containerAsLayoutGrid: LayoutGrid = js.native
    @JSName("model")
    var model_LayoutGridRow: IModel = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
  }
  
  @js.native
  class LayoutModeType () extends AbstractEnum
  
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ILayoutParameter because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined containerAsLayout, name */ @js.native
  class LayoutParameter protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsLayout: ILayout | Layout = js.native
    @JSName("model")
    var model_LayoutParameter: IModel = js.native
    var name: String = js.native
    val qualifiedName: String | Null = js.native
  }
  
  @js.native
  class LayoutType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
    *
    * In version 7.3.0: deleted
    */
  @js.native
  class LinkButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var address: StaticOrDynamicString = js.native
    var linkType: LinkType = js.native
  }
  
  @js.native
  class LinkType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
    */
  @js.native
  class ListView protected () extends ListenTargetWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var clickAction: ClientAction = js.native
    var editable: Boolean = js.native
    /**
      * In version 8.0.0: introduced
      */
    var numberOfColumns: Double = js.native
    var pageSize: Double = js.native
    /**
      * In version 8.0.0: introduced
      */
    var pullDownAction: ClientAction = js.native
    /**
      * In version 8.0.0: introduced
      */
    var scrollDirection: ScrollDirection = js.native
    val templates: IList[ListViewTemplate] = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class ListViewDatabaseSource protected () extends DatabaseSourceBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var search: ListViewSearch = js.native
  }
  
  @js.native
  class ListViewSearch protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsListViewDatabaseSource: ListViewDatabaseSource = js.native
    val containerAsListViewXPathSource: ListViewXPathSource = js.native
    @JSName("model")
    var model_ListViewSearch: IModel = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    val searchPaths: IList[String] = js.native
    /**
      * In version 7.11.0: introduced
      */
    val searchRefs: IList[AttributeRef] = js.native
  }
  
  @js.native
  class ListViewTemplate protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsListView: ListView = js.native
    @JSName("model")
    var model_ListViewTemplate: IModel = js.native
    var specialization: IEntity = js.native
    val specializationQualifiedName: String = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class ListViewXPathSource protected () extends SortableEntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var search: ListViewSearch = js.native
    /**
      * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
      */
    var xPathConstraint: String = js.native
  }
  
  @js.native
  class ListenTargetSource protected () extends DataSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var listenTarget: String = js.native
  }
  
  @js.native
  abstract class ListenTargetWidget protected () extends EntityWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/sign-in-button relevant section in reference guide}
    *
    * In version 7.0.2: introduced
    */
  @js.native
  class LoginButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var validationMessageWidget: String = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/login-id-text-box relevant section in reference guide}
    *
    * In version 7.0.2: introduced
    */
  @js.native
  class LoginIdTextBox protected () extends LoginTextBox {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.0.2: introduced
    */
  @js.native
  abstract class LoginTextBox protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var label: Text | Null = js.native
    var labelWidth: Double = js.native
    var placeholder: Text = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
    *
    * In version 7.1.0: deleted
    */
  @js.native
  class LogoutButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
    *
    * In version 7.15.0: deleted
    * In version 7.1.0: introduced
    */
  @js.native
  class MasterDetail protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
      */
    var detail: MasterDetailDetailRegion = js.native
    /**
      * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
      */
    var master: MasterDetailMasterRegion = js.native
  }
  
  /**
    * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
    *
    * In version 7.15.0: deleted
    * In version 7.1.0: introduced
    */
  @js.native
  class MasterDetailDetailRegion protected () extends MasterDetailRegion {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var responsiveWeight: Double = js.native
    var tabletWeight: Double = js.native
    var title: Text = js.native
  }
  
  /**
    * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
    *
    * In version 7.15.0: deleted
    * In version 7.1.0: introduced
    */
  @js.native
  class MasterDetailMasterRegion protected () extends MasterDetailRegion {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var responsiveWeight: Double = js.native
    var tabletWeight: Double = js.native
  }
  
  /**
    * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
    *
    * In version 7.15.0: deleted
    * In version 7.1.0: introduced
    */
  @js.native
  abstract class MasterDetailRegion protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var `class`: String = js.native
    val containerAsMasterDetail: MasterDetail = js.native
    @JSName("model")
    var model_MasterDetailRegion: IModel = js.native
    var style: String = js.native
    var widget: Widget | Null = js.native
  }
  
  @js.native
  abstract class MemberWidget protected () extends InputWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attributePath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef | Null = js.native
    /**
      * In version 6.9.0: introduced
      */
    var readOnlyStyle: ReadOnlyStyle = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
    */
  @js.native
  class MenuBar protected () extends MenuWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class MenuDocumentSource protected () extends MenuSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var menu: IMenuDocument | Null = js.native
    val menuQualifiedName: String | Null = js.native
  }
  
  @js.native
  abstract class MenuSource protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsMenuWidget: MenuWidget = js.native
    @JSName("model")
    var model_MenuSource: IModel = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
    */
  @js.native
  abstract class MenuWidget protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var menuSource: MenuSource = js.native
  }
  
  @js.native
  class MicroflowClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var microflowSettings: MicroflowSettings = js.native
  }
  
  /**
    * In version 7.19.0: introduced
    */
  @js.native
  class MicroflowParameterMapping protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsMicroflowSettings: MicroflowSettings = js.native
    @JSName("model")
    var model_MicroflowParameterMapping: IModel = js.native
    var parameter: IMicroflowParameter = js.native
    val parameterQualifiedName: String = js.native
    var useAllPages: Boolean = js.native
    var widget: EntityWidget | Null = js.native
    val widgetLocalName: String | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
    */
  @js.native
  class MicroflowSettings protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var asynchronous: Boolean = js.native
    var confirmationInfo: ConfirmationInfo | Null = js.native
    val containerAsAssociationWidget: AssociationWidget = js.native
    val containerAsAttributeWidget: AttributeWidget = js.native
    val containerAsMicroflowClientAction: MicroflowClientAction = js.native
    val containerAsMicroflowSource: MicroflowSource = js.native
    val containerAsOnClickMicroflow: OnClickMicroflow = js.native
    val containerAsReferenceSetSelector: ReferenceSetSelector = js.native
    val containerAsSelectorMicroflowSource: SelectorMicroflowSource = js.native
    var formValidations: FormValidations = js.native
    var microflow: IMicroflow | Null = js.native
    val microflowQualifiedName: String | Null = js.native
    @JSName("model")
    var model_MicroflowSettings: IModel = js.native
    /**
      * In version 7.19.0: introduced
      */
    val parameterMappings: IList[MicroflowParameterMapping] = js.native
    var progressBar: ProgressBarType = js.native
    var progressMessage: Text | Null = js.native
    /**
      * In version 7.19.0: deleted
      */
    var useAllPages: Boolean = js.native
  }
  
  @js.native
  class MicroflowSource protected () extends DataSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var microflowSettings: MicroflowSettings = js.native
  }
  
  @js.native
  class MobileFooterType () extends AbstractEnum
  
  /**
    * In version 7.19.0: introduced
    */
  @js.native
  class NanoflowParameterMapping protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsCallNanoflowClientAction: CallNanoflowClientAction = js.native
    val containerAsNanoflowSource: NanoflowSource = js.native
    @JSName("model")
    var model_NanoflowParameterMapping: IModel = js.native
    var parameter: INanoflowParameter = js.native
    val parameterQualifiedName: String = js.native
    var useAllPages: Boolean = js.native
    var widget: EntityWidget | Null = js.native
    val widgetLocalName: String | Null = js.native
  }
  
  /**
    * In version 7.12.0: introduced
    */
  @js.native
  class NanoflowSource protected () extends DataSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var nanoflow: INanoflow | Null = js.native
    val nanoflowQualifiedName: String | Null = js.native
    /**
      * In version 7.19.0: introduced
      */
    val parameterMappings: IList[NanoflowParameterMapping] = js.native
  }
  
  /**
    * In version 8.0.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.INativeLayoutContent because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined  */ @js.native
  class NativeLayoutContent protected () extends LayoutContent {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    @JSName("containerAsLayout")
    val containerAsLayout_NativeLayoutContent: Layout = js.native
    var rightHeaderPlaceholder: Placeholder | Null = js.native
    /**
      * In version 8.2.0: introduced
      */
    var showBottomBar: Boolean = js.native
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class NativeTextStyle () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
    */
  @js.native
  class NavigationList protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val items: IList[NavigationListItem] = js.native
  }
  
  @js.native
  class NavigationListItem protected () extends ActionItem {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class NavigationSource protected () extends MenuSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.2.0: introduced
      */
    var navigationProfile: INavigationProfile = js.native
    val navigationProfileQualifiedName: String = js.native
    /**
      * In version 7.2.0: deleted
      */
    var profileType: ProfileType = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
    */
  @js.native
  class NavigationTree protected () extends MenuWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.17.0: deleted
    */
  @js.native
  class NewButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.3.0: deleted
      */
    var entity: IEntity | Null = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyEntityPath.
      *
      * In version 7.11.0: deleted
      * In version 6.3.0: introduced
      */
    var entityPath: String = js.native
    val entityQualifiedName: String | Null = js.native
    /**
      * In version 7.11.0: introduced
      */
    var entityRef: EntityRef | Null = js.native
    var pageSettings: PageSettings = js.native
  }
  
  @js.native
  class NewButtonEditLocation () extends AbstractEnum
  
  @js.native
  class NoClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.22.0: deleted
    */
  @js.native
  class OfflineSchema protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    @JSName("model")
    var model_OfflineSchema: IModel = js.native
    var role: IUserRole | Null = js.native
    val roleQualifiedName: String | Null = js.native
    /**
      * In version 6.4.0: introduced
      */
    val tables: IList[String] = js.native
  }
  
  /**
    * In version 7.22.0: deleted
    */
  @js.native
  class OfflineSchemaFetchInstruction protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    @JSName("model")
    var model_OfflineSchemaFetchInstruction: IModel = js.native
    var tableName: String = js.native
    var xPath: String = js.native
  }
  
  /**
    * In version 7.18.0: deleted
    */
  @js.native
  abstract class OnClickBehavior protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsDynamicImageViewer: DynamicImageViewer = js.native
    @JSName("model")
    var model_OnClickBehavior: IModel = js.native
  }
  
  /**
    * In version 7.18.0: deleted
    */
  @js.native
  class OnClickEnlarge protected () extends OnClickBehavior {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.18.0: deleted
    */
  @js.native
  class OnClickMicroflow protected () extends OnClickBehavior {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var microflowSettings: MicroflowSettings = js.native
  }
  
  /**
    * In version 7.18.0: deleted
    */
  @js.native
  class OnClickNothing protected () extends OnClickBehavior {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.3.0: introduced
    */
  @js.native
  class OpenLinkClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var address: StaticOrDynamicString = js.native
    var linkType: LinkType = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.IPage because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined layoutCall, allowedRoles, allowedRolesQualifiedNames */ @js.native
  class Page protected () extends FormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    /**
      * In version 7.23.0: added public
      */
    val allowedRoles: IList[IModuleRole] = js.native
    val allowedRolesQualifiedNames: js.Array[String] = js.native
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    /**
      * In version 7.17.0: added public
      */
    var layoutCall: ILayoutCall | LayoutCall = js.native
    var markAsUsed: Boolean = js.native
    /**
      * In version 6.7.0: introduced
      */
    var popupCloseAction: String = js.native
    var popupHeight: Double = js.native
    var popupResizable: Boolean = js.native
    var popupWidth: Double = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var title: Text = js.native
    /**
      * In version 6.7.0: introduced
      */
    var url: String = js.native
  }
  
  @js.native
  class PageClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var pageSettings: PageSettings = js.native
    /**
      * In version 7.17.0: introduced
      */
    val pagesForSpecializations: IList[PageForSpecialization] = js.native
  }
  
  @js.native
  class PageForSpecialization protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsGridEditButton: GridEditButton = js.native
    val containerAsPageClientAction: PageClientAction = js.native
    var entity: IEntity = js.native
    val entityQualifiedName: String = js.native
    @JSName("model")
    var model_PageForSpecialization: IModel = js.native
    var pageSettings: PageSettings = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
    */
  @js.native
  class PageSettings protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsAssociationWidget: AssociationWidget = js.native
    val containerAsCreateObjectClientAction: CreateObjectClientAction = js.native
    val containerAsDataGridAddButton: DataGridAddButton = js.native
    val containerAsGridEditButton: GridEditButton = js.native
    val containerAsGridNewButton: GridNewButton = js.native
    val containerAsNavigationProfile: NavigationProfile = js.native
    val containerAsNewButton: NewButton = js.native
    val containerAsPageClientAction: PageClientAction = js.native
    val containerAsPageForSpecialization: PageForSpecialization = js.native
    val containerAsReferenceSelector: ReferenceSelector = js.native
    val containerAsShowPageAction: ShowPageAction = js.native
    var formTitle: Text | Null = js.native
    /**
      * In version 8.0.0: deleted
      */
    var location: FormLocation = js.native
    @JSName("model")
    var model_PageSettings: IModel = js.native
    var page: IPage | Null = js.native
    val pageQualifiedName: String | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/page-template relevant section in reference guide}
    *
    * In version 7.7.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.IPageTemplate because var conflicts: displayName, documentationUrl, id, isLoaded, model, structureTypeName, unit. Inlined `type`, layoutCall */ @js.native
  class PageTemplate protected () extends TemplateFormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    /**
      * In version 7.17.0: added public
      */
    var layoutCall: ILayoutCall | LayoutCall = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    /**
      * In version 7.17.0: added public
      */
    var `type`: PageTemplateType = js.native
  }
  
  @js.native
  class PageTemplateType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/password-text-box relevant section in reference guide}
    *
    * In version 7.0.2: introduced
    */
  @js.native
  class PasswordTextBox protected () extends LoginTextBox {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
    */
  @js.native
  class Placeholder protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class ProgressBarType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/radio-buttons relevant section in reference guide}
    */
  @js.native
  class RadioButtonGroup protected () extends AttributeWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var renderHorizontal: Boolean = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
    */
  @js.native
  class RangeSearchField protected () extends SearchField {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var includeLower: Boolean = js.native
    var includeUpper: Boolean = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var lowerBound: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var lowerBoundRef: AttributeRef | Null = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var upperBound: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var upperBoundRef: AttributeRef | Null = js.native
  }
  
  @js.native
  class ReadOnlyStyle () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
    */
  @js.native
  class ReferenceSelector protected () extends AssociationWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.2.0: introduced
      */
    var emptyOptionCaption: Text = js.native
    var formattingInfo: FormattingInfo = js.native
    var gotoPageSettings: PageSettings = js.native
    var renderMode: ReferenceSelectorRenderModeType = js.native
    /**
      * In version 7.6.0: deleted
      */
    var required: Boolean = js.native
    /**
      * In version 7.6.0: deleted
      */
    var requiredMessage: Text = js.native
    /**
      * In version 7.6.0: introduced
      */
    var validation: WidgetValidation = js.native
  }
  
  @js.native
  class ReferenceSelectorRenderModeType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
    */
  @js.native
  class ReferenceSetSelector protected () extends ColumnGrid {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyEntityPath.
      *
      * In version 7.11.0: deleted
      */
    val constrainedBy: IList[String] = js.native
    /**
      * In version 7.11.0: introduced
      */
    val constrainedByRefs: IList[EntityRef] = js.native
    /**
      * In version 7.13.0: introduced
      */
    var onChangeAction: ClientAction = js.native
    /**
      * In version 7.13.0: deleted
      */
    var onChangeMicroflowSettings: MicroflowSettings = js.native
    /**
      * In version 8.0.0: deleted
      */
    var removeAllFromContext: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    val removeFromContextEntities: IList[IEntity] = js.native
    val removeFromContextEntitiesQualifiedNames: js.Array[String] = js.native
    /**
      * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
      */
    var xPathConstraint: String = js.native
  }
  
  @js.native
  class ReferenceSetSource protected () extends GridBaseSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class RenderType () extends AbstractEnum
  
  /**
    * In version 7.12.0: introduced
    */
  @js.native
  class RetrievalQuery protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val allowedUserRoles: IList[IUserRole] = js.native
    val allowedUserRolesQualifiedNames: js.Array[String] = js.native
    /**
      * In version 7.21.0: introduced
      */
    var entityPath: String = js.native
    /**
      * In version 7.21.0: introduced
      */
    var microflow: IMicroflow | Null = js.native
    val microflowQualifiedName: String | Null = js.native
    @JSName("model")
    var model_RetrievalQuery: IModel = js.native
    /**
      * In version 7.14.0: introduced
      */
    var pageName: String = js.native
    var queryId: String = js.native
    var schemaId: String = js.native
    var xPath: String = js.native
  }
  
  /**
    * In version 6.2.0: introduced
    */
  @js.native
  class RetrievalSchema protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 7.4.0: deleted
      */
    var entity: String = js.native
    @JSName("model")
    var model_RetrievalSchema: IModel = js.native
    /**
      * In version 7.2.0: introduced
      */
    val usedAssociations: IList[String] = js.native
    /**
      * In version 7.2.0: deleted
      */
    val usedAttributes: IList[String] = js.native
    /**
      * In version 7.14.0: introduced
      */
    var widgetName: String = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
    *
    * In version 7.0.2: deleted
    */
  @js.native
  class SaveButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.7.0: introduced
      */
    var closePage: Boolean = js.native
    /**
      * In version 6.6.0: introduced
      */
    var syncAutomatically: Boolean = js.native
  }
  
  /**
    * In version 7.0.2: introduced
    */
  @js.native
  class SaveChangesClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var closePage: Boolean = js.native
    var syncAutomatically: Boolean = js.native
  }
  
  @js.native
  class ScrollBehavior () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
    */
  @js.native
  class ScrollContainer protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var alignment: AlignmentEnum = js.native
    var bottom: ScrollContainerRegion | Null = js.native
    var center: ScrollContainerRegion = js.native
    var layoutMode: LayoutModeType = js.native
    var left: ScrollContainerRegion | Null = js.native
    var right: ScrollContainerRegion | Null = js.native
    var scrollBehavior: ScrollBehavior = js.native
    var top: ScrollContainerRegion | Null = js.native
    var width: Double = js.native
    var widthMode: SizeMode = js.native
  }
  
  @js.native
  class ScrollContainerRegion protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val containerAsScrollContainer: ScrollContainer = js.native
    @JSName("model")
    var model_ScrollContainerRegion: IModel = js.native
    var size: Double = js.native
    var sizeMode: SizeMode = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    /**
      * In version 6.10.0: introduced
      */
    var toggleMode: ToggleMode = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class ScrollDirection () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
    */
  @js.native
  class SearchBar protected () extends ControlBar {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var `type`: SearchBarTypeEnum = js.native
    var waitForSearch: Boolean = js.native
  }
  
  @js.native
  class SearchBarTypeEnum () extends AbstractEnum
  
  @js.native
  abstract class SearchField protected () extends ControlBarItem {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var caption: Text = js.native
    /**
      * In version 7.21.0: introduced
      */
    var customDateFormat: String = js.native
    var defaultValue: String = js.native
    /**
      * In version 7.21.0: introduced
      */
    var placeholder: Text = js.native
    var `type`: SearchFieldType = js.native
  }
  
  @js.native
  class SearchFieldOperator () extends AbstractEnum
  
  @js.native
  class SearchFieldType () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
    */
  @js.native
  class SelectButton protected () extends GridControlBarButton {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class SelectionType () extends AbstractEnum
  
  /**
    * In version 6.1.0: introduced
    */
  @js.native
  class SelectorDatabaseSource protected () extends SelectorSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val databaseConstraints: IList[DatabaseConstraint] = js.native
    /**
      * In version 6.2.0: introduced
      */
    var sortBar: GridSortBar = js.native
  }
  
  @js.native
  class SelectorMicroflowSource protected () extends SelectorSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var dataSourceMicroflowSettings: MicroflowSettings = js.native
  }
  
  @js.native
  abstract class SelectorSource protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsAssociationWidget: AssociationWidget = js.native
    @JSName("model")
    var model_SelectorSource: IModel = js.native
  }
  
  @js.native
  class SelectorXPathSource protected () extends SelectorSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: deleted
      */
    var applyContext: Boolean = js.native
    /**
      * The value of this property is conceptually of type paths.LegacyEntityPath.
      *
      * In version 7.11.0: deleted
      */
    val constrainedBy: IList[String] = js.native
    /**
      * In version 7.11.0: introduced
      */
    val constrainedByRefs: IList[EntityRef] = js.native
    /**
      * In version 8.0.0: deleted
      */
    var removeAllFromContext: Boolean = js.native
    /**
      * In version 8.0.0: deleted
      */
    val removeFromContextEntities: IList[IEntity] = js.native
    val removeFromContextEntitiesQualifiedNames: js.Array[String] = js.native
    var sortBar: GridSortBar = js.native
    /**
      * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
      */
    var xPathConstraint: String = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
    */
  @js.native
  class SidebarToggleButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 6.10.0: deleted
      */
    var initiallyOpen: Boolean = js.native
    /**
      * In version 6.10.0: deleted
      */
    var mode: SidebarToggleMode = js.native
    /**
      * In version 6.10.0: deleted
      */
    var region: SidebarToggleRegion = js.native
  }
  
  @js.native
  class SidebarToggleMode () extends AbstractEnum
  
  @js.native
  class SidebarToggleRegion () extends AbstractEnum
  
  /**
    * In version 7.1.0: introduced
    */
  @js.native
  class SignOutClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
    */
  @js.native
  class SimpleMenuBar protected () extends MenuWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var orientation: SimpleMenuBarOrientation = js.native
  }
  
  @js.native
  class SimpleMenuBarOrientation () extends AbstractEnum
  
  @js.native
  abstract class SingleSearchField protected () extends SearchField {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attributePath: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef | Null = js.native
    var operator: SearchFieldOperator = js.native
  }
  
  @js.native
  class SizeMode () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ISnippet because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined entity, entityQualifiedName */ @js.native
  class Snippet protected () extends FormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    var entity: IEntity | Null = js.native
    val entityQualifiedName: Null | String = js.native
    /**
      * In version 8.0.0: introduced
      */
    var `type`: SnippetType = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  @js.native
  class SnippetCall protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsSnippetCallWidget: SnippetCallWidget = js.native
    @JSName("model")
    var model_SnippetCall: IModel = js.native
    var snippet: ISnippet | Null = js.native
    val snippetQualifiedName: String | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
    */
  @js.native
  class SnippetCallWidget protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var snippetCall: SnippetCall = js.native
  }
  
  @js.native
  class SnippetType () extends AbstractEnum
  
  @js.native
  class SortDirection () extends AbstractEnum
  
  @js.native
  abstract class SortableEntityPathSource protected () extends EntityPathSource {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var sortBar: GridSortBar = js.native
  }
  
  /**
    * In version 8.0.0: deleted
    */
  @js.native
  abstract class SplitPane protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var animatedResize: Boolean = js.native
    /**
      * In version 7.15.0: deleted
      */
    var firstWidget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val firstWidgets: IList[Widget] = js.native
    var height: Double = js.native
    var position: Double = js.native
    /**
      * In version 7.15.0: deleted
      */
    var secondWidget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val secondWidgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
    */
  @js.native
  class StaticImageViewer protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var clickAction: ClientAction = js.native
    var height: Double = js.native
    var heightUnit: ImageSizeUnit = js.native
    var image: IImage | Null = js.native
    val imageQualifiedName: String | Null = js.native
    var responsive: Boolean = js.native
    var width: Double = js.native
    var widthUnit: ImageSizeUnit = js.native
  }
  
  @js.native
  class StaticOrDynamicString protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * The value of this property is conceptually of type paths.LegacyAttributePath.
      *
      * In version 7.11.0: deleted
      */
    var attribute: String = js.native
    /**
      * In version 7.11.0: introduced
      */
    var attributeRef: AttributeRef | Null = js.native
    val containerAsLinkButton: LinkButton = js.native
    val containerAsOpenLinkClientAction: OpenLinkClientAction = js.native
    var isDynamic: Boolean = js.native
    @JSName("model")
    var model_StaticOrDynamicString: IModel = js.native
    var value: String = js.native
  }
  
  /**
    * In version 7.0.2: deleted
    */
  @js.native
  class SyncButton protected () extends Button {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.0.2: introduced
    */
  @js.native
  class SyncClientAction protected () extends ClientAction {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
    */
  @js.native
  class TabContainer protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var defaultPage: TabPage | Null = js.native
    val tabPages: IList[TabPage] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
    */
  @js.native
  class TabPage protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var caption: Text = js.native
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
    val containerAsTabContainer: TabContainer = js.native
    @JSName("model")
    var model_TabPage: IModel = js.native
    var name: String = js.native
    var refreshOnShow: Boolean = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
    */
  @js.native
  class Table protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val cells: IList[TableCell] = js.native
    val columns: IList[TableColumn] = js.native
    val rows: IList[TableRow] = js.native
    var widthUnit: UnitEnum = js.native
  }
  
  @js.native
  class TableCell protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val containerAsTable: Table = js.native
    var height: Double = js.native
    var isHeader: Boolean = js.native
    var leftColumnIndex: Double = js.native
    @JSName("model")
    var model_TableCell: IModel = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var topRowIndex: Double = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
    var width: Double = js.native
  }
  
  @js.native
  class TableCellRenderModeType () extends AbstractEnum
  
  @js.native
  class TableColumn protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsTable: Table = js.native
    @JSName("model")
    var model_TableColumn: IModel = js.native
    var width: Double = js.native
  }
  
  @js.native
  class TableRow protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    var conditionalVisibilitySettings: ConditionalVisibilitySettings | Null = js.native
    val containerAsTable: Table = js.native
    @JSName("model")
    var model_TableRow: IModel = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
  }
  
  /**
    * In version 7.7.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.ITemplateFormBase because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined displayName, documentationUrl */ @js.native
  abstract class TemplateFormBase protected () extends FormBase {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      container: IFolderBase
    ) = this()
    /**
      * In version 7.17.0: added public
      */
    var displayName: String = js.native
    /**
      * In version 7.17.0: introduced
      */
    var documentationUrl: String = js.native
    var imageData: String | Null = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
    */
  @js.native
  class TemplateGrid protected () extends Grid {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var contents: TemplateGridContents = js.native
    var numberOfColumns: Double = js.native
    var numberOfRows: Double = js.native
  }
  
  @js.native
  class TemplateGridContents protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsTemplateGrid: TemplateGrid = js.native
    @JSName("model")
    var model_TemplateGridContents: IModel = js.native
    /**
      * In version 7.15.0: deleted
      */
    var widget: Widget | Null = js.native
    /**
      * In version 7.15.0: introduced
      */
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
    */
  @js.native
  class TextArea protected () extends TextWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var counterMessage: Text = js.native
    var numberOfLines: Double = js.native
    var textTooLongMessage: Text = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
    */
  @js.native
  class TextBox protected () extends TextWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var formattingInfo: FormattingInfo = js.native
    var inputMask: String = js.native
    var isPasswordBox: Boolean = js.native
    /**
      * In version 8.0.0: introduced
      */
    var keyboardType: KeyboardType = js.native
  }
  
  @js.native
  class TextRenderMode () extends AbstractEnum
  
  @js.native
  abstract class TextWidget protected () extends AttributeWidgetWithPlaceholder {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    var maxLengthCode: Double = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
    */
  @js.native
  class Title protected () extends ConditionallyVisibleWidget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  @js.native
  class ToggleMode () extends AbstractEnum
  
  @js.native
  class UnitEnum () extends AbstractEnum
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/validation-message relevant section in reference guide}
    *
    * In version 7.0.2: introduced
    */
  @js.native
  class ValidationMessage protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 7.15.0: deleted
    */
  @js.native
  class VerticalFlow protected () extends Widget {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
    *
    * In version 8.0.0: deleted
    */
  @js.native
  class VerticalSplitPane protected () extends SplitPane {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
  }
  
  /**
    * In version 8.0.0: introduced
    */
  /* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
  - typings.mendixmodelsdk.distGenPagesMod.pagesNs.IWebLayoutContent because var conflicts: id, isLoaded, model, structureTypeName, unit. Inlined layoutType, layoutCall */ @js.native
  class WebLayoutContent protected () extends LayoutContent {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    @JSName("containerAsLayout")
    val containerAsLayout_WebLayoutContent: Layout = js.native
    var layoutCall: ILayoutCall | LayoutCall | Null = js.native
    var layoutType: LayoutType = js.native
    val widgets: IList[Widget] = js.native
  }
  
  /**
    * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
    */
  /**
    * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
    */
  @js.native
  abstract class Widget protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    /**
      * In version 8.0.0: introduced
      */
    var appearance: Appearance = js.native
    /**
      * In version 8.0.0: deleted
      */
    var `class`: String = js.native
    val containerAsBuildingBlock: BuildingBlock = js.native
    val containerAsDataView: DataView = js.native
    val containerAsDivContainer: DivContainer = js.native
    val containerAsGroupBox: GroupBox = js.native
    val containerAsHeader: Header = js.native
    val containerAsLayout: Layout = js.native
    val containerAsLayoutCallArgument: LayoutCallArgument = js.native
    val containerAsLayoutGridColumn: LayoutGridColumn = js.native
    val containerAsListView: ListView = js.native
    val containerAsListViewTemplate: ListViewTemplate = js.native
    val containerAsMasterDetailRegion: MasterDetailRegion = js.native
    val containerAsNativeLayout: NativeLayout = js.native
    val containerAsNativeLayoutCallArgument: NativeLayoutCallArgument = js.native
    val containerAsNativeLayoutContent: NativeLayoutContent = js.native
    val containerAsNavigationListItem: NavigationListItem = js.native
    val containerAsReportPane: ReportPane = js.native
    val containerAsScrollContainerRegion: ScrollContainerRegion = js.native
    val containerAsSnippet: Snippet = js.native
    val containerAsSplitPane: SplitPane = js.native
    val containerAsTabPage: TabPage = js.native
    val containerAsTableCell: TableCell = js.native
    val containerAsTemplateGridContents: TemplateGridContents = js.native
    val containerAsVerticalFlow: VerticalFlow = js.native
    val containerAsWebLayoutContent: WebLayoutContent = js.native
    val containerAsWidgetValue: WidgetValue = js.native
    @JSName("model")
    var model_Widget: IModel = js.native
    var name: String = js.native
    /**
      * In version 8.0.0: deleted
      */
    var style: String = js.native
    var tabIndex: Double = js.native
  }
  
  /**
    * In version 7.6.0: introduced
    */
  @js.native
  class WidgetValidation protected () extends Element {
    def this(
      model: AbstractModel,
      structureTypeName: String,
      id: String,
      isPartial: Boolean,
      unit: ModelUnit,
      container: AbstractElement
    ) = this()
    val containerAsAttributeWidget: AttributeWidget = js.native
    val containerAsReferenceSelector: ReferenceSelector = js.native
    /**
      * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
      */
    var expression: String = js.native
    /**
      * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
      *
      * In version 7.9.0: introduced
      */
    var expressionModel: Expression = js.native
    var message: Text = js.native
    @JSName("model")
    var model_WidgetValidation: IModel = js.native
  }
  
  /* static members */
  @js.native
  object ActionButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ActionButton = js.native
    /**
      * Creates and returns a new ActionButton instance in the SDK and on the server.
      * The new ActionButton will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ActionButton = js.native
  }
  
  /* static members */
  @js.native
  object ActionItem extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object AggregateFunction extends js.Object {
    var Average: AggregateFunction = js.native
    var Count: AggregateFunction = js.native
    var Maximum: AggregateFunction = js.native
    var Minimum: AggregateFunction = js.native
    var None: AggregateFunction = js.native
    var Sum: AggregateFunction = js.native
  }
  
  /* static members */
  @js.native
  object AlignmentEnum extends js.Object {
    var Center: AlignmentEnum = js.native
    var Left: AlignmentEnum = js.native
    var Right: AlignmentEnum = js.native
  }
  
  /* static members */
  @js.native
  object Appearance extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent ControlBarButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInControlBarButtonUnderAppearance(container: ControlBarButton): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent GridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInGridColumnUnderAppearance(container: GridColumn): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInLayoutGridColumnUnderAppearance(container: LayoutGridColumn): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent LayoutGridRow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInLayoutGridRowUnderAppearance(container: LayoutGridRow): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInLayoutUnderAppearance(container: Layout): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNavigationListItemUnderAppearance(container: NavigationListItem): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent PageTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInPageTemplateUnderAppearance(container: PageTemplate): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent Page element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInPageUnderAppearance(container: Page): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInScrollContainerRegionUnderAppearance(container: ScrollContainerRegion): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInTableCellUnderAppearance(container: TableCell): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent TableRow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInTableRowUnderAppearance(container: TableRow): Appearance = js.native
    /**
      * Creates and returns a new Appearance instance in the SDK and on the server.
      * The new Appearance will be automatically stored in the 'appearance' property
      * of the parent Widget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWidgetUnderAppearance(container: Widget): Appearance = js.native
  }
  
  /* static members */
  @js.native
  object AssociationSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new AssociationSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): AssociationSource = js.native
    /**
      * Creates and returns a new AssociationSource instance in the SDK and on the server.
      * The new AssociationSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): AssociationSource = js.native
  }
  
  /* static members */
  @js.native
  object AssociationWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object AttributeWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object AttributeWidgetWithPlaceholder extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object BackButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.0.1
      */
    def createInDataViewUnderFooterWidget(container: DataView): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDataViewUnderWidget(container: DataView): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDivContainerUnderWidget(container: DivContainer): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInGroupBoxUnderWidget(container: GroupBox): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderLeftWidget(container: Header): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderRightWidget(container: Header): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutUnderWidget(container: Layout): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewUnderWidget(container: ListView): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSnippetUnderWidget(container: Snippet): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTabPageUnderWidget(container: TabPage): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTableCellUnderWidget(container: TableCell): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): BackButton = js.native
    /**
      * Creates and returns a new BackButton instance in the SDK and on the server.
      * The new BackButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): BackButton = js.native
  }
  
  /* static members */
  @js.native
  object BuildingBlock extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates a new BuildingBlock unit in the SDK and on the server.
      * Expects one argument, the projects.IFolderBase in which this unit is contained.
      */
    def createIn(container: IFolderBase): BuildingBlock = js.native
  }
  
  /* static members */
  @js.native
  object Button extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ButtonStyle extends js.Object {
    var Danger: ButtonStyle = js.native
    var Default: ButtonStyle = js.native
    var Info: ButtonStyle = js.native
    var Inverse: ButtonStyle = js.native
    var Primary: ButtonStyle = js.native
    var Success: ButtonStyle = js.native
    var Warning: ButtonStyle = js.native
  }
  
  /* static members */
  @js.native
  object CallNanoflowClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInListViewUnderClickAction(container: ListView): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CallNanoflowClientAction = js.native
    /**
      * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
      * The new CallNanoflowClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): CallNanoflowClientAction = js.native
  }
  
  /* static members */
  @js.native
  object CancelButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.0.1
      */
    def createInDataViewUnderFooterWidget(container: DataView): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDataViewUnderWidget(container: DataView): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDivContainerUnderWidget(container: DivContainer): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInGroupBoxUnderWidget(container: GroupBox): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderLeftWidget(container: Header): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderRightWidget(container: Header): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutUnderWidget(container: Layout): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewUnderWidget(container: ListView): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSnippetUnderWidget(container: Snippet): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTabPageUnderWidget(container: TabPage): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTableCellUnderWidget(container: TableCell): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CancelButton = js.native
    /**
      * Creates and returns a new CancelButton instance in the SDK and on the server.
      * The new CancelButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): CancelButton = js.native
  }
  
  /* static members */
  @js.native
  object CancelChangesClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInListViewUnderClickAction(container: ListView): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CancelChangesClientAction = js.native
    /**
      * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
      * The new CancelChangesClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): CancelChangesClientAction = js.native
  }
  
  /* static members */
  @js.native
  object CheckBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): CheckBox = js.native
    /**
      * Creates and returns a new CheckBox instance in the SDK and on the server.
      * The new CheckBox will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): CheckBox = js.native
  }
  
  /* static members */
  @js.native
  object ClickTypeType extends js.Object {
    var Double: ClickTypeType = js.native
    var Single: ClickTypeType = js.native
  }
  
  /* static members */
  @js.native
  object ClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ClientTemplate extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'caption' property
      * of the parent Button element passed as argument.
      */
    def createInButtonUnderCaption(container: Button): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'caption' property
      * of the parent ControlBarButton element passed as argument.
      */
    def createInControlBarButtonUnderCaption(container: ControlBarButton): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
      * of the parent customwidgets.CustomWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.1.0 and higher
      */
    def createInCustomWidgetUnderLabelTemplate(container: CustomWidget): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'caption' property
      * of the parent DataGrid element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInDataGridUnderCaption(container: DataGrid): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'content' property
      * of the parent DynamicText element passed as argument.
      */
    def createInDynamicTextUnderContent(container: DynamicText): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'caption' property
      * of the parent GroupBox element passed as argument.
      */
    def createInGroupBoxUnderCaption(container: GroupBox): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
      * of the parent InputWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInInputWidgetUnderLabelTemplate(container: InputWidget): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
      * of the parent customwidgets.WidgetObject element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 8.0.0
      */
    def createInWidgetObjectUnderLabelTemplate(container: WidgetObject): ClientTemplate = js.native
    /**
      * Creates and returns a new ClientTemplate instance in the SDK and on the server.
      * The new ClientTemplate will be automatically stored in the 'textTemplate' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 and higher
      */
    def createInWidgetValueUnderTextTemplate(container: WidgetValue): ClientTemplate = js.native
  }
  
  /* static members */
  @js.native
  object ClientTemplateParameter extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ClientTemplateParameter = js.native
    /**
      * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
      * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
      * of the parent ClientTemplate element passed as argument.
      */
    def createIn(container: ClientTemplate): ClientTemplateParameter = js.native
  }
  
  /* static members */
  @js.native
  object ClosePageClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInListViewUnderClickAction(container: ListView): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): ClosePageClientAction = js.native
    /**
      * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
      * The new ClosePageClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): ClosePageClientAction = js.native
  }
  
  /* static members */
  @js.native
  object ColumnGrid extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ComparisonSearchField extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ComparisonSearchField = js.native
    /**
      * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
      * The new ComparisonSearchField will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): ComparisonSearchField = js.native
  }
  
  /* static members */
  @js.native
  object ConditionalEditabilitySettings extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ConditionalEditabilitySettings = js.native
    /**
      * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
      * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
      * of the parent ConditionallyEditableWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 8.0.0
      */
    def createIn(container: ConditionallyEditableWidget): ConditionalEditabilitySettings = js.native
    /**
      * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
      * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
      * of the parent ConditionallyEditableWidget element passed as argument.
      */
    def createInConditionallyEditableWidgetUnderConditionalEditabilitySettings(container: ConditionallyEditableWidget): ConditionalEditabilitySettings = js.native
    /**
      * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
      * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
      * of the parent customwidgets.CustomWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.1.0 and higher
      */
    def createInCustomWidgetUnderConditionalEditabilitySettings(container: CustomWidget): ConditionalEditabilitySettings = js.native
  }
  
  /* static members */
  @js.native
  object ConditionalSettings extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ConditionalVisibilitySettings extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent ConditionallyVisibleWidget element passed as argument.
      */
    def createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings(container: ConditionallyVisibleWidget): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent ControlBarButton element passed as argument.
      */
    def createInControlBarButtonUnderConditionalVisibilitySettings(container: ControlBarButton): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent customwidgets.CustomWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.1.0 and higher
      */
    def createInCustomWidgetUnderConditionalVisibilitySettings(container: CustomWidget): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent LayoutGridRow element passed as argument.
      */
    def createInLayoutGridRowUnderConditionalVisibilitySettings(container: LayoutGridRow): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent NavigationListItem element passed as argument.
      */
    def createInNavigationListItemUnderConditionalVisibilitySettings(container: NavigationListItem): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent TabPage element passed as argument.
      */
    def createInTabPageUnderConditionalVisibilitySettings(container: TabPage): ConditionalVisibilitySettings = js.native
    /**
      * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
      * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
      * of the parent TableRow element passed as argument.
      */
    def createInTableRowUnderConditionalVisibilitySettings(container: TableRow): ConditionalVisibilitySettings = js.native
  }
  
  /* static members */
  @js.native
  object ConditionallyEditableWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ConditionallyVisibleWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ConfirmationInfo extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ConfirmationInfo = js.native
    /**
      * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
      * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
      * of the parent MicroflowSettings element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.7.0
      */
    def createIn(container: MicroflowSettings): ConfirmationInfo = js.native
    /**
      * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
      * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
      * of the parent CallNanoflowClientAction element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.8.0 and higher
      */
    def createInCallNanoflowClientActionUnderConfirmationInfo(container: CallNanoflowClientAction): ConfirmationInfo = js.native
    /**
      * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
      * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
      * of the parent MicroflowSettings element passed as argument.
      */
    def createInMicroflowSettingsUnderConfirmationInfo(container: MicroflowSettings): ConfirmationInfo = js.native
  }
  
  /* static members */
  @js.native
  object ContainerRenderMode extends js.Object {
    var Address: ContainerRenderMode = js.native
    var Article: ContainerRenderMode = js.native
    var Aside: ContainerRenderMode = js.native
    var Div: ContainerRenderMode = js.native
    var Footer: ContainerRenderMode = js.native
    var Header: ContainerRenderMode = js.native
    var Hgroup: ContainerRenderMode = js.native
    var Main: ContainerRenderMode = js.native
    var Nav: ContainerRenderMode = js.native
    var Section: ContainerRenderMode = js.native
  }
  
  /* static members */
  @js.native
  object ContainerWidth extends js.Object {
    var FixedWidth: ContainerWidth = js.native
    var FullWidth: ContainerWidth = js.native
  }
  
  /* static members */
  @js.native
  object ControlBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ControlBarButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ControlBarItem extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object CreateObjectClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInListViewUnderClickAction(container: ListView): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CreateObjectClientAction = js.native
    /**
      * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
      * The new CreateObjectClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): CreateObjectClientAction = js.native
  }
  
  /* static members */
  @js.native
  object DataGrid extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DataGrid = js.native
    /**
      * Creates and returns a new DataGrid instance in the SDK and on the server.
      * The new DataGrid will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DataGrid = js.native
  }
  
  /* static members */
  @js.native
  object DataGridAddButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataGridAddButton = js.native
    /**
      * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
      * The new DataGridAddButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): DataGridAddButton = js.native
  }
  
  /* static members */
  @js.native
  object DataGridExportToCSVButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataGridExportToCSVButton = js.native
    /**
      * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
      * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): DataGridExportToCSVButton = js.native
  }
  
  /* static members */
  @js.native
  object DataGridExportToExcelButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataGridExportToExcelButton = js.native
    /**
      * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
      * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): DataGridExportToExcelButton = js.native
  }
  
  /* static members */
  @js.native
  object DataGridRemoveButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataGridRemoveButton = js.native
    /**
      * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
      * The new DataGridRemoveButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): DataGridRemoveButton = js.native
  }
  
  /* static members */
  @js.native
  object DataSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object DataView extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DataView = js.native
    /**
      * Creates and returns a new DataView instance in the SDK and on the server.
      * The new DataView will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DataView = js.native
  }
  
  /* static members */
  @js.native
  object DataViewActionButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewActionButton = js.native
    /**
      * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
      * The new DataViewActionButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createIn(container: ControlBar): DataViewActionButton = js.native
  }
  
  /* static members */
  @js.native
  object DataViewCancelButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewCancelButton = js.native
    /**
      * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
      * The new DataViewCancelButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createIn(container: ControlBar): DataViewCancelButton = js.native
  }
  
  /* static members */
  @js.native
  object DataViewCloseButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewCloseButton = js.native
    /**
      * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
      * The new DataViewCloseButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createIn(container: ControlBar): DataViewCloseButton = js.native
  }
  
  /* static members */
  @js.native
  object DataViewControlBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewControlBar = js.native
    /**
      * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
      * The new DataViewControlBar will be automatically stored in the 'controlBar' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createIn(container: DataView): DataViewControlBar = js.native
  }
  
  /* static members */
  @js.native
  object DataViewControlBarButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object DataViewReadOnlyStyle extends js.Object {
    var Control: DataViewReadOnlyStyle = js.native
    var Text: DataViewReadOnlyStyle = js.native
  }
  
  /* static members */
  @js.native
  object DataViewSaveButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewSaveButton = js.native
    /**
      * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
      * The new DataViewSaveButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createIn(container: ControlBar): DataViewSaveButton = js.native
  }
  
  /* static members */
  @js.native
  object DataViewSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DataViewSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DataViewSource = js.native
    /**
      * Creates and returns a new DataViewSource instance in the SDK and on the server.
      * The new DataViewSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): DataViewSource = js.native
  }
  
  /* static members */
  @js.native
  object DatabaseConstraint extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DatabaseConstraint = js.native
    /**
      * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
      * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
      * of the parent DatabaseSourceBase element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.0.1
      */
    def createIn(container: DatabaseSourceBase): DatabaseConstraint = js.native
    /**
      * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
      * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
      * of the parent DatabaseSourceBase element passed as argument.
      */
    def createInDatabaseSourceBaseUnderDatabaseConstraints(container: DatabaseSourceBase): DatabaseConstraint = js.native
    /**
      * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
      * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
      * of the parent SelectorDatabaseSource element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.1.0 and higher
      */
    def createInSelectorDatabaseSourceUnderDatabaseConstraints(container: SelectorDatabaseSource): DatabaseConstraint = js.native
  }
  
  /* static members */
  @js.native
  object DatabaseConstraintOperator extends js.Object {
    var Contains: DatabaseConstraintOperator = js.native
    var Equals: DatabaseConstraintOperator = js.native
    var GreaterThan: DatabaseConstraintOperator = js.native
    var GreaterThanOrEquals: DatabaseConstraintOperator = js.native
    var LessThan: DatabaseConstraintOperator = js.native
    var LessThanOrEquals: DatabaseConstraintOperator = js.native
    var NotContains: DatabaseConstraintOperator = js.native
    var NotEquals: DatabaseConstraintOperator = js.native
  }
  
  /* static members */
  @js.native
  object DatabaseSourceBase extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object DateFormat extends js.Object {
    var Custom: DateFormat = js.native
    var Date: DateFormat = js.native
    var DateTime: DateFormat = js.native
    var Time: DateFormat = js.native
  }
  
  /* static members */
  @js.native
  object DatePicker extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DatePicker = js.native
    /**
      * Creates and returns a new DatePicker instance in the SDK and on the server.
      * The new DatePicker will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DatePicker = js.native
  }
  
  /* static members */
  @js.native
  object DeleteClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInListViewUnderClickAction(container: ListView): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): DeleteClientAction = js.native
    /**
      * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
      * The new DeleteClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): DeleteClientAction = js.native
  }
  
  /* static members */
  @js.native
  object DesignPropertyValue extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DesignPropertyValue = js.native
    /**
      * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
      * The new DesignPropertyValue will be automatically stored in the 'designProperties' property
      * of the parent Appearance element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createIn(container: Appearance): DesignPropertyValue = js.native
  }
  
  /* static members */
  @js.native
  object DesignPropertyValueType extends js.Object {
    var DropDown: DesignPropertyValueType = js.native
    var Toggle: DesignPropertyValueType = js.native
  }
  
  /* static members */
  @js.native
  object DivContainer extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DivContainer = js.native
    /**
      * Creates and returns a new DivContainer instance in the SDK and on the server.
      * The new DivContainer will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DivContainer = js.native
  }
  
  /* static members */
  @js.native
  object DropDown extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DropDown = js.native
    /**
      * Creates and returns a new DropDown instance in the SDK and on the server.
      * The new DropDown will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DropDown = js.native
  }
  
  /* static members */
  @js.native
  object DropDownButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DropDownButton = js.native
    /**
      * Creates and returns a new DropDownButton instance in the SDK and on the server.
      * The new DropDownButton will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DropDownButton = js.native
  }
  
  /* static members */
  @js.native
  object DropDownButtonItem extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DropDownButtonItem = js.native
    /**
      * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
      * The new DropDownButtonItem will be automatically stored in the 'items' property
      * of the parent DropDownButton element passed as argument.
      */
    def createIn(container: DropDownButton): DropDownButtonItem = js.native
  }
  
  /* static members */
  @js.native
  object DropDownSearchField extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DropDownSearchField = js.native
    /**
      * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
      * The new DropDownSearchField will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): DropDownSearchField = js.native
  }
  
  /* static members */
  @js.native
  object DynamicImageViewer extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DynamicImageViewer = js.native
    /**
      * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
      * The new DynamicImageViewer will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DynamicImageViewer = js.native
  }
  
  /* static members */
  @js.native
  object DynamicText extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DynamicText = js.native
    /**
      * Creates and returns a new DynamicText instance in the SDK and on the server.
      * The new DynamicText will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): DynamicText = js.native
  }
  
  /* static members */
  @js.native
  object EditableEnum extends js.Object {
    var Always: EditableEnum = js.native
    var Conditional: EditableEnum = js.native
    var Never: EditableEnum = js.native
  }
  
  /* static members */
  @js.native
  object EntityPathSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object EntityWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object EnumFormat extends js.Object {
    var Image: EnumFormat = js.native
    var Text: EnumFormat = js.native
  }
  
  /* static members */
  @js.native
  object FileManager extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): FileManager = js.native
    /**
      * Creates and returns a new FileManager instance in the SDK and on the server.
      * The new FileManager will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): FileManager = js.native
  }
  
  /* static members */
  @js.native
  object FileManagerType extends js.Object {
    var Both: FileManagerType = js.native
    var Download: FileManagerType = js.native
    var Upload: FileManagerType = js.native
  }
  
  /* static members */
  @js.native
  object FormBase extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object FormLocation extends js.Object {
    var Content: FormLocation = js.native
    var ModalPopup: FormLocation = js.native
    var Popup: FormLocation = js.native
  }
  
  /* static members */
  @js.native
  object FormValidations extends js.Object {
    var All: FormValidations = js.native
    var None: FormValidations = js.native
    var Widget: FormValidations = js.native
  }
  
  /* static members */
  @js.native
  object FormattingInfo extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent ClientTemplateParameter element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInClientTemplateParameterUnderFormattingInfo(container: ClientTemplateParameter): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent documenttemplates.DataGridColumn element passed as argument.
      */
    def createInDataGridColumnUnderFormattingInfo(container: DataGridColumn): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent DatePicker element passed as argument.
      */
    def createInDatePickerUnderFormattingInfo(container: DatePicker): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent documenttemplates.DynamicLabel element passed as argument.
      */
    def createInDynamicLabelUnderFormattingInfo(container: DynamicLabel): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent GridColumn element passed as argument.
      */
    def createInGridColumnUnderFormattingInfo(container: GridColumn): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent ReferenceSelector element passed as argument.
      */
    def createInReferenceSelectorUnderFormattingInfo(container: ReferenceSelector): FormattingInfo = js.native
    /**
      * Creates and returns a new FormattingInfo instance in the SDK and on the server.
      * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
      * of the parent TextBox element passed as argument.
      */
    def createInTextBoxUnderFormattingInfo(container: TextBox): FormattingInfo = js.native
  }
  
  /* static members */
  @js.native
  object GlyphIcon extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GlyphIcon = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * The new GlyphIcon will be automatically stored in the 'icon' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderIcon(container: BottomBarItem): GlyphIcon = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * The new GlyphIcon will be automatically stored in the 'icon' property
      * of the parent Button element passed as argument.
      */
    def createInButtonUnderIcon(container: Button): GlyphIcon = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * The new GlyphIcon will be automatically stored in the 'icon' property
      * of the parent ControlBarButton element passed as argument.
      */
    def createInControlBarButtonUnderIcon(container: ControlBarButton): GlyphIcon = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * The new GlyphIcon will be automatically stored in the 'icon' property
      * of the parent menus.MenuItem element passed as argument.
      */
    def createInMenuItemUnderIcon(container: MenuItem): GlyphIcon = js.native
    /**
      * Creates and returns a new GlyphIcon instance in the SDK and on the server.
      * The new GlyphIcon will be automatically stored in the 'icon' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWidgetValueUnderIcon(container: WidgetValue): GlyphIcon = js.native
  }
  
  /* static members */
  @js.native
  object Grid extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object GridActionButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridActionButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridActionButton = js.native
    /**
      * Creates and returns a new GridActionButton instance in the SDK and on the server.
      * The new GridActionButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): GridActionButton = js.native
  }
  
  /* static members */
  @js.native
  object GridBaseSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object GridColumn extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridColumn instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridColumn = js.native
    /**
      * Creates and returns a new GridColumn instance in the SDK and on the server.
      * The new GridColumn will be automatically stored in the 'columns' property
      * of the parent ColumnGrid element passed as argument.
      */
    def createIn(container: ColumnGrid): GridColumn = js.native
  }
  
  /* static members */
  @js.native
  object GridControlBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridControlBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridControlBar = js.native
    /**
      * Creates and returns a new GridControlBar instance in the SDK and on the server.
      * The new GridControlBar will be automatically stored in the 'controlBar' property
      * of the parent Grid element passed as argument.
      */
    def createIn(container: Grid): GridControlBar = js.native
  }
  
  /* static members */
  @js.native
  object GridControlBarButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object GridDatabaseSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridDatabaseSource = js.native
    /**
      * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
      * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): GridDatabaseSource = js.native
  }
  
  /* static members */
  @js.native
  object GridDeleteButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridDeleteButton = js.native
    /**
      * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
      * The new GridDeleteButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.16.0
      */
    def createIn(container: ControlBar): GridDeleteButton = js.native
  }
  
  /* static members */
  @js.native
  object GridDeselectAllButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridDeselectAllButton = js.native
    /**
      * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
      * The new GridDeselectAllButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): GridDeselectAllButton = js.native
  }
  
  /* static members */
  @js.native
  object GridEditButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridEditButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridEditButton = js.native
    /**
      * Creates and returns a new GridEditButton instance in the SDK and on the server.
      * The new GridEditButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.16.0
      */
    def createIn(container: ControlBar): GridEditButton = js.native
  }
  
  /* static members */
  @js.native
  object GridNewButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridNewButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridNewButton = js.native
    /**
      * Creates and returns a new GridNewButton instance in the SDK and on the server.
      * The new GridNewButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): GridNewButton = js.native
  }
  
  /* static members */
  @js.native
  object GridSearchButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridSearchButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridSearchButton = js.native
    /**
      * Creates and returns a new GridSearchButton instance in the SDK and on the server.
      * The new GridSearchButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createIn(container: ControlBar): GridSearchButton = js.native
    /**
      * Creates and returns a new GridSearchButton instance in the SDK and on the server.
      * The new GridSearchButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createInControlBarUnderItems(container: ControlBar): GridSearchButton = js.native
    /**
      * Creates and returns a new GridSearchButton instance in the SDK and on the server.
      * The new GridSearchButton will be automatically stored in the 'searchButton' property
      * of the parent GridControlBar element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInGridControlBarUnderSearchButton(container: GridControlBar): GridSearchButton = js.native
  }
  
  /* static members */
  @js.native
  object GridSelectAllButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridSelectAllButton = js.native
    /**
      * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
      * The new GridSelectAllButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): GridSelectAllButton = js.native
  }
  
  /* static members */
  @js.native
  object GridSelectionMode extends js.Object {
    var Multi: GridSelectionMode = js.native
    var None: GridSelectionMode = js.native
    var SimpleMulti: GridSelectionMode = js.native
    var Single: GridSelectionMode = js.native
    var SingleAndMaintain: GridSelectionMode = js.native
  }
  
  /* static members */
  @js.native
  object GridSortBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridSortBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridSortBar = js.native
    /**
      * Creates and returns a new GridSortBar instance in the SDK and on the server.
      * The new GridSortBar will be automatically stored in the 'sortBar' property
      * of the parent DropDownSearchField element passed as argument.
      */
    def createInDropDownSearchFieldUnderSortBar(container: DropDownSearchField): GridSortBar = js.native
    /**
      * Creates and returns a new GridSortBar instance in the SDK and on the server.
      * The new GridSortBar will be automatically stored in the 'sortBar' property
      * of the parent SelectorDatabaseSource element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.2.0 and higher
      */
    def createInSelectorDatabaseSourceUnderSortBar(container: SelectorDatabaseSource): GridSortBar = js.native
    /**
      * Creates and returns a new GridSortBar instance in the SDK and on the server.
      * The new GridSortBar will be automatically stored in the 'sortBar' property
      * of the parent SelectorXPathSource element passed as argument.
      */
    def createInSelectorXPathSourceUnderSortBar(container: SelectorXPathSource): GridSortBar = js.native
    /**
      * Creates and returns a new GridSortBar instance in the SDK and on the server.
      * The new GridSortBar will be automatically stored in the 'sortBar' property
      * of the parent SortableEntityPathSource element passed as argument.
      */
    def createInSortableEntityPathSourceUnderSortBar(container: SortableEntityPathSource): GridSortBar = js.native
  }
  
  /* static members */
  @js.native
  object GridSortItem extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridSortItem instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridSortItem = js.native
    /**
      * Creates and returns a new GridSortItem instance in the SDK and on the server.
      * The new GridSortItem will be automatically stored in the 'sortItems' property
      * of the parent GridSortBar element passed as argument.
      */
    def createIn(container: GridSortBar): GridSortItem = js.native
  }
  
  /* static members */
  @js.native
  object GridXPathSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GridXPathSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GridXPathSource = js.native
    /**
      * Creates and returns a new GridXPathSource instance in the SDK and on the server.
      * The new GridXPathSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): GridXPathSource = js.native
  }
  
  /* static members */
  @js.native
  object GroupBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): GroupBox = js.native
    /**
      * Creates and returns a new GroupBox instance in the SDK and on the server.
      * The new GroupBox will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): GroupBox = js.native
  }
  
  /* static members */
  @js.native
  object GroupBoxCollapsible extends js.Object {
    var No: GroupBoxCollapsible = js.native
    var YesInitiallyCollapsed: GroupBoxCollapsible = js.native
    var YesInitiallyExpanded: GroupBoxCollapsible = js.native
  }
  
  /* static members */
  @js.native
  object Header extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Header = js.native
    /**
      * Creates and returns a new Header instance in the SDK and on the server.
      * The new Header will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): Header = js.native
  }
  
  /* static members */
  @js.native
  object HorizontalSplitPane extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDataViewUnderFooterWidgets(container: DataView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDataViewUnderWidgets(container: DataView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDivContainerUnderWidgets(container: DivContainer): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInHeaderUnderLeftWidgets(container: Header): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInHeaderUnderRightWidgets(container: Header): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInListViewUnderWidgets(container: ListView): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSnippetUnderWidgets(container: Snippet): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTabPageUnderWidgets(container: TabPage): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTableCellUnderWidgets(container: TableCell): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): HorizontalSplitPane = js.native
    /**
      * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
      * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): HorizontalSplitPane = js.native
  }
  
  /* static members */
  @js.native
  object Icon extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object ImageIcon extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ImageIcon = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * The new ImageIcon will be automatically stored in the 'icon' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderIcon(container: BottomBarItem): ImageIcon = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * The new ImageIcon will be automatically stored in the 'icon' property
      * of the parent Button element passed as argument.
      */
    def createInButtonUnderIcon(container: Button): ImageIcon = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * The new ImageIcon will be automatically stored in the 'icon' property
      * of the parent ControlBarButton element passed as argument.
      */
    def createInControlBarButtonUnderIcon(container: ControlBarButton): ImageIcon = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * The new ImageIcon will be automatically stored in the 'icon' property
      * of the parent menus.MenuItem element passed as argument.
      */
    def createInMenuItemUnderIcon(container: MenuItem): ImageIcon = js.native
    /**
      * Creates and returns a new ImageIcon instance in the SDK and on the server.
      * The new ImageIcon will be automatically stored in the 'icon' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWidgetValueUnderIcon(container: WidgetValue): ImageIcon = js.native
  }
  
  /* static members */
  @js.native
  object ImageSizeUnit extends js.Object {
    var Auto: ImageSizeUnit = js.native
    var Percentage: ImageSizeUnit = js.native
    var Pixels: ImageSizeUnit = js.native
  }
  
  /* static members */
  @js.native
  object ImageUploader extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ImageUploader = js.native
    /**
      * Creates and returns a new ImageUploader instance in the SDK and on the server.
      * The new ImageUploader will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ImageUploader = js.native
  }
  
  /* static members */
  @js.native
  object ImageViewerSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ImageViewerSource = js.native
    /**
      * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
      * The new ImageViewerSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): ImageViewerSource = js.native
  }
  
  /* static members */
  @js.native
  object InputReferenceSetSelector extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): InputReferenceSetSelector = js.native
    /**
      * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
      * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): InputReferenceSetSelector = js.native
  }
  
  /* static members */
  @js.native
  object InputWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object KeyboardType extends js.Object {
    var DecimalPad: KeyboardType = js.native
    var Default: KeyboardType = js.native
    var EmailAddress: KeyboardType = js.native
    var NumberPad: KeyboardType = js.native
    var PhonePad: KeyboardType = js.native
    var URL: KeyboardType = js.native
  }
  
  /* static members */
  @js.native
  object Label extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Label = js.native
    /**
      * Creates and returns a new Label instance in the SDK and on the server.
      * The new Label will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): Label = js.native
  }
  
  /* static members */
  @js.native
  object LabelPosition extends js.Object {
    var AfterControl: LabelPosition = js.native
    var BeforeControl: LabelPosition = js.native
    var Default: LabelPosition = js.native
  }
  
  /* static members */
  @js.native
  object Layout extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates a new Layout unit in the SDK and on the server.
      * Expects one argument, the projects.IFolderBase in which this unit is contained.
      */
    def createIn(container: IFolderBase): Layout = js.native
  }
  
  /* static members */
  @js.native
  object LayoutCall extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LayoutCall instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LayoutCall = js.native
    /**
      * Creates and returns a new LayoutCall instance in the SDK and on the server.
      * The new LayoutCall will be automatically stored in the 'layoutCall' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.23.0
      */
    def createInLayoutUnderLayoutCall(container: Layout): LayoutCall = js.native
    /**
      * Creates and returns a new LayoutCall instance in the SDK and on the server.
      * The new LayoutCall will be automatically stored in the 'layoutCall' property
      * of the parent PageTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 and higher
      */
    def createInPageTemplateUnderLayoutCall(container: PageTemplate): LayoutCall = js.native
    /**
      * Creates and returns a new LayoutCall instance in the SDK and on the server.
      * The new LayoutCall will be automatically stored in the 'layoutCall' property
      * of the parent Page element passed as argument.
      */
    def createInPageUnderLayoutCall(container: Page): LayoutCall = js.native
    /**
      * Creates and returns a new LayoutCall instance in the SDK and on the server.
      * The new LayoutCall will be automatically stored in the 'layoutCall' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderLayoutCall(container: WebLayoutContent): LayoutCall = js.native
  }
  
  /* static members */
  @js.native
  object LayoutCallArgument extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LayoutCallArgument = js.native
    /**
      * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
      * The new LayoutCallArgument will be automatically stored in the 'arguments' property
      * of the parent LayoutCall element passed as argument.
      */
    def createIn(container: LayoutCall): LayoutCallArgument = js.native
  }
  
  /* static members */
  @js.native
  object LayoutContent extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object LayoutGrid extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LayoutGrid = js.native
    /**
      * Creates and returns a new LayoutGrid instance in the SDK and on the server.
      * The new LayoutGrid will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): LayoutGrid = js.native
  }
  
  /* static members */
  @js.native
  object LayoutGridColumn extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LayoutGridColumn = js.native
    /**
      * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
      * The new LayoutGridColumn will be automatically stored in the 'columns' property
      * of the parent LayoutGridRow element passed as argument.
      */
    def createIn(container: LayoutGridRow): LayoutGridColumn = js.native
  }
  
  /* static members */
  @js.native
  object LayoutGridRow extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LayoutGridRow = js.native
    /**
      * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
      * The new LayoutGridRow will be automatically stored in the 'rows' property
      * of the parent LayoutGrid element passed as argument.
      */
    def createIn(container: LayoutGrid): LayoutGridRow = js.native
  }
  
  /* static members */
  @js.native
  object LayoutModeType extends js.Object {
    var Headline: LayoutModeType = js.native
    var Sidebar: LayoutModeType = js.native
  }
  
  /* static members */
  @js.native
  object LayoutParameter extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object LayoutType extends js.Object {
    var Legacy: LayoutType = js.native
    var ModalPopup: LayoutType = js.native
    var Phone: LayoutType = js.native
    var Popup: LayoutType = js.native
    var Responsive: LayoutType = js.native
    var Tablet: LayoutType = js.native
  }
  
  /* static members */
  @js.native
  object LinkButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.2.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInDataViewUnderWidget(container: DataView): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInHeaderUnderLeftWidget(container: Header): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInHeaderUnderRightWidget(container: Header): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInLayoutUnderWidget(container: Layout): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInListViewUnderWidget(container: ListView): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.2.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInSnippetUnderWidget(container: Snippet): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInTabPageUnderWidget(container: TabPage): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInTableCellUnderWidget(container: TableCell): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LinkButton = js.native
    /**
      * Creates and returns a new LinkButton instance in the SDK and on the server.
      * The new LinkButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): LinkButton = js.native
  }
  
  /* static members */
  @js.native
  object LinkType extends js.Object {
    var Call: LinkType = js.native
    var Email: LinkType = js.native
    var Text: LinkType = js.native
    var Web: LinkType = js.native
  }
  
  /* static members */
  @js.native
  object ListView extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ListView = js.native
    /**
      * Creates and returns a new ListView instance in the SDK and on the server.
      * The new ListView will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ListView = js.native
  }
  
  /* static members */
  @js.native
  object ListViewDatabaseSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListViewDatabaseSource = js.native
    /**
      * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
      * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): ListViewDatabaseSource = js.native
  }
  
  /* static members */
  @js.native
  object ListViewSearch extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListViewSearch instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListViewSearch = js.native
    /**
      * Creates and returns a new ListViewSearch instance in the SDK and on the server.
      * The new ListViewSearch will be automatically stored in the 'search' property
      * of the parent ListViewDatabaseSource element passed as argument.
      */
    def createInListViewDatabaseSourceUnderSearch(container: ListViewDatabaseSource): ListViewSearch = js.native
    /**
      * Creates and returns a new ListViewSearch instance in the SDK and on the server.
      * The new ListViewSearch will be automatically stored in the 'search' property
      * of the parent ListViewXPathSource element passed as argument.
      */
    def createInListViewXPathSourceUnderSearch(container: ListViewXPathSource): ListViewSearch = js.native
  }
  
  /* static members */
  @js.native
  object ListViewTemplate extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListViewTemplate = js.native
    /**
      * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
      * The new ListViewTemplate will be automatically stored in the 'templates' property
      * of the parent ListView element passed as argument.
      */
    def createIn(container: ListView): ListViewTemplate = js.native
  }
  
  /* static members */
  @js.native
  object ListViewXPathSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListViewXPathSource = js.native
    /**
      * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
      * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): ListViewXPathSource = js.native
  }
  
  /* static members */
  @js.native
  object ListenTargetSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ListenTargetSource = js.native
    /**
      * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
      * The new ListenTargetSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): ListenTargetSource = js.native
  }
  
  /* static members */
  @js.native
  object ListenTargetWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object LoginButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LoginButton = js.native
    /**
      * Creates and returns a new LoginButton instance in the SDK and on the server.
      * The new LoginButton will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): LoginButton = js.native
  }
  
  /* static members */
  @js.native
  object LoginIdTextBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LoginIdTextBox = js.native
    /**
      * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
      * The new LoginIdTextBox will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): LoginIdTextBox = js.native
  }
  
  /* static members */
  @js.native
  object LoginTextBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object LogoutButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.0.2
      */
    def createInDataViewUnderFooterWidget(container: DataView): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInDataViewUnderWidget(container: DataView): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInDivContainerUnderWidget(container: DivContainer): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInGroupBoxUnderWidget(container: GroupBox): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInHeaderUnderLeftWidget(container: Header): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInHeaderUnderRightWidget(container: Header): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInLayoutUnderWidget(container: Layout): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInListViewUnderWidget(container: ListView): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInSnippetUnderWidget(container: Snippet): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInTabPageUnderWidget(container: TabPage): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInTableCellUnderWidget(container: TableCell): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LogoutButton = js.native
    /**
      * Creates and returns a new LogoutButton instance in the SDK and on the server.
      * The new LogoutButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.2
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): LogoutButton = js.native
  }
  
  /* static members */
  @js.native
  object MasterDetail extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MasterDetail = js.native
    /**
      * Creates and returns a new MasterDetail instance in the SDK and on the server.
      * The new MasterDetail will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): MasterDetail = js.native
  }
  
  /* static members */
  @js.native
  object MasterDetailDetailRegion extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MasterDetailDetailRegion = js.native
    /**
      * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
      * The new MasterDetailDetailRegion will be automatically stored in the 'detail' property
      * of the parent MasterDetail element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createIn(container: MasterDetail): MasterDetailDetailRegion = js.native
  }
  
  /* static members */
  @js.native
  object MasterDetailMasterRegion extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MasterDetailMasterRegion = js.native
    /**
      * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
      * The new MasterDetailMasterRegion will be automatically stored in the 'master' property
      * of the parent MasterDetail element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createIn(container: MasterDetail): MasterDetailMasterRegion = js.native
  }
  
  /* static members */
  @js.native
  object MasterDetailRegion extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object MemberWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object MenuBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): MenuBar = js.native
    /**
      * Creates and returns a new MenuBar instance in the SDK and on the server.
      * The new MenuBar will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): MenuBar = js.native
  }
  
  /* static members */
  @js.native
  object MenuDocumentSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MenuDocumentSource = js.native
    /**
      * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
      * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
      * of the parent MenuWidget element passed as argument.
      */
    def createIn(container: MenuWidget): MenuDocumentSource = js.native
  }
  
  /* static members */
  @js.native
  object MenuSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object MenuWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object MicroflowClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      */
    def createInActionButtonUnderAction(container: ActionButton): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      */
    def createInActionItemUnderAction(container: ActionItem): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent DataViewActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createInDataViewActionButtonUnderAction(container: DataViewActionButton): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      */
    def createInListViewUnderClickAction(container: ListView): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      */
    def createInMenuItemUnderAction(container: MenuItem): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): MicroflowClientAction = js.native
    /**
      * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
      * The new MicroflowClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): MicroflowClientAction = js.native
  }
  
  /* static members */
  @js.native
  object MicroflowParameterMapping extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MicroflowParameterMapping instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MicroflowParameterMapping = js.native
    /**
      * Creates and returns a new MicroflowParameterMapping instance in the SDK and on the server.
      * The new MicroflowParameterMapping will be automatically stored in the 'parameterMappings' property
      * of the parent MicroflowSettings element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createIn(container: MicroflowSettings): MicroflowParameterMapping = js.native
  }
  
  /* static members */
  @js.native
  object MicroflowSettings extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInAssociationWidgetUnderOnChangeMicroflowSettings(container: AssociationWidget): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInAttributeWidgetUnderOnChangeMicroflowSettings(container: AttributeWidget): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInAttributeWidgetUnderOnEnterMicroflowSettings(container: AttributeWidget): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInAttributeWidgetUnderOnLeaveMicroflowSettings(container: AttributeWidget): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
      * of the parent MicroflowClientAction element passed as argument.
      */
    def createInMicroflowClientActionUnderMicroflowSettings(container: MicroflowClientAction): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
      * of the parent MicroflowSource element passed as argument.
      */
    def createInMicroflowSourceUnderMicroflowSettings(container: MicroflowSource): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
      * of the parent OnClickMicroflow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.17.0
      */
    def createInOnClickMicroflowUnderMicroflowSettings(container: OnClickMicroflow): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.12.0
      */
    def createInReferenceSetSelectorUnderOnChangeMicroflowSettings(container: ReferenceSetSelector): MicroflowSettings = js.native
    /**
      * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
      * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
      * of the parent SelectorMicroflowSource element passed as argument.
      */
    def createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings(container: SelectorMicroflowSource): MicroflowSettings = js.native
  }
  
  /* static members */
  @js.native
  object MicroflowSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new MicroflowSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): MicroflowSource = js.native
    /**
      * Creates and returns a new MicroflowSource instance in the SDK and on the server.
      * The new MicroflowSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): MicroflowSource = js.native
  }
  
  /* static members */
  @js.native
  object MobileFooterType extends js.Object {
    var Custom: MobileFooterType = js.native
    var MenuBar: MobileFooterType = js.native
    var None: MobileFooterType = js.native
  }
  
  /* static members */
  @js.native
  object NanoflowParameterMapping extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NanoflowParameterMapping = js.native
    /**
      * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
      * The new NanoflowParameterMapping will be automatically stored in the 'parameterMappings' property
      * of the parent CallNanoflowClientAction element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInCallNanoflowClientActionUnderParameterMappings(container: CallNanoflowClientAction): NanoflowParameterMapping = js.native
    /**
      * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
      * The new NanoflowParameterMapping will be automatically stored in the 'parameterMappings' property
      * of the parent NanoflowSource element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInNanoflowSourceUnderParameterMappings(container: NanoflowSource): NanoflowParameterMapping = js.native
  }
  
  /* static members */
  @js.native
  object NanoflowSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NanoflowSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NanoflowSource = js.native
    /**
      * Creates and returns a new NanoflowSource instance in the SDK and on the server.
      * The new NanoflowSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.12.0 and higher
      */
    def createIn(container: EntityWidget): NanoflowSource = js.native
  }
  
  /* static members */
  @js.native
  object NativeLayoutContent extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NativeLayoutContent instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NativeLayoutContent = js.native
    /**
      * Creates and returns a new NativeLayoutContent instance in the SDK and on the server.
      * The new NativeLayoutContent will be automatically stored in the 'content' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createIn(container: Layout): NativeLayoutContent = js.native
  }
  
  /* static members */
  @js.native
  object NativeTextStyle extends js.Object {
    var Heading1: NativeTextStyle = js.native
    var Heading2: NativeTextStyle = js.native
    var Heading3: NativeTextStyle = js.native
    var Heading4: NativeTextStyle = js.native
    var Heading5: NativeTextStyle = js.native
    var Heading6: NativeTextStyle = js.native
    var Text: NativeTextStyle = js.native
  }
  
  /* static members */
  @js.native
  object NavigationList extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): NavigationList = js.native
    /**
      * Creates and returns a new NavigationList instance in the SDK and on the server.
      * The new NavigationList will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): NavigationList = js.native
  }
  
  /* static members */
  @js.native
  object NavigationListItem extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NavigationListItem instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NavigationListItem = js.native
    /**
      * Creates and returns a new NavigationListItem instance in the SDK and on the server.
      * The new NavigationListItem will be automatically stored in the 'items' property
      * of the parent NavigationList element passed as argument.
      */
    def createIn(container: NavigationList): NavigationListItem = js.native
  }
  
  /* static members */
  @js.native
  object NavigationSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NavigationSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NavigationSource = js.native
    /**
      * Creates and returns a new NavigationSource instance in the SDK and on the server.
      * The new NavigationSource will be automatically stored in the 'menuSource' property
      * of the parent MenuWidget element passed as argument.
      */
    def createIn(container: MenuWidget): NavigationSource = js.native
  }
  
  /* static members */
  @js.native
  object NavigationTree extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): NavigationTree = js.native
    /**
      * Creates and returns a new NavigationTree instance in the SDK and on the server.
      * The new NavigationTree will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): NavigationTree = js.native
  }
  
  /* static members */
  @js.native
  object NewButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInDataViewUnderFooterWidgets(container: DataView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInDataViewUnderWidgets(container: DataView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInDivContainerUnderWidgets(container: DivContainer): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInHeaderUnderLeftWidgets(container: Header): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInHeaderUnderRightWidgets(container: Header): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInLayoutUnderWidgets(container: Layout): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInListViewUnderWidgets(container: ListView): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInSnippetUnderWidgets(container: Snippet): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInTabPageUnderWidgets(container: TabPage): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInTableCellUnderWidgets(container: TableCell): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.16.0
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NewButton = js.native
    /**
      * Creates and returns a new NewButton instance in the SDK and on the server.
      * The new NewButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): NewButton = js.native
  }
  
  /* static members */
  @js.native
  object NewButtonEditLocation extends js.Object {
    var Form: NewButtonEditLocation = js.native
    var InlineAtBottom: NewButtonEditLocation = js.native
    var InlineAtTop: NewButtonEditLocation = js.native
  }
  
  /* static members */
  @js.native
  object NoClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      */
    def createInActionButtonUnderAction(container: ActionButton): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      */
    def createInActionItemUnderAction(container: ActionItem): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent DataViewActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createInDataViewActionButtonUnderAction(container: DataViewActionButton): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      */
    def createInListViewUnderClickAction(container: ListView): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      */
    def createInMenuItemUnderAction(container: MenuItem): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): NoClientAction = js.native
    /**
      * Creates and returns a new NoClientAction instance in the SDK and on the server.
      * The new NoClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): NoClientAction = js.native
  }
  
  /* static members */
  @js.native
  object OfflineSchema extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OfflineSchema instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OfflineSchema = js.native
  }
  
  /* static members */
  @js.native
  object OfflineSchemaFetchInstruction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OfflineSchemaFetchInstruction = js.native
  }
  
  /* static members */
  @js.native
  object OnClickBehavior extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object OnClickEnlarge extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OnClickEnlarge = js.native
    /**
      * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
      * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.17.0
      */
    def createIn(container: DynamicImageViewer): OnClickEnlarge = js.native
  }
  
  /* static members */
  @js.native
  object OnClickMicroflow extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OnClickMicroflow = js.native
    /**
      * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
      * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.17.0
      */
    def createIn(container: DynamicImageViewer): OnClickMicroflow = js.native
  }
  
  /* static members */
  @js.native
  object OnClickNothing extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OnClickNothing instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OnClickNothing = js.native
    /**
      * Creates and returns a new OnClickNothing instance in the SDK and on the server.
      * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.17.0
      */
    def createIn(container: DynamicImageViewer): OnClickNothing = js.native
  }
  
  /* static members */
  @js.native
  object OpenLinkClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInListViewUnderClickAction(container: ListView): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): OpenLinkClientAction = js.native
    /**
      * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
      * The new OpenLinkClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): OpenLinkClientAction = js.native
  }
  
  /* static members */
  @js.native
  object Page extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates a new Page unit in the SDK and on the server.
      * Expects one argument, the projects.IFolderBase in which this unit is contained.
      */
    def createIn(container: IFolderBase): Page = js.native
  }
  
  /* static members */
  @js.native
  object PageClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      */
    def createInActionButtonUnderAction(container: ActionButton): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      */
    def createInActionItemUnderAction(container: ActionItem): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent DataViewActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.6.0
      */
    def createInDataViewActionButtonUnderAction(container: DataViewActionButton): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      */
    def createInListViewUnderClickAction(container: ListView): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      */
    def createInMenuItemUnderAction(container: MenuItem): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): PageClientAction = js.native
    /**
      * Creates and returns a new PageClientAction instance in the SDK and on the server.
      * The new PageClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): PageClientAction = js.native
  }
  
  /* static members */
  @js.native
  object PageForSpecialization extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): PageForSpecialization = js.native
    /**
      * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
      * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
      * of the parent GridEditButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.16.0
      */
    def createInGridEditButtonUnderPagesForSpecializations(container: GridEditButton): PageForSpecialization = js.native
    /**
      * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
      * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
      * of the parent PageClientAction element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInPageClientActionUnderPagesForSpecializations(container: PageClientAction): PageForSpecialization = js.native
  }
  
  /* static members */
  @js.native
  object PageSettings extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'selectPageSettings' property
      * of the parent AssociationWidget element passed as argument.
      */
    def createInAssociationWidgetUnderSelectPageSettings(container: AssociationWidget): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent CreateObjectClientAction element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.17.0 and higher
      */
    def createInCreateObjectClientActionUnderPageSettings(container: CreateObjectClientAction): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent DataGridAddButton element passed as argument.
      */
    def createInDataGridAddButtonUnderPageSettings(container: DataGridAddButton): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent GridEditButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.16.0
      */
    def createInGridEditButtonUnderPageSettings(container: GridEditButton): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent GridNewButton element passed as argument.
      */
    def createInGridNewButtonUnderPageSettings(container: GridNewButton): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'loginPageSettings' property
      * of the parent navigation.NavigationProfile element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInNavigationProfileUnderLoginPageSettings(container: NavigationProfile): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent NewButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.16.0
      */
    def createInNewButtonUnderPageSettings(container: NewButton): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent PageClientAction element passed as argument.
      */
    def createInPageClientActionUnderPageSettings(container: PageClientAction): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent PageForSpecialization element passed as argument.
      */
    def createInPageForSpecializationUnderPageSettings(container: PageForSpecialization): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
      * of the parent ReferenceSelector element passed as argument.
      */
    def createInReferenceSelectorUnderGotoPageSettings(container: ReferenceSelector): PageSettings = js.native
    /**
      * Creates and returns a new PageSettings instance in the SDK and on the server.
      * The new PageSettings will be automatically stored in the 'pageSettings' property
      * of the parent microflows.ShowPageAction element passed as argument.
      */
    def createInShowPageActionUnderPageSettings(container: ShowPageAction): PageSettings = js.native
  }
  
  /* static members */
  @js.native
  object PageTemplate extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates a new PageTemplate unit in the SDK and on the server.
      * Expects one argument, the projects.IFolderBase in which this unit is contained.
      */
    def createIn(container: IFolderBase): PageTemplate = js.native
  }
  
  /* static members */
  @js.native
  object PageTemplateType extends js.Object {
    var Edit: PageTemplateType = js.native
    var Select: PageTemplateType = js.native
    var Standard: PageTemplateType = js.native
  }
  
  /* static members */
  @js.native
  object PasswordTextBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): PasswordTextBox = js.native
    /**
      * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
      * The new PasswordTextBox will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): PasswordTextBox = js.native
  }
  
  /* static members */
  @js.native
  object Placeholder extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'rightHeaderPlaceholder' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderRightHeaderPlaceholder(container: NativeLayoutContent): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Placeholder = js.native
    /**
      * Creates and returns a new Placeholder instance in the SDK and on the server.
      * The new Placeholder will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): Placeholder = js.native
  }
  
  /* static members */
  @js.native
  object ProgressBarType extends js.Object {
    var Blocking: ProgressBarType = js.native
    var NonBlocking: ProgressBarType = js.native
    var None: ProgressBarType = js.native
  }
  
  /* static members */
  @js.native
  object RadioButtonGroup extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): RadioButtonGroup = js.native
    /**
      * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
      * The new RadioButtonGroup will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): RadioButtonGroup = js.native
  }
  
  /* static members */
  @js.native
  object RangeSearchField extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new RangeSearchField instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): RangeSearchField = js.native
    /**
      * Creates and returns a new RangeSearchField instance in the SDK and on the server.
      * The new RangeSearchField will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): RangeSearchField = js.native
  }
  
  /* static members */
  @js.native
  object ReadOnlyStyle extends js.Object {
    var Control: ReadOnlyStyle = js.native
    var Inherit: ReadOnlyStyle = js.native
    var Text: ReadOnlyStyle = js.native
  }
  
  /* static members */
  @js.native
  object ReferenceSelector extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ReferenceSelector = js.native
    /**
      * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
      * The new ReferenceSelector will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ReferenceSelector = js.native
  }
  
  /* static members */
  @js.native
  object ReferenceSelectorRenderModeType extends js.Object {
    var DropDown: ReferenceSelectorRenderModeType = js.native
    var Form: ReferenceSelectorRenderModeType = js.native
  }
  
  /* static members */
  @js.native
  object ReferenceSetSelector extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ReferenceSetSelector = js.native
    /**
      * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
      * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ReferenceSetSelector = js.native
  }
  
  /* static members */
  @js.native
  object ReferenceSetSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ReferenceSetSource = js.native
    /**
      * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
      * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
      * of the parent EntityWidget element passed as argument.
      */
    def createIn(container: EntityWidget): ReferenceSetSource = js.native
  }
  
  /* static members */
  @js.native
  object RenderType extends js.Object {
    var Button: RenderType = js.native
    var Link: RenderType = js.native
  }
  
  /* static members */
  @js.native
  object RetrievalQuery extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new RetrievalQuery instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): RetrievalQuery = js.native
  }
  
  /* static members */
  @js.native
  object RetrievalSchema extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): RetrievalSchema = js.native
  }
  
  /* static members */
  @js.native
  object SaveButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.0.1
      */
    def createInDataViewUnderFooterWidget(container: DataView): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDataViewUnderWidget(container: DataView): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDivContainerUnderWidget(container: DivContainer): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInGroupBoxUnderWidget(container: GroupBox): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderLeftWidget(container: Header): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderRightWidget(container: Header): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutUnderWidget(container: Layout): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewUnderWidget(container: ListView): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSnippetUnderWidget(container: Snippet): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTabPageUnderWidget(container: TabPage): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTableCellUnderWidget(container: TableCell): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SaveButton = js.native
    /**
      * Creates and returns a new SaveButton instance in the SDK and on the server.
      * The new SaveButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): SaveButton = js.native
  }
  
  /* static members */
  @js.native
  object SaveChangesClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInListViewUnderClickAction(container: ListView): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SaveChangesClientAction = js.native
    /**
      * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
      * The new SaveChangesClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): SaveChangesClientAction = js.native
  }
  
  /* static members */
  @js.native
  object ScrollBehavior extends js.Object {
    var FullWidget: ScrollBehavior = js.native
    var PerRegion: ScrollBehavior = js.native
  }
  
  /* static members */
  @js.native
  object ScrollContainer extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ScrollContainer = js.native
    /**
      * Creates and returns a new ScrollContainer instance in the SDK and on the server.
      * The new ScrollContainer will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ScrollContainer = js.native
  }
  
  /* static members */
  @js.native
  object ScrollContainerRegion extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ScrollContainerRegion = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
      * of the parent ScrollContainer element passed as argument.
      */
    def createInScrollContainerUnderBottom(container: ScrollContainer): ScrollContainerRegion = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * The new ScrollContainerRegion will be automatically stored in the 'center' property
      * of the parent ScrollContainer element passed as argument.
      */
    def createInScrollContainerUnderCenter(container: ScrollContainer): ScrollContainerRegion = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * The new ScrollContainerRegion will be automatically stored in the 'left' property
      * of the parent ScrollContainer element passed as argument.
      */
    def createInScrollContainerUnderLeft(container: ScrollContainer): ScrollContainerRegion = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * The new ScrollContainerRegion will be automatically stored in the 'right' property
      * of the parent ScrollContainer element passed as argument.
      */
    def createInScrollContainerUnderRight(container: ScrollContainer): ScrollContainerRegion = js.native
    /**
      * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
      * The new ScrollContainerRegion will be automatically stored in the 'top' property
      * of the parent ScrollContainer element passed as argument.
      */
    def createInScrollContainerUnderTop(container: ScrollContainer): ScrollContainerRegion = js.native
  }
  
  /* static members */
  @js.native
  object ScrollDirection extends js.Object {
    var Horizontal: ScrollDirection = js.native
    var Vertical: ScrollDirection = js.native
  }
  
  /* static members */
  @js.native
  object SearchBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SearchBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SearchBar = js.native
    /**
      * Creates and returns a new SearchBar instance in the SDK and on the server.
      * The new SearchBar will be automatically stored in the 'searchBar' property
      * of the parent GridBaseSource element passed as argument.
      */
    def createInGridBaseSourceUnderSearchBar(container: GridBaseSource): SearchBar = js.native
    /**
      * Creates and returns a new SearchBar instance in the SDK and on the server.
      * The new SearchBar will be automatically stored in the 'searchBar' property
      * of the parent GridDatabaseSource element passed as argument.
      */
    def createInGridDatabaseSourceUnderSearchBar(container: GridDatabaseSource): SearchBar = js.native
  }
  
  /* static members */
  @js.native
  object SearchBarTypeEnum extends js.Object {
    var AlwaysOpen: SearchBarTypeEnum = js.native
    var FoldableClosed: SearchBarTypeEnum = js.native
    var FoldableOpen: SearchBarTypeEnum = js.native
    var None: SearchBarTypeEnum = js.native
  }
  
  /* static members */
  @js.native
  object SearchField extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object SearchFieldOperator extends js.Object {
    var Contains: SearchFieldOperator = js.native
    var Equal: SearchFieldOperator = js.native
    var Greater: SearchFieldOperator = js.native
    var GreaterOrEqual: SearchFieldOperator = js.native
    var NotEqual: SearchFieldOperator = js.native
    var Smaller: SearchFieldOperator = js.native
    var SmallerOrEqual: SearchFieldOperator = js.native
    var StartsWith: SearchFieldOperator = js.native
  }
  
  /* static members */
  @js.native
  object SearchFieldType extends js.Object {
    var Hidden: SearchFieldType = js.native
    var Normal: SearchFieldType = js.native
    var ReadOnly: SearchFieldType = js.native
  }
  
  /* static members */
  @js.native
  object SelectButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SelectButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SelectButton = js.native
    /**
      * Creates and returns a new SelectButton instance in the SDK and on the server.
      * The new SelectButton will be automatically stored in the 'items' property
      * of the parent ControlBar element passed as argument.
      */
    def createIn(container: ControlBar): SelectButton = js.native
  }
  
  /* static members */
  @js.native
  object SelectionType extends js.Object {
    var SelectAll: SelectionType = js.native
    var SelectPage: SelectionType = js.native
  }
  
  /* static members */
  @js.native
  object SelectorDatabaseSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SelectorDatabaseSource = js.native
    /**
      * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
      * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.1.0 and higher
      */
    def createIn(container: AssociationWidget): SelectorDatabaseSource = js.native
  }
  
  /* static members */
  @js.native
  object SelectorMicroflowSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SelectorMicroflowSource = js.native
    /**
      * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
      * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
      * of the parent AssociationWidget element passed as argument.
      */
    def createIn(container: AssociationWidget): SelectorMicroflowSource = js.native
  }
  
  /* static members */
  @js.native
  object SelectorSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object SelectorXPathSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SelectorXPathSource = js.native
    /**
      * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
      * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
      * of the parent AssociationWidget element passed as argument.
      */
    def createIn(container: AssociationWidget): SelectorXPathSource = js.native
  }
  
  /* static members */
  @js.native
  object SidebarToggleButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SidebarToggleButton = js.native
    /**
      * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
      * The new SidebarToggleButton will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): SidebarToggleButton = js.native
  }
  
  /* static members */
  @js.native
  object SidebarToggleMode extends js.Object {
    var PushContentAside: SidebarToggleMode = js.native
    var ShrinkContent: SidebarToggleMode = js.native
    var SlideOverContent: SidebarToggleMode = js.native
  }
  
  /* static members */
  @js.native
  object SidebarToggleRegion extends js.Object {
    var Left: SidebarToggleRegion = js.native
    var Right: SidebarToggleRegion = js.native
  }
  
  /* static members */
  @js.native
  object SignOutClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInListViewUnderClickAction(container: ListView): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SignOutClientAction = js.native
    /**
      * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
      * The new SignOutClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): SignOutClientAction = js.native
  }
  
  /* static members */
  @js.native
  object SimpleMenuBar extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SimpleMenuBar = js.native
    /**
      * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
      * The new SimpleMenuBar will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): SimpleMenuBar = js.native
  }
  
  /* static members */
  @js.native
  object SimpleMenuBarOrientation extends js.Object {
    var Horizontal: SimpleMenuBarOrientation = js.native
    var Vertical: SimpleMenuBarOrientation = js.native
  }
  
  /* static members */
  @js.native
  object SingleSearchField extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object SizeMode extends js.Object {
    var Auto: SizeMode = js.native
    var Percentage: SizeMode = js.native
    var Pixels: SizeMode = js.native
  }
  
  /* static members */
  @js.native
  object Snippet extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates a new Snippet unit in the SDK and on the server.
      * Expects one argument, the projects.IFolderBase in which this unit is contained.
      */
    def createIn(container: IFolderBase): Snippet = js.native
  }
  
  /* static members */
  @js.native
  object SnippetCall extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SnippetCall instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SnippetCall = js.native
    /**
      * Creates and returns a new SnippetCall instance in the SDK and on the server.
      * The new SnippetCall will be automatically stored in the 'snippetCall' property
      * of the parent SnippetCallWidget element passed as argument.
      */
    def createIn(container: SnippetCallWidget): SnippetCall = js.native
  }
  
  /* static members */
  @js.native
  object SnippetCallWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SnippetCallWidget = js.native
    /**
      * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
      * The new SnippetCallWidget will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): SnippetCallWidget = js.native
  }
  
  /* static members */
  @js.native
  object SnippetType extends js.Object {
    var Native: SnippetType = js.native
    var Web: SnippetType = js.native
  }
  
  /* static members */
  @js.native
  object SortDirection extends js.Object {
    var Ascending: SortDirection = js.native
    var Descending: SortDirection = js.native
  }
  
  /* static members */
  @js.native
  object SortableEntityPathSource extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object SplitPane extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object StaticImageViewer extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): StaticImageViewer = js.native
    /**
      * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
      * The new StaticImageViewer will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): StaticImageViewer = js.native
  }
  
  /* static members */
  @js.native
  object StaticOrDynamicString extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): StaticOrDynamicString = js.native
    /**
      * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
      * The new StaticOrDynamicString will be automatically stored in the 'address' property
      * of the parent LinkButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.2.0
      */
    def createInLinkButtonUnderAddress(container: LinkButton): StaticOrDynamicString = js.native
    /**
      * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
      * The new StaticOrDynamicString will be automatically stored in the 'address' property
      * of the parent OpenLinkClientAction element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.3.0 and higher
      */
    def createInOpenLinkClientActionUnderAddress(container: OpenLinkClientAction): StaticOrDynamicString = js.native
  }
  
  /* static members */
  @js.native
  object SyncButton extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.0.1
      */
    def createInDataViewUnderFooterWidget(container: DataView): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDataViewUnderWidget(container: DataView): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInDivContainerUnderWidget(container: DivContainer): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInGroupBoxUnderWidget(container: GroupBox): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderLeftWidget(container: Header): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInHeaderUnderRightWidget(container: Header): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInLayoutUnderWidget(container: Layout): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInListViewUnderWidget(container: ListView): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSnippetUnderWidget(container: Snippet): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTabPageUnderWidget(container: TabPage): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTableCellUnderWidget(container: TableCell): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SyncButton = js.native
    /**
      * Creates and returns a new SyncButton instance in the SDK and on the server.
      * The new SyncButton will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.0.1
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): SyncButton = js.native
  }
  
  /* static members */
  @js.native
  object SyncClientAction extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent ActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionButtonUnderAction(container: ActionButton): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent ActionItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInActionItemUnderAction(container: ActionItem): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AssociationWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'onEnterAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'onLeaveAction' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent nativepages.BottomBarItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInBottomBarItemUnderAction(container: BottomBarItem): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'clickAction' property
      * of the parent DynamicImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.18.0 and higher
      */
    def createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent GridActionButton element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInGridActionButtonUnderAction(container: GridActionButton): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'clickAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInListViewUnderClickAction(container: ListView): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'pullDownAction' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInListViewUnderPullDownAction(container: ListView): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent menus.MenuItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInMenuItemUnderAction(container: MenuItem): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
      * of the parent ReferenceSetSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.13.0 and higher
      */
    def createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'clickAction' property
      * of the parent StaticImageViewer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 and higher
      */
    def createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SyncClientAction = js.native
    /**
      * Creates and returns a new SyncClientAction instance in the SDK and on the server.
      * The new SyncClientAction will be automatically stored in the 'action' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.19.0 and higher
      */
    def createInWidgetValueUnderAction(container: WidgetValue): SyncClientAction = js.native
  }
  
  /* static members */
  @js.native
  object TabContainer extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TabContainer = js.native
    /**
      * Creates and returns a new TabContainer instance in the SDK and on the server.
      * The new TabContainer will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): TabContainer = js.native
  }
  
  /* static members */
  @js.native
  object TabPage extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TabPage instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TabPage = js.native
    /**
      * Creates and returns a new TabPage instance in the SDK and on the server.
      * The new TabPage will be automatically stored in the 'tabPages' property
      * of the parent TabContainer element passed as argument.
      */
    def createIn(container: TabContainer): TabPage = js.native
  }
  
  /* static members */
  @js.native
  object Table extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Table = js.native
    /**
      * Creates and returns a new Table instance in the SDK and on the server.
      * The new Table will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): Table = js.native
  }
  
  /* static members */
  @js.native
  object TableCell extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TableCell instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TableCell = js.native
    /**
      * Creates and returns a new TableCell instance in the SDK and on the server.
      * The new TableCell will be automatically stored in the 'cells' property
      * of the parent Table element passed as argument.
      */
    def createIn(container: Table): TableCell = js.native
  }
  
  /* static members */
  @js.native
  object TableCellRenderModeType extends js.Object {
    var Default: TableCellRenderModeType = js.native
    var Header: TableCellRenderModeType = js.native
    var Title: TableCellRenderModeType = js.native
  }
  
  /* static members */
  @js.native
  object TableColumn extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TableColumn instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TableColumn = js.native
    /**
      * Creates and returns a new TableColumn instance in the SDK and on the server.
      * The new TableColumn will be automatically stored in the 'columns' property
      * of the parent Table element passed as argument.
      */
    def createIn(container: Table): TableColumn = js.native
  }
  
  /* static members */
  @js.native
  object TableRow extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TableRow instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TableRow = js.native
    /**
      * Creates and returns a new TableRow instance in the SDK and on the server.
      * The new TableRow will be automatically stored in the 'rows' property
      * of the parent Table element passed as argument.
      */
    def createIn(container: Table): TableRow = js.native
  }
  
  /* static members */
  @js.native
  object TemplateFormBase extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object TemplateGrid extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TemplateGrid = js.native
    /**
      * Creates and returns a new TemplateGrid instance in the SDK and on the server.
      * The new TemplateGrid will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): TemplateGrid = js.native
  }
  
  /* static members */
  @js.native
  object TemplateGridContents extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TemplateGridContents = js.native
    /**
      * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
      * The new TemplateGridContents will be automatically stored in the 'contents' property
      * of the parent TemplateGrid element passed as argument.
      */
    def createIn(container: TemplateGrid): TemplateGridContents = js.native
  }
  
  /* static members */
  @js.native
  object TextArea extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TextArea = js.native
    /**
      * Creates and returns a new TextArea instance in the SDK and on the server.
      * The new TextArea will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): TextArea = js.native
  }
  
  /* static members */
  @js.native
  object TextBox extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TextBox = js.native
    /**
      * Creates and returns a new TextBox instance in the SDK and on the server.
      * The new TextBox will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): TextBox = js.native
  }
  
  /* static members */
  @js.native
  object TextRenderMode extends js.Object {
    var H1: TextRenderMode = js.native
    var H2: TextRenderMode = js.native
    var H3: TextRenderMode = js.native
    var H4: TextRenderMode = js.native
    var H5: TextRenderMode = js.native
    var H6: TextRenderMode = js.native
    var Paragraph: TextRenderMode = js.native
    var Text: TextRenderMode = js.native
  }
  
  /* static members */
  @js.native
  object TextWidget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object Title extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Title = js.native
    /**
      * Creates and returns a new Title instance in the SDK and on the server.
      * The new Title will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): Title = js.native
  }
  
  /* static members */
  @js.native
  object ToggleMode extends js.Object {
    var None: ToggleMode = js.native
    var PushContentAside: ToggleMode = js.native
    var ShrinkContentInitiallyClosed: ToggleMode = js.native
    var ShrinkContentInitiallyOpen: ToggleMode = js.native
    var SlideOverContent: ToggleMode = js.native
  }
  
  /* static members */
  @js.native
  object UnitEnum extends js.Object {
    var Pixels: UnitEnum = js.native
    var Weight: UnitEnum = js.native
  }
  
  /* static members */
  @js.native
  object ValidationMessage extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderFooterWidgets(container: DataView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDataViewUnderWidgets(container: DataView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInDivContainerUnderWidgets(container: DivContainer): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderLeftWidgets(container: Header): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInHeaderUnderRightWidgets(container: Header): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInListViewUnderWidgets(container: ListView): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent NativeLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInSnippetUnderWidgets(container: Snippet): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTabPageUnderWidgets(container: TabPage): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTableCellUnderWidgets(container: TableCell): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 and higher
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.0.2 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent WebLayoutContent element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ValidationMessage = js.native
    /**
      * Creates and returns a new ValidationMessage instance in the SDK and on the server.
      * The new ValidationMessage will be automatically stored in the 'widgets' property
      * of the parent customwidgets.WidgetValue element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.2.0 and higher
      */
    def createInWidgetValueUnderWidgets(container: WidgetValue): ValidationMessage = js.native
  }
  
  /* static members */
  @js.native
  object VerticalFlow extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalFlow = js.native
    /**
      * Creates and returns a new VerticalFlow instance in the SDK and on the server.
      * The new VerticalFlow will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalFlow = js.native
  }
  
  /* static members */
  @js.native
  object VerticalSplitPane extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.7.0 to 7.14.0
      */
    def createInBuildingBlockUnderWidget(container: BuildingBlock): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent BuildingBlock element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInBuildingBlockUnderWidgets(container: BuildingBlock): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.7.0 to 7.14.0
      */
    def createInDataViewUnderFooterWidget(container: DataView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'footerWidgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDataViewUnderFooterWidgets(container: DataView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDataViewUnderWidget(container: DataView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent DataView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDataViewUnderWidgets(container: DataView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInDivContainerUnderWidget(container: DivContainer): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent DivContainer element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInDivContainerUnderWidgets(container: DivContainer): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInGroupBoxUnderWidget(container: GroupBox): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent GroupBox element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInGroupBoxUnderWidgets(container: GroupBox): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderLeftWidget(container: Header): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'leftWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInHeaderUnderLeftWidgets(container: Header): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInHeaderUnderRightWidget(container: Header): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'rightWidgets' property
      * of the parent Header element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInHeaderUnderRightWidgets(container: Header): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent LayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent LayoutGridColumn element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInLayoutUnderWidget(container: Layout): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInLayoutUnderWidgets(container: Layout): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ListViewTemplate element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInListViewTemplateUnderWidgets(container: ListViewTemplate): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInListViewUnderWidget(container: ListView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ListView element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInListViewUnderWidgets(container: ListView): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent MasterDetailRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.1.0 to 7.14.0
      */
    def createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.23.0 to 7.23.0
      */
    def createInNativeLayoutCallArgumentUnderWidgets(container: NativeLayoutCallArgument): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'headerWidget' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.22.0 to 7.23.0
      */
    def createInNativeLayoutUnderHeaderWidget(container: NativeLayout): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent nativepages.NativeLayout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.21.0 to 7.23.0
      */
    def createInNativeLayoutUnderWidgets(container: NativeLayout): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent NavigationListItem element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInNavigationListItemUnderWidgets(container: NavigationListItem): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderParameterWidget(container: ReportPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
      * of the parent reports.ReportPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 6.9.0
      */
    def createInReportPaneUnderReportWidget(container: ReportPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent ScrollContainerRegion element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSnippetUnderWidget(container: Snippet): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent Snippet element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSnippetUnderWidgets(container: Snippet): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'firstWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderFirstWidgets(container: SplitPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'secondWidgets' property
      * of the parent SplitPane element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInSplitPaneUnderSecondWidgets(container: SplitPane): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTabPageUnderWidget(container: TabPage): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TabPage element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTabPageUnderWidgets(container: TabPage): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTableCellUnderWidget(container: TableCell): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TableCell element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTableCellUnderWidgets(container: TableCell): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widget' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent TemplateGridContents element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.15.0 to 7.23.0
      */
    def createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): VerticalSplitPane = js.native
    /**
      * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
      * The new VerticalSplitPane will be automatically stored in the 'widgets' property
      * of the parent VerticalFlow element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  6.0.0 to 7.14.0
      */
    def createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalSplitPane = js.native
  }
  
  /* static members */
  @js.native
  object WebLayoutContent extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new WebLayoutContent instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): WebLayoutContent = js.native
    /**
      * Creates and returns a new WebLayoutContent instance in the SDK and on the server.
      * The new WebLayoutContent will be automatically stored in the 'content' property
      * of the parent Layout element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  8.0.0 and higher
      */
    def createIn(container: Layout): WebLayoutContent = js.native
  }
  
  /* static members */
  @js.native
  object Widget extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
  }
  
  /* static members */
  @js.native
  object WidgetValidation extends js.Object {
    var structureTypeName: String = js.native
    var versionInfo: StructureVersionInfo = js.native
    /**
      * Creates and returns a new WidgetValidation instance in the SDK and on the server.
      * Expects one argument: the IModel object the instance will "live on".
      * After creation, assign or add this instance to a property that accepts this kind of objects.
      */
    def create(model: IModel): WidgetValidation = js.native
    /**
      * Creates and returns a new WidgetValidation instance in the SDK and on the server.
      * The new WidgetValidation will be automatically stored in the 'validation' property
      * of the parent AttributeWidget element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.6.0 and higher
      */
    def createInAttributeWidgetUnderValidation(container: AttributeWidget): WidgetValidation = js.native
    /**
      * Creates and returns a new WidgetValidation instance in the SDK and on the server.
      * The new WidgetValidation will be automatically stored in the 'validation' property
      * of the parent ReferenceSelector element passed as argument.
      *
      * Warning! Can only be used on models with the following Mendix meta model versions:
      *  7.6.0 and higher
      */
    def createInReferenceSelectorUnderValidation(container: ReferenceSelector): WidgetValidation = js.native
  }
  
}

