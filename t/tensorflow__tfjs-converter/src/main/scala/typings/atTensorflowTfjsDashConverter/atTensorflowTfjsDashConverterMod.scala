package typings.atTensorflowTfjsDashConverter

import typings.atTensorflowTfjsDashConverter.atTensorflowTfjsDashConverterStrings.`1Dot5Dot1`
import typings.atTensorflowTfjsDashConverter.distSrcOperationsTypesMod.OpExecutor
import typings.atTensorflowTfjsDashCore.distIoTypesMod.IOHandler
import typings.atTensorflowTfjsDashCore.distIoTypesMod.LoadOptions
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("@tensorflow/tfjs-converter", JSImport.Namespace)
@js.native
object atTensorflowTfjsDashConverterMod extends js.Object {
  @js.native
  class GraphModel protected ()
    extends typings.atTensorflowTfjsDashConverter.distSrcExecutorGraphUnderscoreModelMod.GraphModel {
    /**
      * @param modelUrl url for the model, or an `io.IOHandler`.
      * @param weightManifestUrl url for the weight file generated by
      * scripts/convert.py script.
      * @param requestOption options for Request, which allows to send credentials
      * and custom headers.
      * @param onProgress Optional, progress callback function, fired periodically
      * before the load is completed.
      */
    def this(modelUrl: String) = this()
    def this(modelUrl: IOHandler) = this()
    def this(modelUrl: String, loadOptions: LoadOptions) = this()
    def this(modelUrl: IOHandler, loadOptions: LoadOptions) = this()
  }
  
  val version_converter: `1Dot5Dot1` = js.native
  def deregisterOp(name: String): Unit = js.native
  def loadGraphModel(modelUrl: String): js.Promise[
    typings.atTensorflowTfjsDashConverter.distSrcExecutorGraphUnderscoreModelMod.GraphModel
  ] = js.native
  def loadGraphModel(modelUrl: String, options: LoadOptions): js.Promise[
    typings.atTensorflowTfjsDashConverter.distSrcExecutorGraphUnderscoreModelMod.GraphModel
  ] = js.native
  def loadGraphModel(modelUrl: IOHandler): js.Promise[
    typings.atTensorflowTfjsDashConverter.distSrcExecutorGraphUnderscoreModelMod.GraphModel
  ] = js.native
  def loadGraphModel(modelUrl: IOHandler, options: LoadOptions): js.Promise[
    typings.atTensorflowTfjsDashConverter.distSrcExecutorGraphUnderscoreModelMod.GraphModel
  ] = js.native
  def registerOp(name: String, opFunc: OpExecutor): Unit = js.native
}

