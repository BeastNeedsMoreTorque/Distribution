package typings.googleapis.buildSrcApisGamesV1Mod.games_v1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * This is a JSON template for a turn-based match resource object.
  */
@js.native
trait Schema$TurnBasedMatch extends js.Object {
  /**
    * The ID of the application being played.
    */
  var applicationId: js.UndefOr[String] = js.native
  /**
    * Criteria for auto-matching players into this match.
    */
  var autoMatchingCriteria: js.UndefOr[Schema$TurnBasedAutoMatchingCriteria] = js.native
  /**
    * Details about the match creation.
    */
  var creationDetails: js.UndefOr[Schema$TurnBasedMatchModification] = js.native
  /**
    * The data / game state for this match.
    */
  var data: js.UndefOr[Schema$TurnBasedMatchData] = js.native
  /**
    * This short description is generated by our servers based on turn state
    * and is localized and worded relative to the player requesting the match.
    * It is intended to be displayed when the match is shown in a list.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * The ID of the participant that invited the user to the match. Not set if
    * the user was not invited to the match.
    */
  var inviterId: js.UndefOr[String] = js.native
  /**
    * Uniquely identifies the type of this resource. Value is always the fixed
    * string games#turnBasedMatch.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * Details about the last update to the match.
    */
  var lastUpdateDetails: js.UndefOr[Schema$TurnBasedMatchModification] = js.native
  /**
    * Globally unique ID for a turn-based match.
    */
  var matchId: js.UndefOr[String] = js.native
  /**
    * The number of the match in a chain of rematches. Will be set to 1 for the
    * first match and incremented by 1 for each rematch.
    */
  var matchNumber: js.UndefOr[Double] = js.native
  /**
    * The version of this match: an increasing counter, used to avoid
    * out-of-date updates to the match.
    */
  var matchVersion: js.UndefOr[Double] = js.native
  /**
    * The participants involved in the match, along with their statuses.
    * Includes participants who have left or declined invitations.
    */
  var participants: js.UndefOr[js.Array[Schema$TurnBasedMatchParticipant]] = js.native
  /**
    * The ID of the participant that is taking a turn.
    */
  var pendingParticipantId: js.UndefOr[String] = js.native
  /**
    * The data / game state for the previous match; set for the first turn of
    * rematches only.
    */
  var previousMatchData: js.UndefOr[Schema$TurnBasedMatchData] = js.native
  /**
    * The ID of a rematch of this match. Only set for completed matches that
    * have been rematched.
    */
  var rematchId: js.UndefOr[String] = js.native
  /**
    * The results reported for this match.
    */
  var results: js.UndefOr[js.Array[Schema$ParticipantResult]] = js.native
  /**
    * The status of the match. Possible values are:   -
    * &quot;MATCH_AUTO_MATCHING&quot; - One or more slots need to be filled by
    * auto-matching; the match cannot be established until they are filled.  -
    * &quot;MATCH_ACTIVE&quot; - The match has started.  -
    * &quot;MATCH_COMPLETE&quot; - The match has finished.  -
    * &quot;MATCH_CANCELED&quot; - The match was canceled.  -
    * &quot;MATCH_EXPIRED&quot; - The match expired due to inactivity.  -
    * &quot;MATCH_DELETED&quot; - The match should no longer be shown on the
    * client. Returned only for tombstones for matches when sync is called.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * The status of the current user in the match. Derived from the match type,
    * match status, the user&#39;s participant status, and the pending
    * participant for the match. Possible values are:   -
    * &quot;USER_INVITED&quot; - The user has been invited to join the match
    * and has not responded yet.  - &quot;USER_AWAITING_TURN&quot; - The user
    * is waiting for their turn.  - &quot;USER_TURN&quot; - The user has an
    * action to take in the match.  - &quot;USER_MATCH_COMPLETED&quot; - The
    * match has ended (it is completed, canceled, or expired.)
    */
  var userMatchStatus: js.UndefOr[String] = js.native
  /**
    * The variant / mode of the application being played; can be any integer
    * value, or left blank.
    */
  var variant: js.UndefOr[Double] = js.native
  /**
    * The ID of another participant in the match that can be used when
    * describing the participants the user is playing with.
    */
  var withParticipantId: js.UndefOr[String] = js.native
}

object Schema$TurnBasedMatch {
  @scala.inline
  def apply(
    applicationId: String = null,
    autoMatchingCriteria: Schema$TurnBasedAutoMatchingCriteria = null,
    creationDetails: Schema$TurnBasedMatchModification = null,
    data: Schema$TurnBasedMatchData = null,
    description: String = null,
    inviterId: String = null,
    kind: String = null,
    lastUpdateDetails: Schema$TurnBasedMatchModification = null,
    matchId: String = null,
    matchNumber: Int | Double = null,
    matchVersion: Int | Double = null,
    participants: js.Array[Schema$TurnBasedMatchParticipant] = null,
    pendingParticipantId: String = null,
    previousMatchData: Schema$TurnBasedMatchData = null,
    rematchId: String = null,
    results: js.Array[Schema$ParticipantResult] = null,
    status: String = null,
    userMatchStatus: String = null,
    variant: Int | Double = null,
    withParticipantId: String = null
  ): Schema$TurnBasedMatch = {
    val __obj = js.Dynamic.literal()
    if (applicationId != null) __obj.updateDynamic("applicationId")(applicationId.asInstanceOf[js.Any])
    if (autoMatchingCriteria != null) __obj.updateDynamic("autoMatchingCriteria")(autoMatchingCriteria.asInstanceOf[js.Any])
    if (creationDetails != null) __obj.updateDynamic("creationDetails")(creationDetails.asInstanceOf[js.Any])
    if (data != null) __obj.updateDynamic("data")(data.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (inviterId != null) __obj.updateDynamic("inviterId")(inviterId.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (lastUpdateDetails != null) __obj.updateDynamic("lastUpdateDetails")(lastUpdateDetails.asInstanceOf[js.Any])
    if (matchId != null) __obj.updateDynamic("matchId")(matchId.asInstanceOf[js.Any])
    if (matchNumber != null) __obj.updateDynamic("matchNumber")(matchNumber.asInstanceOf[js.Any])
    if (matchVersion != null) __obj.updateDynamic("matchVersion")(matchVersion.asInstanceOf[js.Any])
    if (participants != null) __obj.updateDynamic("participants")(participants.asInstanceOf[js.Any])
    if (pendingParticipantId != null) __obj.updateDynamic("pendingParticipantId")(pendingParticipantId.asInstanceOf[js.Any])
    if (previousMatchData != null) __obj.updateDynamic("previousMatchData")(previousMatchData.asInstanceOf[js.Any])
    if (rematchId != null) __obj.updateDynamic("rematchId")(rematchId.asInstanceOf[js.Any])
    if (results != null) __obj.updateDynamic("results")(results.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (userMatchStatus != null) __obj.updateDynamic("userMatchStatus")(userMatchStatus.asInstanceOf[js.Any])
    if (variant != null) __obj.updateDynamic("variant")(variant.asInstanceOf[js.Any])
    if (withParticipantId != null) __obj.updateDynamic("withParticipantId")(withParticipantId.asInstanceOf[js.Any])
    __obj.asInstanceOf[Schema$TurnBasedMatch]
  }
}

