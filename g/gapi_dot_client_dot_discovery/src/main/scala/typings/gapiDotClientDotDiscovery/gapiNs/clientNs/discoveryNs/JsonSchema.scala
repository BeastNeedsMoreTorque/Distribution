package typings.gapiDotClientDotDiscovery.gapiNs.clientNs.discoveryNs

import typings.gapiDotClientDotDiscovery.Anon_Discriminant
import typings.gapiDotClientDotDiscovery.Anon_Required
import typings.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait JsonSchema extends js.Object {
  /** A reference to another schema. The value of this property is the "id" of another schema. */
  @JSName("$ref")
  var $ref: js.UndefOr[String] = js.undefined
  /** If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object. */
  var additionalProperties: js.UndefOr[JsonSchema] = js.undefined
  /** Additional information about this property. */
  var annotations: js.UndefOr[Anon_Required] = js.undefined
  /** The default value of this property (if one exists). */
  var default: js.UndefOr[String] = js.undefined
  /** A description of this object. */
  var description: js.UndefOr[String] = js.undefined
  /** Values this parameter may take (if it is an enum). */
  var enum: js.UndefOr[js.Array[String]] = js.undefined
  /** The descriptions for the enums. Each position maps to the corresponding value in the "enum" array. */
  var enumDescriptions: js.UndefOr[js.Array[String]] = js.undefined
  /**
    * An additional regular expression or key that helps constrain the value. For more details see:
    * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
    */
  var format: js.UndefOr[String] = js.undefined
  /** Unique identifier for this schema. */
  var id: js.UndefOr[String] = js.undefined
  /** If this is a schema for an array, this property is the schema for each element in the array. */
  var items: js.UndefOr[JsonSchema] = js.undefined
  /** Whether this parameter goes in the query or the path for REST requests. */
  var location: js.UndefOr[String] = js.undefined
  /** The maximum value of this parameter. */
  var maximum: js.UndefOr[String] = js.undefined
  /** The minimum value of this parameter. */
  var minimum: js.UndefOr[String] = js.undefined
  /** The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html */
  var pattern: js.UndefOr[String] = js.undefined
  /** If this is a schema for an object, list the schema for each property of this object. */
  var properties: js.UndefOr[Record[String, JsonSchema]] = js.undefined
  /**
    * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH
    * request, it is ignored by the service.
    */
  var readOnly: js.UndefOr[Boolean] = js.undefined
  /** Whether this parameter may appear multiple times. */
  var repeated: js.UndefOr[Boolean] = js.undefined
  /** Whether the parameter is required. */
  var required: js.UndefOr[Boolean] = js.undefined
  /** The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1 */
  var `type`: js.UndefOr[String] = js.undefined
  /**
    * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of
    * descriminant values to schema names.
    */
  var variant: js.UndefOr[Anon_Discriminant] = js.undefined
}

object JsonSchema {
  @scala.inline
  def apply(
    $ref: String = null,
    additionalProperties: JsonSchema = null,
    annotations: Anon_Required = null,
    default: String = null,
    description: String = null,
    enum: js.Array[String] = null,
    enumDescriptions: js.Array[String] = null,
    format: String = null,
    id: String = null,
    items: JsonSchema = null,
    location: String = null,
    maximum: String = null,
    minimum: String = null,
    pattern: String = null,
    properties: Record[String, JsonSchema] = null,
    readOnly: js.UndefOr[Boolean] = js.undefined,
    repeated: js.UndefOr[Boolean] = js.undefined,
    required: js.UndefOr[Boolean] = js.undefined,
    `type`: String = null,
    variant: Anon_Discriminant = null
  ): JsonSchema = {
    val __obj = js.Dynamic.literal()
    if ($ref != null) __obj.updateDynamic("$ref")($ref)
    if (additionalProperties != null) __obj.updateDynamic("additionalProperties")(additionalProperties)
    if (annotations != null) __obj.updateDynamic("annotations")(annotations)
    if (default != null) __obj.updateDynamic("default")(default)
    if (description != null) __obj.updateDynamic("description")(description)
    if (enum != null) __obj.updateDynamic("enum")(enum)
    if (enumDescriptions != null) __obj.updateDynamic("enumDescriptions")(enumDescriptions)
    if (format != null) __obj.updateDynamic("format")(format)
    if (id != null) __obj.updateDynamic("id")(id)
    if (items != null) __obj.updateDynamic("items")(items)
    if (location != null) __obj.updateDynamic("location")(location)
    if (maximum != null) __obj.updateDynamic("maximum")(maximum)
    if (minimum != null) __obj.updateDynamic("minimum")(minimum)
    if (pattern != null) __obj.updateDynamic("pattern")(pattern)
    if (properties != null) __obj.updateDynamic("properties")(properties)
    if (!js.isUndefined(readOnly)) __obj.updateDynamic("readOnly")(readOnly)
    if (!js.isUndefined(repeated)) __obj.updateDynamic("repeated")(repeated)
    if (!js.isUndefined(required)) __obj.updateDynamic("required")(required)
    if (`type` != null) __obj.updateDynamic("type")(`type`)
    if (variant != null) __obj.updateDynamic("variant")(variant)
    __obj.asInstanceOf[JsonSchema]
  }
}

