package typings
package atJupyterlabCoreutilsLib.libStatedbMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("@jupyterlab/coreutils/lib/statedb", "StateDB")
@js.native
object StateDBNs extends js.Object {
  /**
    * A state database change.
    */
  trait Change extends js.Object {
    /**
      * The key of the database item that was changed.
      *
      * #### Notes
      * This field is set to `null` for global changes (i.e. `clear`).
      */
    var id: java.lang.String | scala.Null
    /**
      * The type of change.
      */
    var `type`: atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.clear | atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.remove | atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.save
  }
  
  /**
    * A data transformation that can be applied to a state database.
    */
  trait DataTransform extends js.Object {
    /**
      * The contents of the change operation.
      */
    var contents: atPhosphorCoreutilsLib.libJsonMod.ReadonlyJSONObject | scala.Null
    var `type`: atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.cancel | atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.clear | atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.merge | atJupyterlabCoreutilsLib.atJupyterlabCoreutilsLibStrings.overwrite
  }
  
  /**
    * The instantiation options for a state database.
    */
  trait IOptions extends js.Object {
    /**
      * The namespace prefix for all state database entries.
      */
    var namespace: java.lang.String
    /**
      * An optional promise that resolves with a data transformation that is
      * applied to the database contents before the database begins resolving
      * client requests.
      */
    var transform: js.UndefOr[js.Promise[DataTransform]] = js.undefined
    /**
      * An optional name for the application window.
      *
      * #### Notes
      * In environments where multiple windows can instantiate a state database,
      * a window name is necessary to prefix all keys that are stored within the
      * local storage that is shared by all windows. In JupyterLab, this window
      * name is generated by the `IWindowResolver` extension.
      */
    var windowName: js.UndefOr[java.lang.String] = js.undefined
  }
  
  /**
    * Retrieve all the saved bundles for a given namespace in local storage.
    *
    * @param prefix - The namespace to retrieve.
    *
    * @param mask - Optional mask function to transform each key retrieved.
    *
    * @returns A collection of data payloads for a given prefix.
    *
    * #### Notes
    * If there are any errors in retrieving the data, they will be logged to the
    * console in order to optimistically return any extant data without failing.
    */
  def fetchNamespace(namespace: java.lang.String): js.Array[atJupyterlabCoreutilsLib.libStatedbMod.IStateItem] = js.native
  def fetchNamespace(namespace: java.lang.String, mask: js.Function1[/* key */ java.lang.String, java.lang.String]): js.Array[atJupyterlabCoreutilsLib.libStatedbMod.IStateItem] = js.native
  /**
    * Return a serialized copy of a namespace's contents from local storage.
    *
    * @returns The namespace contents as JSON.
    */
  def toJSON(namespace: java.lang.String): atPhosphorCoreutilsLib.libJsonMod.ReadonlyJSONObject = js.native
  def toJSON(namespace: java.lang.String, mask: js.Function1[/* key */ java.lang.String, java.lang.String]): atPhosphorCoreutilsLib.libJsonMod.ReadonlyJSONObject = js.native
}

