package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * is used for executing a static SQL statement and obtaining the results produced by it.
  *
  * Only one {@link ResultSet} per {@link Statement} can be open at any point in time. Therefore, if the reading of one {@link ResultSet} is interleaved
  * with the reading of another, each must have been generated by different Statements. All statement `execute` methods implicitly close a statement's
  * current {@link ResultSet} if an open one exists.
  */
trait Statement
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XComponent
     with XCloseable
     with activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySet
     with activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.XCancellable
     with XStatement
     with XBatchExecution
     with XWarningsSupplier
     with XMultipleResults {
  /**
    * defines the SQL cursor name that will be used by subsequent {@link Statement}`execute` methods.
    *
    * This name can then be used in SQL positioned update/delete statements to identify the current row in the {@link ResultSet} generated by this
    * statement. If the database does not support positioned update/delete, this property is a noop. To insure that a cursor has the proper isolation level
    * to support updates, the cursor's SELECT statement should be of the form "select for update ...". If the "for update" phrase is omitted, positioned
    * updates may fail.
    *
    * ** Note: ** By definition, positioned update/delete execution must be done by a different {@link Statement} than the one which generated the {@link
    * ResultSet} being used for positioning. Also, cursor names must be unique within a connection.
    */
  var CursorName: java.lang.String
  /**
    * returns if escape processing is on or off. If escape scanning is on (the default), the driver will do escape substitution before sending the SQL to
    * the database.
    */
  var EscapeProcessing: scala.Boolean
  /**
    * retrieves the direction for fetching rows from database tables that is the default for result sets generated from this `Statement` object. ;  If this
    * `Statement` object has not set a fetch direction, the return value is implementation-specific.
    */
  var FetchDirection: scala.Double
  /**
    * retrieves the number of result set rows that is the default fetch size for result sets generated from this `Statement` object. ;  If this `Statement`
    * object has not set a fetch size, the return value is implementation-specific.
    */
  var FetchSize: scala.Double
  /**
    * returns the maximum number of bytes allowed for any column value.
    *
    * This limit is the maximum number of bytes that can be returned for any column value. The limit applies only to {@link
    * com.sun.star.sdbc.DataType.BINARY} , {@link com.sun.star.sdbc.DataType.VARBINARY} , {@link com.sun.star.sdbc.DataType.LONGVARBINARY} , {@link
    * com.sun.star.sdbc.DataType.CHAR} , {@link com.sun.star.sdbc.DataType.VARCHAR} , and {@link com.sun.star.sdbc.DataType.LONGVARCHAR} columns. If the
    * limit is exceeded, the excess data is silently discarded. ;  There is no limitation, if set to zero.
    */
  var MaxFieldSize: scala.Double
  /**
    * retrieves the maximum number of rows that a {@link ResultSet} can contain. If the limit is exceeded, the excess rows are silently dropped. ;  There is
    * no limitation, if set to zero.
    */
  var MaxRows: scala.Double
  /**
    * retrieves the number of seconds the driver will wait for a {@link Statement} to execute. If the limit is exceeded, a {@link SQLException} is thrown.
    * There is no limitation, if set to zero.
    */
  var QueryTimeOut: scala.Double
  /**
    * retrieves the result set concurrency.
    * @see com.sun.star.sdbc.ResultSetConcurrency
    */
  var ResultSetConcurrency: scala.Double
  /**
    * determine the result set type.
    * @see com.sun.star.sdbc.ResultSetType
    */
  var ResultSetType: scala.Double
}

object Statement {
  @scala.inline
  def apply(
    Connection: XConnection,
    CursorName: java.lang.String,
    EscapeProcessing: scala.Boolean,
    FetchDirection: scala.Double,
    FetchSize: scala.Double,
    MaxFieldSize: scala.Double,
    MaxRows: scala.Double,
    MoreResults: scala.Boolean,
    PropertySetInfo: activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo,
    QueryTimeOut: scala.Double,
    ResultSet: XResultSet,
    ResultSetConcurrency: scala.Double,
    ResultSetType: scala.Double,
    UpdateCount: scala.Double,
    Warnings: js.Any,
    acquire: js.Function0[scala.Unit],
    addBatch: js.Function1[java.lang.String, scala.Unit],
    addEventListener: js.Function1[activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener, scala.Unit],
    addPropertyChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener, 
      scala.Unit
    ],
    addVetoableChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener, 
      scala.Unit
    ],
    cancel: js.Function0[scala.Unit],
    clearBatch: js.Function0[scala.Unit],
    clearWarnings: js.Function0[scala.Unit],
    close: js.Function0[scala.Unit],
    dispose: js.Function0[scala.Unit],
    execute: js.Function1[java.lang.String, scala.Boolean],
    executeBatch: js.Function0[activexDashInteropLib.SafeArray[scala.Double]],
    executeQuery: js.Function1[java.lang.String, XResultSet],
    executeUpdate: js.Function1[java.lang.String, scala.Double],
    getConnection: js.Function0[XConnection],
    getMoreResults: js.Function0[scala.Boolean],
    getPropertySetInfo: js.Function0[activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo],
    getPropertyValue: js.Function1[java.lang.String, js.Any],
    getResultSet: js.Function0[XResultSet],
    getUpdateCount: js.Function0[scala.Double],
    getWarnings: js.Function0[js.Any],
    queryInterface: js.Function1[activexDashLibreofficeLib.`type`, js.Any],
    release: js.Function0[scala.Unit],
    removeEventListener: js.Function1[activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener, scala.Unit],
    removePropertyChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener, 
      scala.Unit
    ],
    removeVetoableChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener, 
      scala.Unit
    ],
    setPropertyValue: js.Function2[java.lang.String, js.Any, scala.Unit]
  ): Statement = {
    val __obj = js.Dynamic.literal()
    __obj.updateDynamic("Connection")(Connection)
    __obj.updateDynamic("CursorName")(CursorName)
    __obj.updateDynamic("EscapeProcessing")(EscapeProcessing)
    __obj.updateDynamic("FetchDirection")(FetchDirection)
    __obj.updateDynamic("FetchSize")(FetchSize)
    __obj.updateDynamic("MaxFieldSize")(MaxFieldSize)
    __obj.updateDynamic("MaxRows")(MaxRows)
    __obj.updateDynamic("MoreResults")(MoreResults)
    __obj.updateDynamic("PropertySetInfo")(PropertySetInfo)
    __obj.updateDynamic("QueryTimeOut")(QueryTimeOut)
    __obj.updateDynamic("ResultSet")(ResultSet)
    __obj.updateDynamic("ResultSetConcurrency")(ResultSetConcurrency)
    __obj.updateDynamic("ResultSetType")(ResultSetType)
    __obj.updateDynamic("UpdateCount")(UpdateCount)
    __obj.updateDynamic("Warnings")(Warnings)
    __obj.updateDynamic("acquire")(acquire)
    __obj.updateDynamic("addBatch")(addBatch)
    __obj.updateDynamic("addEventListener")(addEventListener)
    __obj.updateDynamic("addPropertyChangeListener")(addPropertyChangeListener)
    __obj.updateDynamic("addVetoableChangeListener")(addVetoableChangeListener)
    __obj.updateDynamic("cancel")(cancel)
    __obj.updateDynamic("clearBatch")(clearBatch)
    __obj.updateDynamic("clearWarnings")(clearWarnings)
    __obj.updateDynamic("close")(close)
    __obj.updateDynamic("dispose")(dispose)
    __obj.updateDynamic("execute")(execute)
    __obj.updateDynamic("executeBatch")(executeBatch)
    __obj.updateDynamic("executeQuery")(executeQuery)
    __obj.updateDynamic("executeUpdate")(executeUpdate)
    __obj.updateDynamic("getConnection")(getConnection)
    __obj.updateDynamic("getMoreResults")(getMoreResults)
    __obj.updateDynamic("getPropertySetInfo")(getPropertySetInfo)
    __obj.updateDynamic("getPropertyValue")(getPropertyValue)
    __obj.updateDynamic("getResultSet")(getResultSet)
    __obj.updateDynamic("getUpdateCount")(getUpdateCount)
    __obj.updateDynamic("getWarnings")(getWarnings)
    __obj.updateDynamic("queryInterface")(queryInterface)
    __obj.updateDynamic("release")(release)
    __obj.updateDynamic("removeEventListener")(removeEventListener)
    __obj.updateDynamic("removePropertyChangeListener")(removePropertyChangeListener)
    __obj.updateDynamic("removeVetoableChangeListener")(removeVetoableChangeListener)
    __obj.updateDynamic("setPropertyValue")(setPropertyValue)
    __obj.asInstanceOf[Statement]
  }
}

