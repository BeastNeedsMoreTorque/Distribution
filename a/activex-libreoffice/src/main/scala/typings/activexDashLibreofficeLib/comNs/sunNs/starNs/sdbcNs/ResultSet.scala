package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * provides access to a table of data. A {@link ResultSet} object is usually generated by executing a {@link Statement} .
  *
  * A {@link ResultSet} maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The "next" method
  * moves the cursor to the next row.
  *
  * The getXXX methods retrieve column values for the current row. You can retrieve values using either the index number of the column. Columns are
  * numbered from 1.
  *
  * For maximum portability, {@link ResultSet} columns within each row should be read in left-to-right order and each column should be read only once.
  *
  * For the getXXX methods, the SDBC driver attempts to convert the underlying data to the specified type and returns a suitable value.
  *
  * Column names used as input to the findColumn method are case insensitive. When several columns have the same name, then the value of the first
  * matching column will be returned. The column name option is designed to be used when column names are used in the SQL query. For columns that are NOT
  * explicitly named in the query, it is best to use column numbers. If column names are used, there is no way for the programmer to guarantee that they
  * actually refer to the intended columns.
  *
  * A {@link ResultSet} is automatically closed (disposed) by the {@link Statement} that generated it when that {@link Statement} is closed, re-executed,
  * or used to retrieve the next result from a sequence of multiple results.
  *
  * The number, types, and properties of a {@link ResultSet} 's columns are provided by the ResultSetMetaData object returned by the getMetaData method.
  */
trait ResultSet
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XComponent
     with XCloseable
     with activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySet
     with XWarningsSupplier
     with XResultSetMetaDataSupplier
     with XResultSet
     with XResultSetUpdate
     with XRow
     with XColumnLocate
     with XRowUpdate {
  /**
    * defines the SQL cursor name that will be used by subsequent {@link Statement}`execute` methods.
    *
    * This name can then be used in SQL positioned update/delete statements to identify the current row in the {@link ResultSet} generated by this
    * statement. If the database doesn't support positioned update/delete, this property is a noop. To insure that a cursor has the proper isolation level
    * to support updates, the cursor's SELECT statement should be of the form "select for update ...". If the "for update" phrase is omitted, positioned
    * updates may fail.
    *
    * ** Note: ** By definition, positioned update/delete execution must be done by a different {@link Statement} than the one which generated the {@link
    * ResultSet} being used for positioning. Also, cursor names must be unique within a connection.
    */
  var CursorName: java.lang.String
  /**
    * retrieves the direction for fetching rows from database tables that is the default for result sets generated from this {@link
    * com.sun.star.sdbcx.Statement} object. ;  If this `Statement` object has not set a fetch direction, the return value is implementation-specific.
    */
  var FetchDirection: scala.Double
  /**
    * retrieves the number of result set rows that is the default fetch size for result sets generated from this {@link com.sun.star.sdbcx.Statement}
    * object. ;  If this {@link com.sun.star.sdbcx.Statement} object has not set a fetch size, the return value is implementation-specific.
    */
  var FetchSize: scala.Double
  /**
    * retrieves the result set concurrency.
    * @see com.sun.star.sdbc.ResultSetConcurrency
    */
  var ResultSetConcurrency: scala.Double
  /**
    * determines the result set type.
    * @see com.sun.star.sdbc.ResultSetType
    */
  var ResultSetType: scala.Double
}

