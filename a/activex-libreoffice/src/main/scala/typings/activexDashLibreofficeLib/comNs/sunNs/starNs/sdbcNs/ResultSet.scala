package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * provides access to a table of data. A {@link ResultSet} object is usually generated by executing a {@link Statement} .
  *
  * A {@link ResultSet} maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The "next" method
  * moves the cursor to the next row.
  *
  * The getXXX methods retrieve column values for the current row. You can retrieve values using either the index number of the column. Columns are
  * numbered from 1.
  *
  * For maximum portability, {@link ResultSet} columns within each row should be read in left-to-right order and each column should be read only once.
  *
  * For the getXXX methods, the SDBC driver attempts to convert the underlying data to the specified type and returns a suitable value.
  *
  * Column names used as input to the findColumn method are case insensitive. When several columns have the same name, then the value of the first
  * matching column will be returned. The column name option is designed to be used when column names are used in the SQL query. For columns that are NOT
  * explicitly named in the query, it is best to use column numbers. If column names are used, there is no way for the programmer to guarantee that they
  * actually refer to the intended columns.
  *
  * A {@link ResultSet} is automatically closed (disposed) by the {@link Statement} that generated it when that {@link Statement} is closed, re-executed,
  * or used to retrieve the next result from a sequence of multiple results.
  *
  * The number, types, and properties of a {@link ResultSet} 's columns are provided by the ResultSetMetaData object returned by the getMetaData method.
  */
trait ResultSet
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XComponent
     with XCloseable
     with activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySet
     with XWarningsSupplier
     with XResultSetMetaDataSupplier
     with XResultSet
     with XResultSetUpdate
     with XRow
     with XColumnLocate
     with XRowUpdate {
  /**
    * defines the SQL cursor name that will be used by subsequent {@link Statement}`execute` methods.
    *
    * This name can then be used in SQL positioned update/delete statements to identify the current row in the {@link ResultSet} generated by this
    * statement. If the database doesn't support positioned update/delete, this property is a noop. To insure that a cursor has the proper isolation level
    * to support updates, the cursor's SELECT statement should be of the form "select for update ...". If the "for update" phrase is omitted, positioned
    * updates may fail.
    *
    * ** Note: ** By definition, positioned update/delete execution must be done by a different {@link Statement} than the one which generated the {@link
    * ResultSet} being used for positioning. Also, cursor names must be unique within a connection.
    */
  var CursorName: java.lang.String
  /**
    * retrieves the direction for fetching rows from database tables that is the default for result sets generated from this {@link
    * com.sun.star.sdbcx.Statement} object. ;  If this `Statement` object has not set a fetch direction, the return value is implementation-specific.
    */
  var FetchDirection: scala.Double
  /**
    * retrieves the number of result set rows that is the default fetch size for result sets generated from this {@link com.sun.star.sdbcx.Statement}
    * object. ;  If this {@link com.sun.star.sdbcx.Statement} object has not set a fetch size, the return value is implementation-specific.
    */
  var FetchSize: scala.Double
  /**
    * retrieves the result set concurrency.
    * @see com.sun.star.sdbc.ResultSetConcurrency
    */
  var ResultSetConcurrency: scala.Double
  /**
    * determines the result set type.
    * @see com.sun.star.sdbc.ResultSetType
    */
  var ResultSetType: scala.Double
}

object ResultSet {
  @scala.inline
  def apply(
    CursorName: java.lang.String,
    FetchDirection: scala.Double,
    FetchSize: scala.Double,
    MetaData: XResultSetMetaData,
    PropertySetInfo: activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo,
    ResultSetConcurrency: scala.Double,
    ResultSetType: scala.Double,
    Row: scala.Double,
    Statement: activexDashLibreofficeLib.comNs.sunNs.starNs.unoNs.XInterface,
    Warnings: js.Any,
    absolute: scala.Double => scala.Boolean,
    acquire: () => scala.Unit,
    addEventListener: activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener => scala.Unit,
    addPropertyChangeListener: (java.lang.String, activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener) => scala.Unit,
    addVetoableChangeListener: (java.lang.String, activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener) => scala.Unit,
    afterLast: () => scala.Unit,
    beforeFirst: () => scala.Unit,
    cancelRowUpdates: () => scala.Unit,
    clearWarnings: () => scala.Unit,
    close: () => scala.Unit,
    deleteRow: () => scala.Unit,
    dispose: () => scala.Unit,
    findColumn: java.lang.String => scala.Double,
    first: () => scala.Boolean,
    getArray: scala.Double => XArray,
    getBinaryStream: scala.Double => activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream,
    getBlob: scala.Double => XBlob,
    getBoolean: scala.Double => scala.Boolean,
    getByte: scala.Double => scala.Double,
    getBytes: scala.Double => stdLib.SafeArray[scala.Double],
    getCharacterStream: scala.Double => activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream,
    getClob: scala.Double => XClob,
    getDate: scala.Double => activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Date,
    getDouble: scala.Double => scala.Double,
    getFloat: scala.Double => scala.Double,
    getInt: scala.Double => scala.Double,
    getLong: scala.Double => scala.Double,
    getMetaData: () => XResultSetMetaData,
    getObject: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.containerNs.XNameAccess) => js.Any,
    getPropertySetInfo: () => activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo,
    getPropertyValue: java.lang.String => js.Any,
    getRef: scala.Double => XRef,
    getRow: () => scala.Double,
    getShort: scala.Double => scala.Double,
    getStatement: () => activexDashLibreofficeLib.comNs.sunNs.starNs.unoNs.XInterface,
    getString: scala.Double => java.lang.String,
    getTime: scala.Double => activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Time,
    getTimestamp: scala.Double => activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.DateTime,
    getWarnings: () => js.Any,
    insertRow: () => scala.Unit,
    isAfterLast: () => scala.Boolean,
    isBeforeFirst: () => scala.Boolean,
    isFirst: () => scala.Boolean,
    isLast: () => scala.Boolean,
    last: () => scala.Boolean,
    moveToCurrentRow: () => scala.Unit,
    moveToInsertRow: () => scala.Unit,
    next: () => scala.Boolean,
    previous: () => scala.Boolean,
    queryInterface: activexDashLibreofficeLib.`type` => js.Any,
    refreshRow: () => scala.Unit,
    relative: scala.Double => scala.Boolean,
    release: () => scala.Unit,
    removeEventListener: activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener => scala.Unit,
    removePropertyChangeListener: (java.lang.String, activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener) => scala.Unit,
    removeVetoableChangeListener: (java.lang.String, activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener) => scala.Unit,
    rowDeleted: () => scala.Boolean,
    rowInserted: () => scala.Boolean,
    rowUpdated: () => scala.Boolean,
    setPropertyValue: (java.lang.String, js.Any) => scala.Unit,
    updateBinaryStream: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream, scala.Double) => scala.Unit,
    updateBoolean: (scala.Double, scala.Boolean) => scala.Unit,
    updateByte: (scala.Double, scala.Double) => scala.Unit,
    updateBytes: (scala.Double, activexDashLibreofficeLib.LibreOfficeNs.SeqEquiv[scala.Double]) => scala.Unit,
    updateCharacterStream: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream, scala.Double) => scala.Unit,
    updateDate: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Date) => scala.Unit,
    updateDouble: (scala.Double, scala.Double) => scala.Unit,
    updateFloat: (scala.Double, scala.Double) => scala.Unit,
    updateInt: (scala.Double, scala.Double) => scala.Unit,
    updateLong: (scala.Double, scala.Double) => scala.Unit,
    updateNull: scala.Double => scala.Unit,
    updateNumericObject: (scala.Double, js.Any, scala.Double) => scala.Unit,
    updateObject: (scala.Double, js.Any) => scala.Unit,
    updateRow: () => scala.Unit,
    updateShort: (scala.Double, scala.Double) => scala.Unit,
    updateString: (scala.Double, java.lang.String) => scala.Unit,
    updateTime: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Time) => scala.Unit,
    updateTimestamp: (scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.DateTime) => scala.Unit,
    wasNull: () => scala.Boolean
  ): ResultSet = {
    val __obj = js.Dynamic.literal(CursorName = CursorName, FetchDirection = FetchDirection, FetchSize = FetchSize, MetaData = MetaData, PropertySetInfo = PropertySetInfo, ResultSetConcurrency = ResultSetConcurrency, ResultSetType = ResultSetType, Row = Row, Statement = Statement, Warnings = Warnings, absolute = js.Any.fromFunction1(absolute), acquire = js.Any.fromFunction0(acquire), addEventListener = js.Any.fromFunction1(addEventListener), addPropertyChangeListener = js.Any.fromFunction2(addPropertyChangeListener), addVetoableChangeListener = js.Any.fromFunction2(addVetoableChangeListener), afterLast = js.Any.fromFunction0(afterLast), beforeFirst = js.Any.fromFunction0(beforeFirst), cancelRowUpdates = js.Any.fromFunction0(cancelRowUpdates), clearWarnings = js.Any.fromFunction0(clearWarnings), close = js.Any.fromFunction0(close), deleteRow = js.Any.fromFunction0(deleteRow), dispose = js.Any.fromFunction0(dispose), findColumn = js.Any.fromFunction1(findColumn), first = js.Any.fromFunction0(first), getArray = js.Any.fromFunction1(getArray), getBinaryStream = js.Any.fromFunction1(getBinaryStream), getBlob = js.Any.fromFunction1(getBlob), getBoolean = js.Any.fromFunction1(getBoolean), getByte = js.Any.fromFunction1(getByte), getBytes = js.Any.fromFunction1(getBytes), getCharacterStream = js.Any.fromFunction1(getCharacterStream), getClob = js.Any.fromFunction1(getClob), getDate = js.Any.fromFunction1(getDate), getDouble = js.Any.fromFunction1(getDouble), getFloat = js.Any.fromFunction1(getFloat), getInt = js.Any.fromFunction1(getInt), getLong = js.Any.fromFunction1(getLong), getMetaData = js.Any.fromFunction0(getMetaData), getObject = js.Any.fromFunction2(getObject), getPropertySetInfo = js.Any.fromFunction0(getPropertySetInfo), getPropertyValue = js.Any.fromFunction1(getPropertyValue), getRef = js.Any.fromFunction1(getRef), getRow = js.Any.fromFunction0(getRow), getShort = js.Any.fromFunction1(getShort), getStatement = js.Any.fromFunction0(getStatement), getString = js.Any.fromFunction1(getString), getTime = js.Any.fromFunction1(getTime), getTimestamp = js.Any.fromFunction1(getTimestamp), getWarnings = js.Any.fromFunction0(getWarnings), insertRow = js.Any.fromFunction0(insertRow), isAfterLast = js.Any.fromFunction0(isAfterLast), isBeforeFirst = js.Any.fromFunction0(isBeforeFirst), isFirst = js.Any.fromFunction0(isFirst), isLast = js.Any.fromFunction0(isLast), last = js.Any.fromFunction0(last), moveToCurrentRow = js.Any.fromFunction0(moveToCurrentRow), moveToInsertRow = js.Any.fromFunction0(moveToInsertRow), next = js.Any.fromFunction0(next), previous = js.Any.fromFunction0(previous), queryInterface = js.Any.fromFunction1(queryInterface), refreshRow = js.Any.fromFunction0(refreshRow), relative = js.Any.fromFunction1(relative), release = js.Any.fromFunction0(release), removeEventListener = js.Any.fromFunction1(removeEventListener), removePropertyChangeListener = js.Any.fromFunction2(removePropertyChangeListener), removeVetoableChangeListener = js.Any.fromFunction2(removeVetoableChangeListener), rowDeleted = js.Any.fromFunction0(rowDeleted), rowInserted = js.Any.fromFunction0(rowInserted), rowUpdated = js.Any.fromFunction0(rowUpdated), setPropertyValue = js.Any.fromFunction2(setPropertyValue), updateBinaryStream = js.Any.fromFunction3(updateBinaryStream), updateBoolean = js.Any.fromFunction2(updateBoolean), updateByte = js.Any.fromFunction2(updateByte), updateBytes = js.Any.fromFunction2(updateBytes), updateCharacterStream = js.Any.fromFunction3(updateCharacterStream), updateDate = js.Any.fromFunction2(updateDate), updateDouble = js.Any.fromFunction2(updateDouble), updateFloat = js.Any.fromFunction2(updateFloat), updateInt = js.Any.fromFunction2(updateInt), updateLong = js.Any.fromFunction2(updateLong), updateNull = js.Any.fromFunction1(updateNull), updateNumericObject = js.Any.fromFunction3(updateNumericObject), updateObject = js.Any.fromFunction2(updateObject), updateRow = js.Any.fromFunction0(updateRow), updateShort = js.Any.fromFunction2(updateShort), updateString = js.Any.fromFunction2(updateString), updateTime = js.Any.fromFunction2(updateTime), updateTimestamp = js.Any.fromFunction2(updateTimestamp), wasNull = js.Any.fromFunction0(wasNull))
  
    __obj.asInstanceOf[ResultSet]
  }
}

