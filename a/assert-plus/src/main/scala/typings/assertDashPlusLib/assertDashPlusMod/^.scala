package typings
package assertDashPlusLib.assertDashPlusMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("assert-plus", JSImport.Namespace)
@js.native
object ^ extends js.Object {
  def AssertionError(options: js.Any): scala.Unit = js.native
  def AssertionError(options: js.Any, message: java.lang.String): scala.Unit = js.native
  def array(arr: js.Array[_]): scala.Unit = js.native
  def array(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def arrayOfArray(arr: js.Array[js.Array[_]]): scala.Unit = js.native
  def arrayOfArray(arr: js.Array[js.Array[_]], message: java.lang.String): scala.Unit = js.native
  def arrayOfBool(arr: js.Array[scala.Boolean]): scala.Unit = js.native
  def arrayOfBool(arr: js.Array[scala.Boolean], message: java.lang.String): scala.Unit = js.native
  def arrayOfBuffer(arr: js.Array[nodeLib.Buffer]): scala.Unit = js.native
  def arrayOfBuffer(arr: js.Array[nodeLib.Buffer], message: java.lang.String): scala.Unit = js.native
  def arrayOfDate(arr: js.Array[stdLib.Date]): scala.Unit = js.native
  def arrayOfDate(arr: js.Array[stdLib.Date], message: java.lang.String): scala.Unit = js.native
  def arrayOfFinite(arr: js.Array[scala.Double]): scala.Unit = js.native
  def arrayOfFinite(arr: js.Array[scala.Double], message: java.lang.String): scala.Unit = js.native
  def arrayOfFunc(arr: js.Array[_]): scala.Unit = js.native
  def arrayOfFunc(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def arrayOfNumber(arr: js.Array[scala.Double]): scala.Unit = js.native
  def arrayOfNumber(arr: js.Array[scala.Double], message: java.lang.String): scala.Unit = js.native
  def arrayOfObject(arr: js.Array[_]): scala.Unit = js.native
  def arrayOfObject(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def arrayOfRegexp(arr: js.Array[stdLib.RegExp]): scala.Unit = js.native
  def arrayOfRegexp(arr: js.Array[stdLib.RegExp], message: java.lang.String): scala.Unit = js.native
  def arrayOfStream(arr: js.Array[nodeLib.streamMod.Stream]): scala.Unit = js.native
  def arrayOfStream(arr: js.Array[nodeLib.streamMod.Stream], message: java.lang.String): scala.Unit = js.native
  def arrayOfString(arr: js.Array[java.lang.String]): scala.Unit = js.native
  def arrayOfString(arr: js.Array[java.lang.String], message: java.lang.String): scala.Unit = js.native
  def arrayOfUuid(arr: js.Array[java.lang.String]): scala.Unit = js.native
  def arrayOfUuid(arr: js.Array[java.lang.String], message: java.lang.String): scala.Unit = js.native
  def bool(bool: scala.Boolean): scala.Unit = js.native
  def bool(bool: scala.Boolean, message: java.lang.String): scala.Unit = js.native
  def buffer(buffer: nodeLib.Buffer): scala.Unit = js.native
  def buffer(buffer: nodeLib.Buffer, message: java.lang.String): scala.Unit = js.native
  def date(date: stdLib.Date): scala.Unit = js.native
  def date(date: stdLib.Date, message: java.lang.String): scala.Unit = js.native
  def deepEqual[T](actual: T, expected: T): scala.Unit = js.native
  def deepEqual[T](actual: T, expected: T, message: java.lang.String): scala.Unit = js.native
  def doesNotThrow(block: js.Any): scala.Unit = js.native
  def doesNotThrow(block: js.Any, error: js.Any): scala.Unit = js.native
  def doesNotThrow(block: js.Any, error: js.Any, message: java.lang.String): scala.Unit = js.native
  def equal(actual: js.Any, expected: js.Any): scala.Unit = js.native
  def equal(actual: js.Any, expected: js.Any, message: java.lang.String): scala.Unit = js.native
  def fail(actual: js.Any, expected: js.Any, message: js.Any, operator: js.Any): scala.Unit = js.native
  def finite(finite: scala.Double): scala.Unit = js.native
  def finite(finite: scala.Double, message: java.lang.String): scala.Unit = js.native
  def func(func: js.Any): scala.Unit = js.native
  def func(func: js.Any, message: java.lang.String): scala.Unit = js.native
  def ifError(value: js.Any): scala.Unit = js.native
  def notDeepEqual(actual: js.Any, expected: js.Any): scala.Unit = js.native
  def notDeepEqual(actual: js.Any, expected: js.Any, message: java.lang.String): scala.Unit = js.native
  def notEqual(actual: js.Any, expected: js.Any): scala.Unit = js.native
  def notEqual(actual: js.Any, expected: js.Any, message: java.lang.String): scala.Unit = js.native
  def notStrictEqual(actual: js.Any, expected: js.Any): scala.Unit = js.native
  def notStrictEqual(actual: js.Any, expected: js.Any, message: java.lang.String): scala.Unit = js.native
  def number(number: scala.Double): scala.Unit = js.native
  def number(number: scala.Double, message: java.lang.String): scala.Unit = js.native
  def `object`(obj: js.Any): scala.Unit = js.native
  def `object`(obj: js.Any, message: java.lang.String): scala.Unit = js.native
  def ok(options: js.Any): scala.Unit = js.native
  def ok(options: js.Any, message: java.lang.String): scala.Unit = js.native
  def optionalArray(): scala.Unit = js.native
  def optionalArray(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArray(arr: js.Array[_]): scala.Unit = js.native
  def optionalArray(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfArray(): scala.Unit = js.native
  def optionalArrayOfArray(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfArray(arr: js.Array[js.Array[_]]): scala.Unit = js.native
  def optionalArrayOfArray(arr: js.Array[js.Array[_]], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfBool(): scala.Unit = js.native
  def optionalArrayOfBool(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfBool(arr: js.Array[scala.Boolean]): scala.Unit = js.native
  def optionalArrayOfBool(arr: js.Array[scala.Boolean], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfBuffer(): scala.Unit = js.native
  def optionalArrayOfBuffer(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfBuffer(arr: js.Array[nodeLib.Buffer]): scala.Unit = js.native
  def optionalArrayOfBuffer(arr: js.Array[nodeLib.Buffer], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfDate(): scala.Unit = js.native
  def optionalArrayOfDate(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfDate(arr: js.Array[stdLib.Date]): scala.Unit = js.native
  def optionalArrayOfDate(arr: js.Array[stdLib.Date], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfFinite(): scala.Unit = js.native
  def optionalArrayOfFinite(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfFinite(arr: js.Array[scala.Double]): scala.Unit = js.native
  def optionalArrayOfFinite(arr: js.Array[scala.Double], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfFunc(): scala.Unit = js.native
  def optionalArrayOfFunc(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfFunc(arr: js.Array[_]): scala.Unit = js.native
  def optionalArrayOfFunc(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfNumber(): scala.Unit = js.native
  def optionalArrayOfNumber(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfNumber(arr: js.Array[scala.Double]): scala.Unit = js.native
  def optionalArrayOfNumber(arr: js.Array[scala.Double], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfObject(): scala.Unit = js.native
  def optionalArrayOfObject(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfObject(arr: js.Array[_]): scala.Unit = js.native
  def optionalArrayOfObject(arr: js.Array[_], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfRegexp(): scala.Unit = js.native
  def optionalArrayOfRegexp(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfRegexp(arr: js.Array[stdLib.RegExp]): scala.Unit = js.native
  def optionalArrayOfRegexp(arr: js.Array[stdLib.RegExp], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfStream(): scala.Unit = js.native
  def optionalArrayOfStream(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfStream(arr: js.Array[nodeLib.streamMod.Stream]): scala.Unit = js.native
  def optionalArrayOfStream(arr: js.Array[nodeLib.streamMod.Stream], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfString(): scala.Unit = js.native
  def optionalArrayOfString(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfString(arr: js.Array[java.lang.String]): scala.Unit = js.native
  def optionalArrayOfString(arr: js.Array[java.lang.String], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfUuid(): scala.Unit = js.native
  def optionalArrayOfUuid(arr: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalArrayOfUuid(arr: js.Array[java.lang.String]): scala.Unit = js.native
  def optionalArrayOfUuid(arr: js.Array[java.lang.String], message: java.lang.String): scala.Unit = js.native
  def optionalBool(): scala.Unit = js.native
  def optionalBool(bool: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalBool(bool: scala.Boolean): scala.Unit = js.native
  def optionalBool(bool: scala.Boolean, message: java.lang.String): scala.Unit = js.native
  def optionalBuffer(): scala.Unit = js.native
  def optionalBuffer(buffer: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalBuffer(buffer: nodeLib.Buffer): scala.Unit = js.native
  def optionalBuffer(buffer: nodeLib.Buffer, message: java.lang.String): scala.Unit = js.native
  def optionalDate(): scala.Unit = js.native
  def optionalDate(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalDate(options: stdLib.Date): scala.Unit = js.native
  def optionalDate(options: stdLib.Date, message: java.lang.String): scala.Unit = js.native
  def optionalFinite(): scala.Unit = js.native
  def optionalFinite(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalFinite(options: scala.Double): scala.Unit = js.native
  def optionalFinite(options: scala.Double, message: java.lang.String): scala.Unit = js.native
  def optionalFunc(options: js.Any): scala.Unit = js.native
  def optionalFunc(options: js.Any, message: java.lang.String): scala.Unit = js.native
  def optionalNumber(): scala.Unit = js.native
  def optionalNumber(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalNumber(options: scala.Double): scala.Unit = js.native
  def optionalNumber(options: scala.Double, message: java.lang.String): scala.Unit = js.native
  def optionalObject(options: js.Any): scala.Unit = js.native
  def optionalObject(options: js.Any, message: java.lang.String): scala.Unit = js.native
  def optionalRegexp(): scala.Unit = js.native
  def optionalRegexp(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalRegexp(options: stdLib.RegExp): scala.Unit = js.native
  def optionalRegexp(options: stdLib.RegExp, message: java.lang.String): scala.Unit = js.native
  def optionalStream(): scala.Unit = js.native
  def optionalStream(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalStream(options: nodeLib.streamMod.Stream): scala.Unit = js.native
  def optionalStream(options: nodeLib.streamMod.Stream, message: java.lang.String): scala.Unit = js.native
  def optionalString(): scala.Unit = js.native
  def optionalString(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalString(options: java.lang.String): scala.Unit = js.native
  def optionalString(options: java.lang.String, message: java.lang.String): scala.Unit = js.native
  def optionalUuid(): scala.Unit = js.native
  def optionalUuid(options: js.UndefOr[scala.Nothing], message: java.lang.String): scala.Unit = js.native
  def optionalUuid(options: java.lang.String): scala.Unit = js.native
  def optionalUuid(options: java.lang.String, message: java.lang.String): scala.Unit = js.native
  def regexp(regexp: stdLib.RegExp): scala.Unit = js.native
  def regexp(regexp: stdLib.RegExp, message: java.lang.String): scala.Unit = js.native
  def stream(stream: nodeLib.streamMod.Stream): scala.Unit = js.native
  def stream(stream: nodeLib.streamMod.Stream, message: java.lang.String): scala.Unit = js.native
  def strictEqual[T](actual: T, expected: T): scala.Unit = js.native
  def strictEqual[T](actual: T, expected: T, message: java.lang.String): scala.Unit = js.native
  def string(str: java.lang.String): scala.Unit = js.native
  def string(str: java.lang.String, message: java.lang.String): scala.Unit = js.native
  def throws(block: js.Any): scala.Unit = js.native
  def throws(block: js.Any, error: js.Any): scala.Unit = js.native
  def throws(block: js.Any, error: js.Any, message: java.lang.String): scala.Unit = js.native
  def uuid(uuid: java.lang.String): scala.Unit = js.native
  def uuid(uuid: java.lang.String, message: java.lang.String): scala.Unit = js.native
}

