package typings
package awsDashSdkLib.clientsDevicefarmMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Artifact extends js.Object {
  /**
    * The artifact's ARN.
    */
  var arn: js.UndefOr[AmazonResourceName] = js.undefined
  /**
    * The artifact's file extension.
    */
  var extension: js.UndefOr[String] = js.undefined
  /**
    * The artifact's name.
    */
  var name: js.UndefOr[Name] = js.undefined
  /**
    * The artifact's type. Allowed values include the following:   UNKNOWN: An unknown type.   SCREENSHOT: The screenshot type.   DEVICE_LOG: The device log type.   MESSAGE_LOG: The message log type.   VIDEO_LOG: The video log type.   RESULT_LOG: The result log type.   SERVICE_LOG: The service log type.   WEBKIT_LOG: The web kit log type.   INSTRUMENTATION_OUTPUT: The instrumentation type.   EXERCISER_MONKEY_OUTPUT: For Android, the artifact (log) generated by an Android fuzz test.   CALABASH_JSON_OUTPUT: The Calabash JSON output type.   CALABASH_PRETTY_OUTPUT: The Calabash pretty output type.   CALABASH_STANDARD_OUTPUT: The Calabash standard output type.   CALABASH_JAVA_XML_OUTPUT: The Calabash Java XML output type.   AUTOMATION_OUTPUT: The automation output type.   APPIUM_SERVER_OUTPUT: The Appium server output type.   APPIUM_JAVA_OUTPUT: The Appium Java output type.   APPIUM_JAVA_XML_OUTPUT: The Appium Java XML output type.   APPIUM_PYTHON_OUTPUT: The Appium Python output type.   APPIUM_PYTHON_XML_OUTPUT: The Appium Python XML output type.   EXPLORER_EVENT_LOG: The Explorer event log output type.   EXPLORER_SUMMARY_LOG: The Explorer summary log output type.   APPLICATION_CRASH_REPORT: The application crash report output type.   XCTEST_LOG: The XCode test output type.   VIDEO: The Video output type.   CUSTOMER_ARTIFACT:The Customer Artifact output type.   CUSTOMER_ARTIFACT_LOG: The Customer Artifact Log output type.   TESTSPEC_OUTPUT: The Test Spec Output type.  
    */
  var `type`: js.UndefOr[ArtifactType] = js.undefined
  /**
    * The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the artifact's file.
    */
  var url: js.UndefOr[URL] = js.undefined
}

object Artifact {
  @scala.inline
  def apply(
    arn: AmazonResourceName = null,
    extension: String = null,
    name: Name = null,
    `type`: ArtifactType = null,
    url: URL = null
  ): Artifact = {
    val __obj = js.Dynamic.literal()
    if (arn != null) __obj.updateDynamic("arn")(arn)
    if (extension != null) __obj.updateDynamic("extension")(extension)
    if (name != null) __obj.updateDynamic("name")(name)
    if (`type` != null) __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    if (url != null) __obj.updateDynamic("url")(url)
    __obj.asInstanceOf[Artifact]
  }
}

