package typings.awsDashSdk.clientsTransferMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait UpdateServerRequest extends js.Object {
  /**
    * The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server. With a VPC endpoint, your SFTP server isn't accessible over the public internet.
    */
  var EndpointDetails: js.UndefOr[typings.awsDashSdk.clientsTransferMod.EndpointDetails] = js.undefined
  /**
    * The type of endpoint that you want your SFTP server to connect to. You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, your SFTP server isn't accessible over the public internet. 
    */
  var EndpointType: js.UndefOr[typings.awsDashSdk.clientsTransferMod.EndpointType] = js.undefined
  /**
    * The RSA private key as generated by ssh-keygen -N "" -f my-new-server-key.  If you aren't planning to migrate existing users from an existing SFTP server to a new AWS SFTP server, don't update the host key. Accidentally changing a server's host key can be disruptive. For more information, see change-host-key in the AWS SFTP User Guide.  
    */
  var HostKey: js.UndefOr[typings.awsDashSdk.clientsTransferMod.HostKey] = js.undefined
  /**
    * This response parameter is an array containing all of the information required to call a customer's authentication API method.
    */
  var IdentityProviderDetails: js.UndefOr[typings.awsDashSdk.clientsTransferMod.IdentityProviderDetails] = js.undefined
  /**
    * A value that changes the AWS Identity and Access Management (IAM) role that allows Amazon S3 events to be logged in Amazon CloudWatch, turning logging on or off.
    */
  var LoggingRole: js.UndefOr[NullableRole] = js.undefined
  /**
    * A system-assigned unique identifier for an SFTP server instance that the user account is assigned to.
    */
  var ServerId: typings.awsDashSdk.clientsTransferMod.ServerId
}

object UpdateServerRequest {
  @scala.inline
  def apply(
    ServerId: ServerId,
    EndpointDetails: EndpointDetails = null,
    EndpointType: EndpointType = null,
    HostKey: HostKey = null,
    IdentityProviderDetails: IdentityProviderDetails = null,
    LoggingRole: NullableRole = null
  ): UpdateServerRequest = {
    val __obj = js.Dynamic.literal(ServerId = ServerId)
    if (EndpointDetails != null) __obj.updateDynamic("EndpointDetails")(EndpointDetails)
    if (EndpointType != null) __obj.updateDynamic("EndpointType")(EndpointType.asInstanceOf[js.Any])
    if (HostKey != null) __obj.updateDynamic("HostKey")(HostKey)
    if (IdentityProviderDetails != null) __obj.updateDynamic("IdentityProviderDetails")(IdentityProviderDetails)
    if (LoggingRole != null) __obj.updateDynamic("LoggingRole")(LoggingRole)
    __obj.asInstanceOf[UpdateServerRequest]
  }
}

