package typings.awsDashSdk.clientsRedshiftMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait ModifyEventSubscriptionMessage extends js.Object {
  /**
    * A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled 
    */
  var Enabled: js.UndefOr[BooleanOptional] = js.undefined
  /**
    * Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security
    */
  var EventCategories: js.UndefOr[EventCategoriesList] = js.undefined
  /**
    * Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    */
  var Severity: js.UndefOr[String] = js.undefined
  /**
    * The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    */
  var SnsTopicArn: js.UndefOr[String] = js.undefined
  /**
    * A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    */
  var SourceIds: js.UndefOr[SourceIdsList] = js.undefined
  /**
    * The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
    */
  var SourceType: js.UndefOr[String] = js.undefined
  /**
    * The name of the modified Amazon Redshift event notification subscription.
    */
  var SubscriptionName: String
}

object ModifyEventSubscriptionMessage {
  @scala.inline
  def apply(
    SubscriptionName: String,
    Enabled: js.UndefOr[BooleanOptional] = js.undefined,
    EventCategories: EventCategoriesList = null,
    Severity: String = null,
    SnsTopicArn: String = null,
    SourceIds: SourceIdsList = null,
    SourceType: String = null
  ): ModifyEventSubscriptionMessage = {
    val __obj = js.Dynamic.literal(SubscriptionName = SubscriptionName)
    if (!js.isUndefined(Enabled)) __obj.updateDynamic("Enabled")(Enabled)
    if (EventCategories != null) __obj.updateDynamic("EventCategories")(EventCategories)
    if (Severity != null) __obj.updateDynamic("Severity")(Severity)
    if (SnsTopicArn != null) __obj.updateDynamic("SnsTopicArn")(SnsTopicArn)
    if (SourceIds != null) __obj.updateDynamic("SourceIds")(SourceIds)
    if (SourceType != null) __obj.updateDynamic("SourceType")(SourceType)
    __obj.asInstanceOf[ModifyEventSubscriptionMessage]
  }
}

