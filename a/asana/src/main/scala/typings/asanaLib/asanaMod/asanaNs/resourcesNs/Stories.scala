package typings
package asanaLib.asanaMod.asanaNs.resourcesNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A _story_ represents an activity associated with an object in the Asana
  * system. Stories are generated by the system whenever users take actions such
  * as creating or assigning tasks, or moving tasks between projects. _Comments_
  * are also a form of user-generated story.
  *
  * Stories are a form of history in the system, and as such they are read-only.
  * Once generated, it is not possible to modify a story.
  * @class
  * @param {Dispatcher} dispatcher The API dispatcher
  */
@js.native
trait Stories extends Resource {
  /**
    * * Adds a comment to a task. The comment will be authored by the
    * * currently authenticated user, and timestamped when the server receives
    * * the request.
    * *
    * * Returns the full record for the new story added to the task.
    *   * @param {Number} task Globally unique identifier for the task.
    *   * @param {Object} data Data for the request
    *   * @param {String} data.text The plain text of the comment to add.
    *   * @param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
    *   * @return {Promise} The response from the API
    * @param task
    * @param data
    * @param dispatchOptions?
    * @return
    */
  def createOnTask(task: scala.Double, data: js.Any): bluebirdLib.bluebirdMod.namespaced[ResourceList[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.ShortType]] = js.native
  def createOnTask(task: scala.Double, data: js.Any, dispatchOptions: js.Any): bluebirdLib.bluebirdMod.namespaced[ResourceList[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.ShortType]] = js.native
  /**
    * * Returns the full record for a single story.
    *   * @param {Number} story Globally unique identifier for the story.
    *   * @param {Object} [params] Parameters for the request
    *   * @param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
    *   * @return {Promise} The requested resource
    * @param story
    * @param params?
    * @param dispatchOptions?
    * @return
    */
  def findById(story: scala.Double): bluebirdLib.bluebirdMod.namespaced[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type] = js.native
  def findById(story: scala.Double, params: Params): bluebirdLib.bluebirdMod.namespaced[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type] = js.native
  def findById(story: scala.Double, params: Params, dispatchOptions: js.Any): bluebirdLib.bluebirdMod.namespaced[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type] = js.native
  /**
    * * Returns the compact records for all stories on the task.
    *   * @param {Number} task Globally unique identifier for the task.
    *   * @param {Object} [params] Parameters for the request
    *   * @param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
    *   * @return {Promise} The response from the API
    * @param task
    * @param params?
    * @param dispatchOptions?
    * @return
    */
  def findByTask(task: scala.Double): bluebirdLib.bluebirdMod.namespaced[ResourceList[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type]] = js.native
  def findByTask(task: scala.Double, params: PaginationParams): bluebirdLib.bluebirdMod.namespaced[ResourceList[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type]] = js.native
  def findByTask(task: scala.Double, params: PaginationParams, dispatchOptions: js.Any): bluebirdLib.bluebirdMod.namespaced[ResourceList[asanaLib.asanaMod.asanaNs.resourcesNs.StoriesNs.Type]] = js.native
}

