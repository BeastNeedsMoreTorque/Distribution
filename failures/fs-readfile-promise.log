[info ] InferredDependency.scala:20 Inferred dependencies Set(TsIdentLibrarySimple(node)) for TsIdentLibrarySimple(fs-readfile-promise) [id => fs-readfile-promise, phase => typescript, file => ../types/fs-readfile-promise/index.d.ts] 
[debug] PhaseRunner.scala:78 Success [id => fs-readfile-promise, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/fs-readfile-promise/index.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/fs-readfile-promise),TsIdentLibrarySimple(fs-readfile-promise)),TsIdentModule(None,List(fs-readfile-promise))) [id => fs-readfile-promise, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(fs-readfile-promise)) [id => fs-readfile-promise, phase => typescript] 
[warn ] Phase1ReadTypescript.scala:190 Processing TsIdentLibrarySimple(fs-readfile-promise) [id => fs-readfile-promise, phase => typescript] 
[warn ] QualifyReferences.scala:47 Couldn't qualify TsTypeRef(TsQIdent(List(TsIdentSimple(PathLike))),List()), defaulting to any [id => fs-readfile-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclTypeAlias(PathType) / TsTypeUnion() / TsTypeRef())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Encoding) [id => fs-readfile-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclTypeAlias(OptionsType) / TsTypeUnion() / TsTypeObject())] 
[debug] PhaseRunner.scala:78 Success [id => fs-readfile-promise, phase => typescript] 
[warn ] Phase2ToScalaJs.scala:34 Processing TsIdentLibrarySimple(fs-readfile-promise) [id => fs-readfile-promise, phase => scala.js] 
[debug] PhaseRunner.scala:78 Success [id => fs-readfile-promise, phase => scala.js] 
[warn ] PhaseRunner.scala:64 Failed because of, [node => Compilation failed] [id => fs-readfile-promise, phase => build] 
[debug] PhaseRunner.scala:82 Failure, [node => Compilation failed] [id => fs-readfile-promise, phase => build] 
