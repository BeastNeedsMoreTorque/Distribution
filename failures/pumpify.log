[info ] InferredDependency.scala:20 Inferred dependencies Set(TsIdentLibrarySimple(node)) for TsIdentLibrarySimple(pumpify) [id => pumpify, phase => typescript, file => ../types/pumpify/index.d.ts] 
[debug] PhaseRunner.scala:78 Success [id => pumpify, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/pumpify/index.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/pumpify),TsIdentLibrarySimple(pumpify)),TsIdentModule(None,List(pumpify))) [id => pumpify, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(pumpify)) [id => pumpify, phase => typescript] 
[warn ] Phase1ReadTypescript.scala:190 Processing TsIdentLibrarySimple(pumpify) [id => pumpify, phase => typescript] 
[info ] ResolveTypeQueries.scala:94 Resolved TsTypeQuery(TsQIdent(List(TsIdentLibrarySimple(pumpify), TsIdentModule(None,List(pumpify)), TsIdentNamespace(Pumpify)))) [id => pumpify, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pumpify) / TsDeclNamespace(Pumpify) / TsDeclVar(obj) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:94 Resolved TsTypeQuery(TsQIdent(List(TsIdentLibrarySimple(pumpify), TsIdentModule(None,List(pumpify)), TsIdentNamespace(Pumpify)))) [id => pumpify, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pumpify) / TsDeclNamespace(Pumpify) / TsDeclFunction(ctor) / TsFunSig() / TsTypeQuery())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Ctor) [id => pumpify, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pumpify) / TsDeclVar(obj) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Ctor) [id => pumpify, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pumpify) / TsDeclFunction(ctor) / TsFunSig() / TsTypeObject())] 
[debug] PhaseRunner.scala:78 Success [id => pumpify, phase => typescript] 
[warn ] Phase2ToScalaJs.scala:34 Processing TsIdentLibrarySimple(pumpify) [id => pumpify, phase => scala.js] 
[info ] ImportType.scala:160 Failed type conversion: TsTypeQuery(TsQIdent(List(TsIdentLibrarySimple(pumpify), TsIdentModule(None,List(pumpify)), TsIdentNamespace(Pumpify)))) [id => pumpify, phase => scala.js, scope => TreeScope(TsParsedFile() / TsDeclInterface(Anon_Ctor) / TsMemberFunction(ctor) / TsTypeQuery())] 
[info ] ImportTree.scala:406 Dropping TsMemberProperty(NoComments,Default,TsIdentSimple(obj),Some(TsTypeQuery(TsQIdent(List(TsIdentLibrarySimple(pumpify), TsIdentModule(None,List(pumpify)), TsIdentNamespace(Pumpify))))),None,false,false,false) [id => pumpify, phase => scala.js, scope => TreeScope(TsParsedFile() / TsDeclInterface(Anon_Ctor) / TsMemberProperty(obj))] 
[info ] RemoveDuplicateInheritance.scala:55 Dropped parents QualifiedName(List(Name(nodeLib), Name(streamMod), Name(Duplex))) at Name(pumpifyLib) / Name(pumpifyMod) / Name(Pumpify) because allParentRefs = Set(TypeRef(QualifiedName(List(Name(nodeLib), Name(eventsMod), Name(EventEmitter))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(eventsMod), Name(internalNs), Name(EventEmitter))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(streamMod), Name(internalNs), Name(Duplex))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(NodeJSNs), Name(WritableStream))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(NodeJSNs), Name(EventEmitter))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(NodeJSNs), Name(ReadableStream))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(streamMod), Name(internalNs), Name(Writable))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(streamMod), Name(internal))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(streamMod), Name(internalNs), Name(Readable))),List(),NoComments), TypeRef(QualifiedName(List(Name(nodeLib), Name(streamMod), Name(Duplex))),List(),NoComments)) [id => pumpify, phase => scala.js, this => Name(pumpifyLib) / Name(pumpifyMod) / Name(Pumpify)] 
[debug] PhaseRunner.scala:78 Success [id => pumpify, phase => scala.js] 
[warn ] PhaseRunner.scala:64 Failed because of, [node => Compilation failed] [id => pumpify, phase => build] 
[debug] PhaseRunner.scala:82 Failure, [node => Compilation failed] [id => pumpify, phase => build] 
