[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => typescript] 
[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => typescript] 
[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => typescript] 
[debug] PhaseRunner.scala:86 Ignored [id => business-rules-engine, phase => typescript] 
[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine/Utils.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine),TsIdentLibrarySimple(business-rules-engine)),TsIdentModule(None,List(business-rules-engine, Utils))) [id => business-rules-engine, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine/Validation.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine),TsIdentLibrarySimple(business-rules-engine)),TsIdentModule(None,List(business-rules-engine, Validation))) [id => business-rules-engine, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine/index.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine),TsIdentLibrarySimple(business-rules-engine)),TsIdentModule(None,List(business-rules-engine))) [id => business-rules-engine, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(business-rules-engine)) [id => business-rules-engine, phase => typescript] 
[info ] Phase1ReadTypescript.scala:152 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine/node-validators.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/DefinitelyTyped/types/business-rules-engine),TsIdentLibrarySimple(business-rules-engine)),TsIdentModule(None,List(business-rules-engine, node-validators))) [id => business-rules-engine, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(business-rules-engine, node-validators)) [id => business-rules-engine, phase => typescript] 
[warn ] Phase1ReadTypescript.scala:190 Processing TsIdentLibrarySimple(business-rules-engine) [id => business-rules-engine, phase => typescript] 
[info ] PreferTypeAlias.scala:118 Simplified to function type alias [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclInterface(IErrorCustomMessage))] 
[info ] PreferTypeAlias.scala:118 Simplified to function type alias [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclInterface(IOptional))] 
[info ] PreferTypeAlias.scala:118 Simplified to function type alias [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclInterface(IValidate))] 
[info ] PreferTypeAlias.scala:118 Simplified to function type alias [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclInterface(IAsyncValidate))] 
[info ] ExpandCallables.scala:57 Expanded Optional into 1 methods [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(ValidationResult))] 
[info ] ExpandCallables.scala:57 Expanded Optional into 1 methods [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(CompositeValidationResult))] 
[info ] InferReturnTypes.scala:32 Could not infer return type [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(CompositeValidationResult) / TsMemberFunction(SetDirtyEx))] 
[info ] InferReturnTypes.scala:32 Could not infer return type [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(CompositeValidationResult) / TsMemberFunction(flattenErrors))] 
[info ] InferReturnTypes.scala:32 Could not infer return type [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(CompositeValidationResult) / TsMemberFunction(traverse))] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Number) [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(MessageLocalization) / TsMemberProperty(defaultMessages) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Number) [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(business-rules-engine) / TsDeclClass(MessageLocalization) / TsMemberProperty(ValidationMessages) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Number) [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(node-validation) / TsDeclClass(MessageLocalization) / TsMemberProperty(defaultMessages) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:30 Extracted anonymous interface TsIdentSimple(Anon_Number) [id => business-rules-engine, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(node-validation) / TsDeclClass(MessageLocalization) / TsMemberProperty(ValidationMessages) / TsTypeObject())] 
[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => typescript] 
[warn ] Phase2ToScalaJs.scala:34 Processing TsIdentLibrarySimple(business-rules-engine) [id => business-rules-engine, phase => scala.js] 
[info ] CompleteClass.scala:60 Completed implementations Vector(ForList, ValidatorFor, Validation, ValidationFor, CreateRule, CreateAbstractRule, RuleFor, CreateAbstractListRule) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(businessDashRulesDashEngineMod) / Name(AbstractValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(Name, ErrorCount, HasErrors, HasErrorsDirty, Children, ErrorMessage, Remove, Add) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(businessDashRulesDashEngineMod) / Name(CompositeValidationResult)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(ErrorMessage, HasError) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(businessDashRulesDashEngineMod) / Name(Error)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(ErrorMessage, HasError) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(businessDashRulesDashEngineMod) / Name(ValidationFailure)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(Name, ErrorCount, HasErrors, HasErrorsDirty, Children, ErrorMessage, Remove, Add) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(businessDashRulesDashEngineMod) / Name(ValidationResult)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAsync, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(ContainsValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(DateISOValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(DateValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(DigitValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(EmailValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(LettersOnlyValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(MaxLengthValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(MaxValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(MinLengthValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(MinValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(NumberValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(PatternValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(RangeLengthValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(RangeValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(RequiredValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(SignedDigitValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(StepValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(UrlValidator)] 
[info ] CompleteClass.scala:60 Completed implementations Vector(isAcceptable, isAcceptable) [id => business-rules-engine, phase => scala.js, this => Name(businessDashRulesDashEngineLib) / Name(nodeDashValidatorsMod) / Name(ZipCodeValidator)] 
[debug] PhaseRunner.scala:78 Success [id => business-rules-engine, phase => scala.js] 
[warn ] PhaseRunner.scala:64 Failed because of, [node => Compilation failed] [id => business-rules-engine, phase => build] 
[debug] PhaseRunner.scala:82 Failure, [node => Compilation failed] [id => business-rules-engine, phase => build] 
