[info ] ResolveExternalReferences.scala:82 Inferred augmented module None (TsIdentModule(None,List(react))) [file => ../core/types/index.d.ts, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(react)), id => @emotion/core] 
[debug] PhaseRunner.scala:82 Success [id => @emotion/core, phase => typescript] 
[info ] Phase1ReadTypescript.scala:163 Preprocessing TsHelperFile(InFile(/home/tso/tmp/tso-cache/npm/node_modules/@emotion/core/types/index.d.ts),FromFolder(InFolder(/home/tso/tmp/tso-cache/npm/node_modules/@emotion/core),TsIdentLibraryScoped(emotion,Some(core))),TsIdentModule(Some(emotion),List(core))) [id => @emotion/core, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(Some(emotion),List(core)) [id => @emotion/core, phase => typescript] 
[warn ] Phase1ReadTypescript.scala:205 Processing TsIdentLibraryScoped(emotion,Some(core)) [id => @emotion/core, phase => typescript] 
[info ] ResolveTypeQueries.scala:136 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(createElement)))) [id => @emotion/core, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(@emotion/core) / TsExport() / TsExporteeTree() / TsDeclVar(jsx) / TsTypeQuery())] 
[info ] PreferTypeAlias.scala:168 Could not simplify @emotion/core.@emotion/core.ArrayClassNamesArg to function type alias because of circular references Vector(TsQIdent(List(TsIdentLibraryScoped(emotion,Some(core)), TsIdentModule(Some(emotion),List(core)), TsIdentSimple(ArrayClassNamesArg)))) [id => @emotion/core, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(@emotion/core) / TsDeclTypeAlias(ClassNamesArg))] 
[debug] PhaseRunner.scala:82 Success [id => @emotion/core, phase => typescript] 
[warn ] Phase2ToScalaJs.scala:40 Processing @emotion/core [id => @emotion/core, phase => scala.js] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx) [id => @emotion/core, phase => scala.js, this => Name(atEmotionCoreLib) / Name(atEmotionCoreMod) / Name(jsx)] 
[debug] PhaseRunner.scala:82 Success [id => @emotion/core, phase => scala.js] 
[error] atEmotionCoreLibComponents.scala:15 object ^ does not take type parameters.,   def ClassNames[Theme]: reactLib.reactMod.ComponentType[atEmotionCoreLib.atEmotionCoreMod.ClassNamesProps[Theme]] = atEmotionCoreLib.atEmotionCoreMod.^[Theme].asInstanceOf[js.Dynamic].selectDynamic("ClassNames").asInstanceOf[reactLib.reactMod.ComponentType[atEmotionCoreLib.atEmotionCoreMod.ClassNamesProps[Theme]]] [id => @emotion/core, phase => build] 
[error] atEmotionCoreLibComponents.scala:17 object ^ does not take type parameters.,   def Global[Theme]: reactLib.reactMod.ComponentType[atEmotionCoreLib.atEmotionCoreMod.GlobalProps[Theme]] = atEmotionCoreLib.atEmotionCoreMod.^[Theme].asInstanceOf[js.Dynamic].selectDynamic("Global").asInstanceOf[reactLib.reactMod.ComponentType[atEmotionCoreLib.atEmotionCoreMod.GlobalProps[Theme]]] [id => @emotion/core, phase => build] 
[error] PhaseRunner.scala:86 Failure, [@emotion/core => Compilation failed] [id => @emotion/core, phase => build] 
[error] PhaseRunner.scala:86 Failure, [@emotion/core => Compilation failed] [id => @emotion/core, phase => publish] 
