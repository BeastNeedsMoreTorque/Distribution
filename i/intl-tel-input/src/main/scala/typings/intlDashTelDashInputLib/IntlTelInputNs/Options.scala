package typings
package intlDashTelDashInputLib.IntlTelInputNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._


trait Options extends js.Object {
  /**
       * Whether or not to allow the dropdown. If disabled, there is no dropdown
       * arrow, and the selected flag is not clickable. Also we display the
       * selected flag on the right instead because it is just a marker of state.
       */
  var allowDropdown: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * If there is just a dial code in the input: remove it on blur or submit,
       * and re-add it on focus. This is to prevent just a dial code getting
       * submitted with the form. Requires nationalMode to be set to false.
       */
  var autoHideDialCode: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * Set the input's placeholder to an example number for the selected country.
       * You can specify the number type using the numberType option.
       * If there is already a placeholder attribute set on the input then that
       * will take precedence. Requires the utilsScript option.
       */
  var autoPlaceholder: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * Change the placeholder generated by autoPlaceholder. Must return a string.
       */
  var customPlaceholder: js.UndefOr[
    js.Function2[
      /* selectedCountryPlaceholder */ java.lang.String, 
      /* selectedCountryData */ CountryData, 
      java.lang.String
    ]
  ] = js.undefined
  /**
       * Specify the container for the country dropdown (use a jQuery selector
       * e.g. "body"). This is useful when the input is within a scrolling element,
       * or an element with overflow: hidden. Wherever you put the dropdown it
       * will automatically close on the window scroll event to prevent positioning
       * issues. If you want it to close when a different element is scrolled
       * (such as the input's parent), simply listen for the that scroll event,
       * and trigger $(window).scroll() e.g.
       */
  var dropdownContainer: js.UndefOr[java.lang.String] = js.undefined
  /**
       * Don't display the countries you specify.
       */
  var excludeCountries: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /**
       * Format the input value during initialisation.
       */
  var formatOnInit: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * When setting initialCountry to "auto", you must use this option to
       * specify a custom function that looks up the user's location. Also note
       * that when instantiating the plugin, we now return a deferred object, so
       * you can use .done(callback) to know when initialisation requests like
       * this have completed.
       * Note that the callback must still be called in the event of an error.
       */
  var geoIpLookup: js.UndefOr[
    js.Function1[
      /* callback */ js.Function1[/* countryCode */ java.lang.String, scala.Unit], 
      scala.Unit
    ]
  ] = js.undefined
  /**
       * Set the initial country selection by specifying it's country code.
       * You can also set it to "auto", which will lookup the user's country based
       * on their IP address (requires the geoIpLookup option).
       * Note that the "auto" option will not update the country selection if the
       * input already contains a number. If you leave initialCountry blank,
       * it will default to the first country in the list.
       */
  var initialCountry: js.UndefOr[java.lang.String] = js.undefined
  /**
       * Allow users to enter national numbers (and not have to think about
       * international dial codes). Formatting, validation and placeholders still
       * work. Then you can use getNumber to extract a full international number.
       * This option now defaults to true, and it is recommended that you leave it
       * that way as it provides a better experience for the user.
       */
  var nationalMode: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * Display only the countries you specify.
       */
  var onlyCountries: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /**
       * Specify one of the keys from the global enum intlTelInputUtils.numberType
       * e.g. "FIXED_LINE" to set the number type to use for the placeholder.
       */
  var placeholderNumberType: js.UndefOr[
    intlDashTelDashInputLib.intlDashTelDashInputLibStrings.FIXED_LINE_OR_MOBILE | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.FIXED_LINE | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.MOBILE | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.PAGER | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.PERSONAL_NUMBER | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.PREMIUM_RATE | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.SHARED_COST | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.TOLL_FREE | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.UAN | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.UNKNOWN | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.VOICEMAIL | intlDashTelDashInputLib.intlDashTelDashInputLibStrings.VOIP
  ] = js.undefined
  /**
       * Specify the countries to appear at the top of the list.
       */
  var preferredCountries: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /**
       * Display the country dial code next to the selected flag so it's not part
       * of the typed number. Note that this will disable nationalMode because
       * technically we are dealing with international numbers, but with the
       * dial code separated.
       */
  var separateDialCode: js.UndefOr[scala.Boolean] = js.undefined
  /**
       * Enable formatting/validation etc. by specifying the path to the included
       * utils.js script, which is fetched only when the page has finished loading
       * (on window.load) to prevent blocking. When instantiating the plugin,
       * we return a deferred object, so you can use .done(callback) to know when
       * initialisation requests like this have finished. Note that if you're
       * lazy loading the plugin script itself (intlTelInput.js) this will not
       * work and you will need to use the loadUtils method instead.
       */
  var utilsScript: js.UndefOr[java.lang.String] = js.undefined
}

