package typings
package igniteDashUiLib

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait JQuery extends js.Object {
  @JSName("data")
  def data_igBaseChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igBaseChart): IgBaseChartMethods = js.native
  @JSName("data")
  def data_igBaseEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igBaseEditor): IgBaseEditorMethods = js.native
  @JSName("data")
  def data_igBrowseButton(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igBrowseButton): IgBrowseButtonMethods = js.native
  @JSName("data")
  def data_igBulletGraph(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igBulletGraph): IgBulletGraphMethods = js.native
  @JSName("data")
  def data_igButton(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igButton): IgButtonMethods = js.native
  @JSName("data")
  def data_igCategoryChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igCategoryChart): IgCategoryChartMethods = js.native
  @JSName("data")
  def data_igChartLegend(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igChartLegend): IgChartLegendMethods = js.native
  @JSName("data")
  def data_igCheckboxEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igCheckboxEditor): IgCheckboxEditorMethods = js.native
  @JSName("data")
  def data_igColorPicker(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igColorPicker): IgColorPickerMethods = js.native
  @JSName("data")
  def data_igColorPickerSplitButton(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igColorPickerSplitButton): IgColorPickerSplitButtonMethods = js.native
  @JSName("data")
  def data_igCombo(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igCombo): IgComboMethods = js.native
  @JSName("data")
  def data_igCurrencyEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igCurrencyEditor): IgCurrencyEditorMethods = js.native
  @JSName("data")
  def data_igDataChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igDataChart): IgDataChartMethods = js.native
  @JSName("data")
  def data_igDateEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igDateEditor): IgDateEditorMethods = js.native
  @JSName("data")
  def data_igDatePicker(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igDatePicker): IgDatePickerMethods = js.native
  @JSName("data")
  def data_igDialog(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igDialog): IgDialogMethods = js.native
  @JSName("data")
  def data_igDoughnutChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igDoughnutChart): IgDoughnutChartMethods = js.native
  @JSName("data")
  def data_igEditorFilter(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igEditorFilter): IgEditorFilterMethods = js.native
  @JSName("data")
  def data_igFinancialChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igFinancialChart): IgFinancialChartMethods = js.native
  @JSName("data")
  def data_igFunnelChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igFunnelChart): IgFunnelChartMethods = js.native
  @JSName("data")
  def data_igGrid(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGrid): IgGridMethods = js.native
  @JSName("data")
  def data_igGridAppendRowsOnDemand(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridAppendRowsOnDemand): IgGridAppendRowsOnDemandMethods = js.native
  @JSName("data")
  def data_igGridCellMerging(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridCellMerging): IgGridCellMergingMethods = js.native
  @JSName("data")
  def data_igGridColumnFixing(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridColumnFixing): IgGridColumnFixingMethods = js.native
  @JSName("data")
  def data_igGridColumnMoving(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridColumnMoving): IgGridColumnMovingMethods = js.native
  @JSName("data")
  def data_igGridFeatureChooser(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridFeatureChooser): IgGridFeatureChooserMethods = js.native
  @JSName("data")
  def data_igGridFeatureChooserPopover(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridFeatureChooserPopover): IgGridFeatureChooserPopoverMethods = js.native
  @JSName("data")
  def data_igGridFiltering(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridFiltering): IgGridFilteringMethods = js.native
  @JSName("data")
  def data_igGridGroupBy(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridGroupBy): IgGridGroupByMethods = js.native
  @JSName("data")
  def data_igGridHiding(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridHiding): IgGridHidingMethods = js.native
  @JSName("data")
  def data_igGridModalDialog(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridModalDialog): IgGridModalDialogMethods = js.native
  @JSName("data")
  def data_igGridMultiColumnHeaders(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridMultiColumnHeaders): IgGridMultiColumnHeadersMethods = js.native
  @JSName("data")
  def data_igGridPaging(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridPaging): IgGridPagingMethods = js.native
  @JSName("data")
  def data_igGridResizing(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridResizing): IgGridResizingMethods = js.native
  @JSName("data")
  def data_igGridResponsive(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridResponsive): IgGridResponsiveMethods = js.native
  @JSName("data")
  def data_igGridRowSelectors(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridRowSelectors): IgGridRowSelectorsMethods = js.native
  @JSName("data")
  def data_igGridSelection(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridSelection): IgGridSelectionMethods = js.native
  @JSName("data")
  def data_igGridSorting(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridSorting): IgGridSortingMethods = js.native
  @JSName("data")
  def data_igGridSummaries(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridSummaries): IgGridSummariesMethods = js.native
  @JSName("data")
  def data_igGridTooltips(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridTooltips): IgGridTooltipsMethods = js.native
  @JSName("data")
  def data_igGridUpdating(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igGridUpdating): IgGridUpdatingMethods = js.native
  @JSName("data")
  def data_igHierarchicalGrid(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igHierarchicalGrid): IgHierarchicalGridMethods = js.native
  @JSName("data")
  def data_igHtmlEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igHtmlEditor): IgHtmlEditorMethods = js.native
  @JSName("data")
  def data_igHtmlEditorPopover(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igHtmlEditorPopover): IgHtmlEditorPopoverMethods = js.native
  @JSName("data")
  def data_igImagePropertiesDialog(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igImagePropertiesDialog): IgImagePropertiesDialogMethods = js.native
  @JSName("data")
  def data_igLayoutManager(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igLayoutManager): IgLayoutManagerMethods = js.native
  @JSName("data")
  def data_igLinearGauge(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igLinearGauge): IgLinearGaugeMethods = js.native
  @JSName("data")
  def data_igLinkPropertiesDialog(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igLinkPropertiesDialog): IgLinkPropertiesDialogMethods = js.native
  @JSName("data")
  def data_igLoading(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igLoading): IgLoadingMethods = js.native
  @JSName("data")
  def data_igMap(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igMap): IgMapMethods = js.native
  @JSName("data")
  def data_igMaskEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igMaskEditor): IgMaskEditorMethods = js.native
  @JSName("data")
  def data_igNotifier(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igNotifier): IgNotifierMethods = js.native
  @JSName("data")
  def data_igNumericEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igNumericEditor): IgNumericEditorMethods = js.native
  @JSName("data")
  def data_igPercentEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPercentEditor): IgPercentEditorMethods = js.native
  @JSName("data")
  def data_igPieChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPieChart): IgPieChartMethods = js.native
  @JSName("data")
  def data_igPivotDataSelector(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPivotDataSelector): IgPivotDataSelectorMethods = js.native
  @JSName("data")
  def data_igPivotGrid(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPivotGrid): IgPivotGridMethods = js.native
  @JSName("data")
  def data_igPivotView(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPivotView): IgPivotViewMethods = js.native
  @JSName("data")
  def data_igPopover(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igPopover): IgPopoverMethods = js.native
  @JSName("data")
  def data_igProgressBar(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igProgressBar): IgProgressBarMethods = js.native
  @JSName("data")
  def data_igQRCodeBarcode(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igQRCodeBarcode): IgQRCodeBarcodeMethods = js.native
  @JSName("data")
  def data_igRadialGauge(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igRadialGauge): IgRadialGaugeMethods = js.native
  @JSName("data")
  def data_igRadialMenu(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igRadialMenu): IgRadialMenuMethods = js.native
  @JSName("data")
  def data_igRating(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igRating): IgRatingMethods = js.native
  @JSName("data")
  def data_igResponsiveContainer(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igResponsiveContainer): IgResponsiveContainerMethods = js.native
  @JSName("data")
  def data_igScheduler(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igScheduler): IgSchedulerMethods = js.native
  @JSName("data")
  def data_igScroll(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igScroll): IgScrollMethods = js.native
  @JSName("data")
  def data_igShapeChart(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igShapeChart): IgShapeChartMethods = js.native
  @JSName("data")
  def data_igSlider(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igSlider): IgSliderMethods = js.native
  @JSName("data")
  def data_igSparkline(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igSparkline): IgSparklineMethods = js.native
  @JSName("data")
  def data_igSplitButton(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igSplitButton): IgSplitButtonMethods = js.native
  @JSName("data")
  def data_igSplitter(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igSplitter): IgSplitterMethods = js.native
  @JSName("data")
  def data_igSpreadsheet(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igSpreadsheet): IgSpreadsheetMethods = js.native
  @JSName("data")
  def data_igTablePropertiesDialog(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTablePropertiesDialog): IgTablePropertiesDialogMethods = js.native
  @JSName("data")
  def data_igTextEditor(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTextEditor): IgTextEditorMethods = js.native
  @JSName("data")
  def data_igTileManager(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTileManager): IgTileManagerMethods = js.native
  @JSName("data")
  def data_igTimePicker(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTimePicker): IgTimePickerMethods = js.native
  @JSName("data")
  def data_igToolbar(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igToolbar): IgToolbarMethods = js.native
  @JSName("data")
  def data_igToolbarButton(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igToolbarButton): IgToolbarButtonMethods = js.native
  @JSName("data")
  def data_igTooltip(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTooltip): IgTooltipMethods = js.native
  @JSName("data")
  def data_igTree(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTree): IgTreeMethods = js.native
  @JSName("data")
  def data_igTreeGrid(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGrid): IgTreeGridMethods = js.native
  @JSName("data")
  def data_igTreeGridColumnFixing(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridColumnFixing): IgTreeGridColumnFixingMethods = js.native
  @JSName("data")
  def data_igTreeGridColumnMoving(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridColumnMoving): IgTreeGridColumnMovingMethods = js.native
  @JSName("data")
  def data_igTreeGridFiltering(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridFiltering): IgTreeGridFilteringMethods = js.native
  @JSName("data")
  def data_igTreeGridHiding(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridHiding): IgTreeGridHidingMethods = js.native
  @JSName("data")
  def data_igTreeGridMultiColumnHeaders(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridMultiColumnHeaders): IgTreeGridMultiColumnHeadersMethods = js.native
  @JSName("data")
  def data_igTreeGridPaging(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridPaging): IgTreeGridPagingMethods = js.native
  @JSName("data")
  def data_igTreeGridResizing(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridResizing): IgTreeGridResizingMethods = js.native
  @JSName("data")
  def data_igTreeGridRowSelectors(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridRowSelectors): IgTreeGridRowSelectorsMethods = js.native
  @JSName("data")
  def data_igTreeGridSelection(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridSelection): IgTreeGridSelectionMethods = js.native
  @JSName("data")
  def data_igTreeGridSorting(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridSorting): IgTreeGridSortingMethods = js.native
  @JSName("data")
  def data_igTreeGridTooltips(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridTooltips): IgTreeGridTooltipsMethods = js.native
  @JSName("data")
  def data_igTreeGridUpdating(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igTreeGridUpdating): IgTreeGridUpdatingMethods = js.native
  @JSName("data")
  def data_igUpload(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igUpload): IgUploadMethods = js.native
  @JSName("data")
  def data_igValidator(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igValidator): IgValidatorMethods = js.native
  @JSName("data")
  def data_igVideoPlayer(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igVideoPlayer): IgVideoPlayerMethods = js.native
  @JSName("data")
  def data_igWidget(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igWidget): IgWidgetMethods = js.native
  @JSName("data")
  def data_igZoomSlider(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igZoomSlider): IgZoomSliderMethods = js.native
  @JSName("data")
  def data_igZoombar(propertyName: igniteDashUiLib.igniteDashUiLibStrings.igZoombar): IgZoombarMethods = js.native
  @JSName("data")
  def data_mouseWrapper(propertyName: igniteDashUiLib.igniteDashUiLibStrings.mouseWrapper): MouseWrapperMethods = js.native
  def igBaseChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The height of the chart.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double = js.native
  /**
  	 * The height of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * The width of the chart.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double = js.native
  /**
  	 * The width of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igBaseChart(options: IgBaseChart): JQuery = js.native
  @JSName("igBaseChart")
  def igBaseChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igBaseChart")
  def igBaseChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igBaseChart")
  def igBaseChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igBaseChart")
  def igBaseChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igBaseChart")
  def igBaseChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igBaseChart")
  def igBaseChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igBaseChart")
  def igBaseChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igBaseChart")
  def igBaseChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgBaseChart): JQuery = js.native
  @JSName("igBaseChart")
  def igBaseChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igBaseChart")
  def igBaseChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  def igBaseEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur
  ): BlurEvent = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur,
    optionValue: BlurEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus
  ): IgFocusEvent = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus,
    optionValue: IgFocusEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown
  ): KeydownEvent = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown,
    optionValue: KeydownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress
  ): KeypressEvent = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress,
    optionValue: KeypressEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keyup event.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup
  ): KeyupEvent = js.native
  /**
  	 * Fired on keyup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup,
    optionValue: KeyupEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired on mousedown event.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown
  ): MousedownEvent = js.native
  /**
  	 * Fired on mousedown event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown,
    optionValue: MousedownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove
  ): MousemoveEvent = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove,
    optionValue: MousemoveEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout
  ): MouseoutEvent = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout,
    optionValue: MouseoutEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover
  ): MouseoverEvent = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover,
    optionValue: MouseoverEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseup event.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup
  ): MouseupEvent = js.native
  /**
  	 * Fired on mouseup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup,
    optionValue: MouseupEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged
  ): ValueChangedEvent = js.native
  /**
  	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged,
    optionValue: ValueChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 * It can be raised after loosing focus or on spin events.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging
  ): ValueChangingEvent = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 * It can be raised after loosing focus or on spin events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging,
    optionValue: ValueChangingEvent
  ): scala.Unit = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBaseEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igBaseEditor(options: IgBaseEditor): JQuery = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_editorContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorContainer): java.lang.String = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_field(methodName: igniteDashUiLib.igniteDashUiLibStrings.field): java.lang.String = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_hasFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFocus): scala.Boolean = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName): java.lang.String = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName, newValue: java.lang.String): java.lang.String = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgBaseEditor): JQuery = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus, delay: scala.Double): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): js.Object = js.native
  @JSName("igBaseEditor")
  def igBaseEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): scala.Unit = js.native
  def igBrowseButton(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoselect
  ): scala.Boolean = js.native
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoselect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
  	 */
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.container
  ): js.Any = js.native
  /**
  	 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.container,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleFiles
  ): scala.Boolean = js.native
  def igBrowseButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleFiles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igBrowseButton(options: IgBrowseButton): JQuery = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_attachFilePicker(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.attachFilePicker,
    e: js.Object,
    isHidden: js.Object
  ): scala.Unit = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_getFilePicker(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFilePicker): scala.Unit = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igBrowseButton")
  def igBrowseButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgBrowseButton): JQuery = js.native
  def igBulletGraph(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is raised when a label of the bullet graph is aligned along the scale.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
  	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel
  ): AlignLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the bullet graph is aligned along the scale.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
  	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel,
    optionValue: AlignLabelEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the backing of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the backing of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the inner extent of the bullet graph backing.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the inner extent of the bullet graph backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the outer extent of the bullet graph backing.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the outer extent of the bullet graph backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of the backing.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of the backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the backing outline.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the backing outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the font.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font
  ): java.lang.String = js.native
  /**
  	 * Gets  the brush to use for the label font.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the label font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when a label of the bullet graph is formatted.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the bullet graph widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
  	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel
  ): FormatLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the bullet graph is formatted.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the bullet graph widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
  	 * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel,
    optionValue: FormatLabelEvent
  ): scala.Unit = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether the scale is inverted.
  	 * When the scale is inverted the direction in which the scale values increase is right to left.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScaleInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets a value indicating whether the scale is inverted.
  	 * When the scale is inverted the direction in which the scale values increase is right to left.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScaleInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
  	 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
  	 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to start adding labels, added to the scale's MinimumValue.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPostInitial
  ): scala.Double = js.native
  /**
  	 * A value to start adding labels, added to the scale's MinimumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPostInitial,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPreTerminal
  ): scala.Double = js.native
  /**
  	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPreTerminal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum value of the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the maximum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the minimum value of the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the minimum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the minor tickmarks.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the minor tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of minor tickmarks to place between major tickmarks.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount
  ): scala.Double = js.native
  /**
  	 * Sets the number of minor tickmarks to place between major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering minor ticks.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering minor ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the orientation of the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): java.lang.String = js.native
  /**
  	 * Sets the orientation of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for bullet graph ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for bullet graph ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for bullet graph outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for bullet graph outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the ranges' tooltip template.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeToolTipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets the ranges' tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeToolTipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the scale ranges to render on the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges
  ): js.Array[IgBulletGraphRange] = js.native
  /**
  	 * Sets the scale ranges to render on the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges,
    optionValue: js.Array[IgBulletGraphRange]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  the background brush for the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the background brush for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the background outline for the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the background outline for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the background outline thickness for the scale.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundThickness
  ): scala.Double = js.native
  /**
  	 * Sets the background outline thickness for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBackgroundThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether tooltips are enabled.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTip
  ): scala.Boolean = js.native
  /**
  	 * Gets  the time in milliseconds that tooltip appearance is delayed with.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTipTimeout
  ): scala.Double = js.native
  /**
  	 * Sets the time in milliseconds that tooltip appearance is delayed with.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTipTimeout,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets a value indicating whether tooltips are enabled.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTip,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the value indicated by the target value bar.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValue
  ): scala.Double = js.native
  /**
  	 * Get  the breadth of the target value element.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueBreadth
  ): scala.Double = js.native
  /**
  	 * Get or sets the breadth of the target value element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueBreadth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use when rendering the fill of the comparative marker.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use when rendering the fill of the comparative marker.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the name used for the target value. The name is displayed in the default target value tooltip.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueName
  ): java.lang.String = js.native
  /**
  	 * Sets the name used for the target value. The name is displayed in the default target value tooltip.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use when rendering the outline of the target value.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use when rendering the outline of the target value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the outline of the target value bar.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the outline of the target value bar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the target value's tooltip template.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueToolTipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets the target value's tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValueToolTipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the value indicated by the target value bar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the major tickmarks.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering ticks.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to start adding tickmarks, added to the scale's MinimumValue.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPostInitial
  ): scala.Double = js.native
  /**
  	 * A value to start adding tickmarks, added to the scale's MinimumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPostInitial,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPreTerminal
  ): scala.Double = js.native
  /**
  	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPreTerminal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of milliseconds over which changes to the bullet graph should be animated.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the number of milliseconds over which changes to the bullet graph should be animated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the value at which the bar ends.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double = js.native
  /**
  	 * Gets  the brush to use for the actual value element.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the actual value element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the name used for actual value.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueName
  ): java.lang.String = js.native
  /**
  	 * Sets the name used for actual value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of actual value element.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of actual value element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering single actual value element.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering single actual value element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the value's tooltip template.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueToolTipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets the value's tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueToolTipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the value at which the bar ends.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igBulletGraph(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igBulletGraph(options: IgBulletGraph): JQuery = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_addRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.addRange, value: js.Object): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): js.Object = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_getRangeNames(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRangeNames): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgBulletGraph): JQuery = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_removeRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeRange, value: js.Object): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  @JSName("igBulletGraph")
  def igBulletGraph_updateRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateRange, value: js.Object): scala.Unit = js.native
  def igButton(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerLabel
  ): scala.Boolean = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerLabel,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.css
  ): js.Any = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.css,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): js.Any = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.icons
  ): IgButtonIcons = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.icons,
    optionValue: IgButtonIcons
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelText
  ): java.lang.String = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.link
  ): IgButtonLink = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.link,
    optionValue: IgButtonLink
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onlyIcons
  ): scala.Boolean = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onlyIcons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): scala.Boolean = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): js.Any = js.native
  def igButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igButton(options: IgButton): JQuery = js.native
  @JSName("igButton")
  def igButton_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igButton")
  def igButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igButton")
  def igButton_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igButton")
  def igButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgButton): JQuery = js.native
  @JSName("igButton")
  def igButton_setTitle(methodName: igniteDashUiLib.igniteDashUiLibStrings.setTitle, title: js.Object): scala.Unit = js.native
  @JSName("igButton")
  def igButton_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igCategoryChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels
  ): scala.Boolean = js.native
  /**
  	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin around the chart content.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin around the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating
  ): CalloutStyleUpdatingEvent = js.native
  /**
  	 * Gets  if event annotations should be displayed.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets if event annotations should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating,
    optionValue: CalloutStyleUpdatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the content data for the callouts.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the content data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the collection of callout data to be annotated.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource
  ): js.Any = js.native
  /**
  	 * Sets the collection of callout data to be annotated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the label data for the callouts.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the label data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  if callouts should be displayed.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets if callouts should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the X data for the callouts.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the X data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the Y data for the callouts.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the Y data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the type of chart series to generate from the data.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType
  ): java.lang.String = js.native
  /**
  	 * Sets the type of chart series to generate from the data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a function for creating wrapped tooltip
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip
  ): js.Any = js.native
  /**
  	 * Sets a function for creating wrapped tooltip
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations are shown along the axis for crosshair values
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations are shown along the axis for crosshair values
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the crosshairs to be displayed.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode
  ): java.lang.String = js.native
  /**
  	 * Sets the crosshairs to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether crosshairs will snap to the nearest data point.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData
  ): scala.Boolean = js.native
  /**
  	 * Sets whether crosshairs will snap to the nearest data point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be excluded from consideration by the category chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations for the final value of each series is displayed on the axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations for the final value of each series is displayed on the axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The height of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double = js.native
  /**
  	 * The height of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the category should be highlighted when hovered
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isCategoryHighlightingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the category should be highlighted when hovered
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isCategoryHighlightingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be horizontally zoomed through user interactions.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be horizontally zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the item should be highlighted when hovered
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isItemHighlightingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the item should be highlighted when hovered
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isItemHighlightingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether animation of series plots is enabled when the chart is loading into view
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isTransitionInEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether animation of series plots is enabled when the chart is loading into view
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isTransitionInEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be vertically zoomed through user interactions.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be vertically zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource
  ): js.Any = js.native
  /**
  	 * Sets a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of the chart content.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): js.Any = js.native
  /**
  	 * Sets the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerCollisionAvoidance
  ): java.lang.String = js.native
  /**
  	 * Sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerCollisionAvoidance,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum number of markers displyed in the plot area of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount
  ): scala.Double = js.native
  /**
  	 * Sets the maximum number of markers displyed in the plot area of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes
  ): js.Any = js.native
  /**
  	 * Sets the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette used for coloring negative items of Waterfall chart type.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette used for coloring negative items of Waterfall chart type.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeOutlines
  ): js.Any = js.native
  /**
  	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged
  ): PropertyChangedEvent = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged,
    optionValue: PropertyChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution
  ): scala.Double = js.native
  /**
  	 * Sets the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of the chart content.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded
  ): SeriesAddedEvent = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded,
    optionValue: SeriesAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown
  ): SeriesPointerDownEvent = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown,
    optionValue: SeriesPointerDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter
  ): SeriesPointerEnterEvent = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter,
    optionValue: SeriesPointerEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave
  ): SeriesPointerLeaveEvent = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave,
    optionValue: SeriesPointerLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove
  ): SeriesPointerMoveEvent = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove,
    optionValue: SeriesPointerMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp
  ): SeriesPointerUpEvent = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp,
    optionValue: SeriesPointerUpEvent
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved
  ): SeriesRemovedEvent = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved,
    optionValue: SeriesRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display below the Title, above the plot area.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart subtitle
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display below the Title, above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display above the plot area.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart title
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the style of tooltip to be displayed.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType
  ): java.lang.String = js.native
  /**
  	 * Sets the style of tooltip to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): js.Any = js.native
  /**
  	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the names of tooltip templates
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates
  ): js.Any = js.native
  /**
  	 * Sets the names of tooltip templates
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of the chart content.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the duration used for animating series plots when the data is changing
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the duration used for animating series plots when the data is changing
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction
  ): js.Any = js.native
  /**
  	 * Sets the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the duration used for animating series plots when the chart is loading into view
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInDuration
  ): scala.Double = js.native
  /**
  	 * Sets the duration used for animating series plots when the chart is loading into view
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the easing function used for animating series plots when the chart is loading into view
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInEasingFunction
  ): js.Any = js.native
  /**
  	 * Sets the easing function used for animating series plots when the chart is loading into view
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the method that determines how to animate series plots when the chart is loading into view
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInMode
  ): java.lang.String = js.native
  /**
  	 * Sets the method that determines how to animate series plots when the chart is loading into view
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the arrival speed used for animating series plots when the chart is loading into view
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInSpeedType
  ): java.lang.String = js.native
  /**
  	 * Sets the arrival speed used for animating series plots when the chart is loading into view
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionInSpeedType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod
  ): scala.Double = js.native
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType
  ): java.lang.String = js.native
  /**
  	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting
  ): java.lang.String = js.native
  /**
  	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the widget of this control
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget
  ): js.Any = js.native
  /**
  	 * Sets the widget of this control
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The width of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double = js.native
  /**
  	 * The width of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Sets the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the X-axis and the bottom of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the X-axis and the bottom of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes an context object and returns a formatted label for the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the amount of space between adjacent categories for the X-axis.
  	 * The gap is silently clamped to the range [0, 1] when used.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisGap
  ): scala.Double = js.native
  /**
  	 * Sets the amount of space between adjacent categories for the X-axis.
  	 * The gap is silently clamped to the range [0, 1] when used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisGap,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed labels along the X-axis.
  	 * Gets  the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed labels along the X-axis.
  	 *  sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the format for labels along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of X-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of X-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of X-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the format for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed minor lines along the X-axis.
  	 * Gets  the set value is a factor that determines how the minor lines will be displayed.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed minor lines along the X-axis.
  	 *  sets the set value is a factor that determines how the minor lines will be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the amount of overlap between adjacent categories for the X-axis.
  	 * Gets  the overlap is silently clamped to the range [-1, 1] when used.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisOverlap
  ): scala.Double = js.native
  /**
  	 * Sets the amount of overlap between adjacent categories for the X-axis.
  	 *  sets the overlap is silently clamped to the range [-1, 1] when used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisOverlap,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the X-axis line.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the X-axis line.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display below the X-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Horizontal alignment of the X-axis title.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the X-axis title.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the X-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display below the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the Y-axis and the left edge of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the Y-axis and the left edge of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between each label and grid line along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval
  ): scala.Double = js.native
  /**
  	 * Sets the distance between each label and grid line along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the property or string from which the labels are derived.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of Y-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation
  ): java.lang.String = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of Y-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of Y-axis labels.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the property or string from which the labels are derived.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase
  ): scala.Double = js.native
  /**
  	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the maximum value of the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the maximum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the minimum value of the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the minimum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed minor lines along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed minor lines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the Y-axis line.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the Y-axis line.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display to the left of the Y-axis.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Vertical alignment of the Y-axis title.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the Y-axis title.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the Y-axis
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display to the left of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCategoryChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCategoryChart(options: IgCategoryChart): JQuery = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): scala.Unit = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgCategoryChart): JQuery = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igCategoryChart")
  def igCategoryChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  def igChartLegend(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of the legend.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of the legend.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseEnter
  ): LegendItemMouseEnterEvent = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseEnter,
    optionValue: LegendItemMouseEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeave
  ): LegendItemMouseLeaveEvent = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeave,
    optionValue: LegendItemMouseLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeftButtonDown
  ): LegendItemMouseLeftButtonDownEvent = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeftButtonDown,
    optionValue: LegendItemMouseLeftButtonDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeftButtonUp
  ): LegendItemMouseLeftButtonUpEvent = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
  	 * Function takes arguments evt and ui.
  	 * Use ui.legend to get reference to current legend object.
  	 * Use ui.chart to get reference to chart owner object.
  	 * Use ui.series to get reference to current series owner object.
  	 * Use ui.actualItemBrush to get legend item brush.
  	 * Use ui.actualSeriesBrush to get series owner brush.
  	 * Use ui.item to get reference to chart item related to event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemMouseLeftButtonUp,
    optionValue: LegendItemMouseLeftButtonUpEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * The swatch used to style this widget
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme
  ): java.lang.String = js.native
  /**
  	 * The swatch used to style this widget
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igChartLegend(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igChartLegend(options: IgChartLegend): JQuery = js.native
  @JSName("igChartLegend")
  def igChartLegend_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igChartLegend")
  def igChartLegend_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igChartLegend")
  def igChartLegend_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igChartLegend")
  def igChartLegend_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igChartLegend")
  def igChartLegend_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igChartLegend")
  def igChartLegend_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igChartLegend")
  def igChartLegend_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igChartLegend")
  def igChartLegend_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igChartLegend")
  def igChartLegend_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgChartLegend): JQuery = js.native
  @JSName("igChartLegend")
  def igChartLegend_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igCheckboxEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur
  ): BlurEvent = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur,
    optionValue: BlurEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the checkbox is checked.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checked
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the checkbox is checked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checked,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus
  ): IgFocusEvent = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus,
    optionValue: IgFocusEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a custom class on the checkbox. Custom image can be used this way.
  	 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.iconClass
  ): java.lang.String = js.native
  /**
  	 * /Sets a custom class on the checkbox. Custom image can be used this way.
  	 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.iconClass,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown
  ): KeydownEvent = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown,
    optionValue: KeydownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress
  ): KeypressEvent = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress,
    optionValue: KeypressEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keyup event.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup
  ): KeyupEvent = js.native
  /**
  	 * Fired on keyup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup,
    optionValue: KeyupEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired on mousedown event.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown
  ): MousedownEvent = js.native
  /**
  	 * Fired on mousedown event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown,
    optionValue: MousedownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove
  ): MousemoveEvent = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove,
    optionValue: MousemoveEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout
  ): MouseoutEvent = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout,
    optionValue: MouseoutEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover
  ): MouseoverEvent = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover,
    optionValue: MouseoverEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseup event.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup
  ): MouseupEvent = js.native
  /**
  	 * Fired on mouseup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup,
    optionValue: MouseupEvent
  ): scala.Unit = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): js.Any = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.size
  ): java.lang.String = js.native
  /**
  	 * /Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.size,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * Fired after the editor's value has been changed.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged
  ): ValueChangedEvent = js.native
  /**
  	 * Fired after the editor's value has been changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged,
    optionValue: ValueChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging
  ): ValueChangingEvent = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging,
    optionValue: ValueChangingEvent
  ): scala.Unit = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCheckboxEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igCheckboxEditor(options: IgCheckboxEditor): JQuery = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_editorContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorContainer): java.lang.String = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_field(methodName: igniteDashUiLib.igniteDashUiLibStrings.field): java.lang.String = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_hasFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFocus): scala.Boolean = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName): java.lang.String = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName, newValue: java.lang.String): java.lang.String = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgCheckboxEditor): JQuery = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus, delay: scala.Double): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle): scala.Unit = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): js.Object = js.native
  @JSName("igCheckboxEditor")
  def igCheckboxEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): java.lang.String = js.native
  def igColorPicker(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * The event is fired when a color is selected.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.color to get a reference to the color object.
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.colorSelected
  ): ColorSelectedEvent = js.native
  /**
  	 * The event is fired when a color is selected.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.color to get a reference to the color object.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.colorSelected,
    optionValue: ColorSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
  	 *             The array should contain arrays that contain the color values for every next row.
  	 *
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.colors
  ): java.lang.String = js.native
  /**
  	 * /Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
  	 *             The array should contain arrays that contain the color values for every next row.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.colors,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
  	 *             visually separated from the default colors. The array should contain the color values.
  	 *
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.standardColors
  ): js.Array[_] = js.native
  /**
  	 * /Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
  	 *             visually separated from the default colors. The array should contain the color values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.standardColors,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igColorPicker(options: IgColorPicker): JQuery = js.native
  def igColorPickerSplitButton(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired when the button is clicked.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.item to get a reference the igSplitButton element.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.click
  ): ClickEvent = js.native
  /**
  	 * Event fired when the button is clicked.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.item to get a reference the igSplitButton element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.click,
    optionValue: ClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the button is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed
  ): CollapsedEvent = js.native
  /**
  	 * Event fired after the button is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed,
    optionValue: CollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a button item is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing
  ): CollapsingEvent = js.native
  /**
  	 * Event fired before a button item is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing,
    optionValue: CollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/ the button default color value.
  	 *
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColor
  ): java.lang.String = js.native
  /**
  	 * /sets the button default color value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Default button item name.
  	 *
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultItemName
  ): java.lang.String = js.native
  /**
  	 * Default button item name.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultItemName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the button is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded
  ): ExpandedEvent = js.native
  /**
  	 * Event fired after the button is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded,
    optionValue: ExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a button item is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding
  ): ExpandingEvent = js.native
  /**
  	 * Event fired before a button item is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding,
    optionValue: ExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
  	 *
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hasDefaultIcon
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hasDefaultIcon,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Button items.
  	 *
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Array[_] = js.native
  /**
  	 * Button items.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets whether the default button will be switched when another button is selected.
  	 *
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDefaultEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the default button will be switched when another button is selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igColorPickerSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDefaultEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igColorPickerSplitButton(options: IgColorPickerSplitButton): JQuery = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse, e: js.Object): js.Object = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand, e: js.Object): js.Object = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgColorPickerSplitButton): JQuery = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_setColor(methodName: igniteDashUiLib.igniteDashUiLibStrings.setColor, color: java.lang.String): js.Object = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_switchToButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.switchToButton, button: js.Object): scala.Unit = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle, e: js.Object): js.Object = js.native
  @JSName("igColorPickerSplitButton")
  def igColorPickerSplitButton_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  @JSName("igColorPicker")
  def igColorPicker_colorFromElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.colorFromElement, $element: js.Object): java.lang.String = js.native
  @JSName("igColorPicker")
  def igColorPicker_colorTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.colorTable): js.Object = js.native
  @JSName("igColorPicker")
  def igColorPicker_customColorTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.customColorTable): js.Object = js.native
  @JSName("igColorPicker")
  def igColorPicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igColorPicker")
  def igColorPicker_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igColorPicker")
  def igColorPicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgColorPicker): JQuery = js.native
  @JSName("igColorPicker")
  def igColorPicker_selectColor(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectColor, color: java.lang.String): js.Object = js.native
  @JSName("igColorPicker")
  def igColorPicker_selectedColor(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedColor): java.lang.String = js.native
  @JSName("igColorPicker")
  def igColorPicker_standardColorsTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.standardColorsTable): js.Object = js.native
  def igCombo(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * If set to true:
  	 * 1. Allows custom value input only with single selection.
  	 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCustomValue
  ): scala.Boolean = js.native
  /**
  	 * If set to true:
  	 * 1. Allows custom value input only with single selection.
  	 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCustomValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationHideDuration
  ): scala.Double = js.native
  /**
  	 * /Sets hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationHideDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationShowDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationShowDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to autocomplete field from first matching item in list.
  	 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoComplete
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to autocomplete field from first matching item in list.
  	 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoComplete,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoSelectFirstMatch
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoSelectFirstMatch,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true, filtering and auto selection will be case-sensitive.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive
  ): scala.Boolean = js.native
  /**
  	 * If set to true, filtering and auto selection will be case-sensitive.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets title for html element which represent clear button.
  	 * Use option [locale.clearButtonTitle](ui.igcombo#options:locale.clearButtonTitle).
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.clearButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets title for html element which represent clear button.
  	 * Use option [locale.clearButtonTitle](ui.igcombo#options:locale.clearButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.clearButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to close drop-down list when control loses focus.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDownOnBlur
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to close drop-down list when control loses focus.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDownOnBlur,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDownOnSelect
  ): scala.Boolean = js.native
  /**
  	 * Sets ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDownOnSelect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding is performed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to igCombo performing the databinding.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding is performed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to igCombo performing the databinding.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding is complete.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo performing the data binding.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 * Use ui.success to see if the databinding was performed correctly.
  	 * Use ui.errorMessage to get the error message if the databinding failed.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding is complete.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo performing the data binding.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 * Use ui.success to see if the databinding was performed correctly.
  	 * Use ui.errorMessage to get the error message if the databinding failed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
  	 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
  	 * [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
  	 * [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
  	 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayInputChangeProcessing
  ): scala.Double = js.native
  /**
  	 * Sets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayInputChangeProcessing,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * If set to true, the container of the drop-down list is appended to the body.
  	 * If set to false, it is appended to the parent element of the combo.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * If set to true, the container of the drop-down list is appended to the body.
  	 * If set to false, it is appended to the parent element of the combo.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets title for html element which represent the drop-down button.
  	 * Use option [locale.dropDownButtonTitle](ui.igcombo#options:locale.dropDownButtonTitle).
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets title for html element which represent the drop-down button.
  	 * Use option [locale.dropDownButtonTitle](ui.igcombo#options:locale.dropDownButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after drop-down list was closed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use evt.originalEvent to obtain reference to event of browser.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed
  ): DropDownClosedEvent = js.native
  /**
  	 * Event which is raised after drop-down list was closed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use evt.originalEvent to obtain reference to event of browser.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed,
    optionValue: DropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before drop-down list is closed.
  	 *
  	 * Return false in order to cancel hide action.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing
  ): DropDownClosingEvent = js.native
  /**
  	 * Event which is raised before drop-down list is closed.
  	 *
  	 * Return false in order to cancel hide action.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing,
    optionValue: DropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnFocus
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnFocus,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after drop-down list was opened.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened
  ): DropDownOpenedEvent = js.native
  /**
  	 * Event which is raised after drop-down list was opened.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened,
    optionValue: DropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before drop-down list is opened.
  	 *
  	 * Return false in order to cancel drop-down action.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening
  ): DropDownOpeningEvent = js.native
  /**
  	 * Event which is raised before drop-down list is opened.
  	 *
  	 * Return false in order to cancel drop-down action.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening,
    optionValue: DropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets drop-down list orientation when open button is clicked.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets drop-down list orientation when open button is clicked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of drop-down list in pixels.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of drop-down list in pixels.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets whether the clear button should be rendered.
  	 * When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableClearButton
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the clear button should be rendered.
  	 * When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableClearButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey
  ): java.lang.String = js.native
  /**
  	 * /Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after filtering.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filtered
  ): FilteredEvent = js.native
  /**
  	 * Event which is raised after filtering.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filtered,
    optionValue: FilteredEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data filtering.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
  	 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filtering
  ): FilteringEvent = js.native
  /**
  	 * Gets/Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringCondition
  ): java.lang.String = js.native
  /**
  	 * /Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringCondition,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets filtering logic.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringLogic
  ): java.lang.String = js.native
  /**
  	 * /Sets filtering logic.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringLogic,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringType
  ): java.lang.String = js.native
  /**
  	 * /Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filteringType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data filtering.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
  	 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filtering,
    optionValue: FilteringEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets template used to render a footer in the drop-down list.
  	 * Notes:
  	 * 1. The template is rendered inside of DIV html element.
  	 * 2. The following variables can be used:
  	 * - {0}: Number of records in igCombo (view of dataSource)
  	 * - {1}: Number of records in dataSource
  	 * - {2}: Number of (filtered) records on server
  	 * - {3}: Number of all records on server
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerTemplate
  ): java.lang.String = js.native
  /**
  	 * /Sets template used to render a footer in the drop-down list.
  	 * Notes:
  	 * 1. The template is rendered inside of DIV html element.
  	 * 2. The following variables can be used:
  	 * - {0}: Number of records in igCombo (view of dataSource)
  	 * - {1}: Number of records in dataSource
  	 * - {2}: Number of (filtered) records on server
  	 * - {3}: Number of all records on server
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the format string that is used to format the text display values in the combo.
  	 * Valid options are:
  	 * "auto" (default) - uses automatic formatting for Date and number objects.
  	 * "none", "", or null - will disable formatting
  	 *
  	 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
  	 *
  	 * Custom format strings should match the data type in "textKey" column.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.format
  ): java.lang.String = js.native
  /**
  	 * /Sets the format string that is used to format the text display values in the combo.
  	 * Valid options are:
  	 * "auto" (default) - uses automatic formatting for Date and number objects.
  	 * "none", "", or null - will disable formatting
  	 *
  	 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
  	 *
  	 * Custom format strings should match the data type in "textKey" column.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.format,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets object specifying grouping feature options. The option has key and dir properties.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.grouping
  ): IgComboGrouping = js.native
  /**
  	 * /Sets object specifying grouping feature options. The option has key and dir properties.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.grouping,
    optionValue: IgComboGrouping
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate
  ): java.lang.String = js.native
  /**
  	 * /Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets condition used for highlighting of matching parts in items of drop-down list.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highlightMatchesMode
  ): java.lang.String = js.native
  /**
  	 * /Sets condition used for highlighting of matching parts in items of drop-down list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highlightMatchesMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
  	 * Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialSelectedItems
  ): js.Array[IgComboInitialSelectedItem] = js.native
  /**
  	 * /Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
  	 * Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialSelectedItems,
    optionValue: js.Array[IgComboInitialSelectedItem]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
  	 * More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemTemplate
  ): java.lang.String = js.native
  /**
  	 * /Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
  	 * More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after rendering of the combo items completes.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsRendered
  ): ItemsRenderedEvent = js.native
  /**
  	 * Event which is raised after rendering of the combo items completes.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsRendered,
    optionValue: ItemsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before rendering of the combo items is performed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsRendering
  ): ItemsRenderingEvent = js.native
  /**
  	 * Event which is raised before rendering of the combo items is performed.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsRendering,
    optionValue: ItemsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets container of variables which define load on demand functionality.
  	 * Notes:
  	 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
  	 * Selection is supported only for already loaded items.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadOnDemandSettings
  ): IgComboLoadOnDemandSettings = js.native
  /**
  	 * /Sets container of variables which define load on demand functionality.
  	 * Notes:
  	 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
  	 * Selection is supported only for already loaded items.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadOnDemandSettings,
    optionValue: IgComboLoadOnDemandSettings
  ): scala.Unit = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgComboLocale = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgComboLocale
  ): scala.Unit = js.native
  /**
  	 * Sets gets functionality mode.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Sets gets functionality mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiSelection
  ): IgComboMultiSelection = js.native
  /**
  	 * /Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiSelection,
    optionValue: IgComboMultiSelection
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
  	 * Use option [locale.noMatchFoundText](ui.igcombo#options:locale.noMatchFoundText).
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.noMatchFoundText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found.
  	 * Use option [locale.noMatchFoundText](ui.igcombo#options:locale.noMatchFoundText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.noMatchFoundText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets value that is displayed when input field is empty.
  	 * Use option [locale.placeHolder](ui.igcombo#options:locale.placeHolder).
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets value that is displayed when input field is empty.
  	 * Use option [locale.placeHolder](ui.igcombo#options:locale.placeHolder).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to prevent submitting form on enter key press.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to prevent submitting form on enter key press.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after rendering of the combo completes.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.element to get a reference to the main/top combo element.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event which is raised after rendering of the combo completes.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference to the combo performing rendering.
  	 * Use ui.element to get a reference to the main/top combo element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Specifies the HTTP verb to be used to issue the request.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * Specifies the HTTP verb to be used to issue the request.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType
  ): java.lang.String = js.native
  /**
  	 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to select items by space button press.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectItemBySpaceKey
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to select items by space button press.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectItemBySpaceKey,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after selection change.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.items to obtain reference to array of new selected items. That can be null.
  	 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged
  ): IgComboSelectionChangedEvent = js.native
  /**
  	 * Event which is raised after selection change.
  	 *
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.items to obtain reference to array of new selected items. That can be null.
  	 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged,
    optionValue: IgComboSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before selection change.
  	 *
  	 * Return false in order to cancel change.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
  	 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanging
  ): SelectionChangingEvent = js.native
  /**
  	 * Event which is raised before selection change.
  	 *
  	 * Return false in order to cancel change.
  	 * Function takes arguments evt and ui.
  	 * Use ui.owner to obtain reference to igCombo.
  	 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
  	 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanging,
    optionValue: SelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
  	 * Note: The keyboard will still show when the combo input is focused in editable mode.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
  	 * Note: The keyboard will still show when the combo input is focused in editable mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex for the field of the combo.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex for the field of the combo.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textKey
  ): java.lang.String = js.native
  /**
  	 * /Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets object which contains options supported by [igValidator](ui.igvalidator).
  	 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets object which contains options supported by [igValidator](ui.igvalidator).
  	 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueKey
  ): java.lang.String = js.native
  /**
  	 * /Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
  	 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
  	 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how many items should be shown at once.
  	 *    Notes:
  	 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * /Sets how many items should be shown at once.
  	 *    Notes:
  	 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
  	 *
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCombo(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igCombo(options: IgCombo): JQuery = js.native
  @JSName("igCombo")
  def igCombo_activeIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeIndex): scala.Double | js.Object = js.native
  @JSName("igCombo")
  def igCombo_activeIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeIndex, index: scala.Double): scala.Double | js.Object = js.native
  @JSName("igCombo")
  def igCombo_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igCombo")
  def igCombo_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igCombo")
  def igCombo_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igCombo")
  def igCombo_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igCombo")
  def igCombo_clearFiltering(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearFiltering): js.Object = js.native
  @JSName("igCombo")
  def igCombo_clearFiltering(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearFiltering, event: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_clearInput(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearInput): js.Object = js.native
  @JSName("igCombo")
  def igCombo_clearInput(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearInput, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_clearInput(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.clearInput,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_closeDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDown): js.Object = js.native
  @JSName("igCombo")
  def igCombo_closeDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDown, callback: js.Function): js.Object = js.native
  @JSName("igCombo")
  def igCombo_closeDropDown(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDown,
    callback: js.Function,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_comboWrapper(methodName: igniteDashUiLib.igniteDashUiLibStrings.comboWrapper): js.Object = js.native
  @JSName("igCombo")
  def igCombo_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): js.Object = js.native
  @JSName("igCombo")
  def igCombo_dataForElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataForElement, $element: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_dataForValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataForValue, value: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselect(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselect, $items: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselect(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselect, $items: js.Object, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselect(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselect,
    $items: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectAll): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectAll, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectAll(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectAll,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByIndex, index: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByIndex,
    index: js.Object,
    options: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByIndex,
    index: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByValue, value: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByValue,
    value: js.Object,
    options: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_deselectByValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectByValue,
    value: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igCombo")
  def igCombo_dropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDown): js.Object = js.native
  @JSName("igCombo")
  def igCombo_dropDownOpened(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened): scala.Boolean = js.native
  @JSName("igCombo")
  def igCombo_filter(methodName: igniteDashUiLib.igniteDashUiLibStrings.filter): js.Object = js.native
  @JSName("igCombo")
  def igCombo_filter(methodName: igniteDashUiLib.igniteDashUiLibStrings.filter, texts: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_filter(methodName: igniteDashUiLib.igniteDashUiLibStrings.filter, texts: js.Object, event: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_filterByExpressions(methodName: igniteDashUiLib.igniteDashUiLibStrings.filterByExpressions, expressions: js.Array[_]): js.Object = js.native
  @JSName("igCombo")
  def igCombo_filterByExpressions(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.filterByExpressions,
    expressions: js.Array[_],
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_filteredItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.filteredItems): js.Array[_] = js.native
  @JSName("igCombo")
  def igCombo_index(methodName: igniteDashUiLib.igniteDashUiLibStrings.index): js.Object = js.native
  @JSName("igCombo")
  def igCombo_index(methodName: igniteDashUiLib.igniteDashUiLibStrings.index, index: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_index(methodName: igniteDashUiLib.igniteDashUiLibStrings.index, index: js.Object, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_index(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.index,
    index: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_isIndexSelected(methodName: igniteDashUiLib.igniteDashUiLibStrings.isIndexSelected, index: js.Object): scala.Boolean = js.native
  @JSName("igCombo")
  def igCombo_isSelected(methodName: igniteDashUiLib.igniteDashUiLibStrings.isSelected, $item: js.Object): scala.Boolean = js.native
  @JSName("igCombo")
  def igCombo_isValueSelected(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValueSelected, value: js.Object): scala.Boolean = js.native
  @JSName("igCombo")
  def igCombo_items(methodName: igniteDashUiLib.igniteDashUiLibStrings.items): js.Array[_] = js.native
  @JSName("igCombo")
  def igCombo_itemsFromElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.itemsFromElement, $element: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_itemsFromIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.itemsFromIndex, index: scala.Double): js.Object = js.native
  @JSName("igCombo")
  def igCombo_itemsFromValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.itemsFromValue, value: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_list(methodName: igniteDashUiLib.igniteDashUiLibStrings.list): js.Object = js.native
  @JSName("igCombo")
  def igCombo_listItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.listItems): js.Object = js.native
  @JSName("igCombo")
  def igCombo_listScrollTop(methodName: igniteDashUiLib.igniteDashUiLibStrings.listScrollTop): scala.Double | js.Object = js.native
  @JSName("igCombo")
  def igCombo_listScrollTop(methodName: igniteDashUiLib.igniteDashUiLibStrings.listScrollTop, value: scala.Double): scala.Double | js.Object = js.native
  @JSName("igCombo")
  def igCombo_openDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.openDropDown): js.Object = js.native
  @JSName("igCombo")
  def igCombo_openDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.openDropDown, callback: js.Function): js.Object = js.native
  @JSName("igCombo")
  def igCombo_openDropDown(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.openDropDown,
    callback: js.Function,
    focusCombo: scala.Boolean
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_openDropDown(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.openDropDown,
    callback: js.Function,
    focusCombo: scala.Boolean,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igCombo")
  def igCombo_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igCombo")
  def igCombo_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgCombo): JQuery = js.native
  @JSName("igCombo")
  def igCombo_positionDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.positionDropDown): js.Object = js.native
  @JSName("igCombo")
  def igCombo_refreshValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.refreshValue): js.Object = js.native
  @JSName("igCombo")
  def igCombo_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, $items: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, $items: js.Object, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_select(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.select,
    $items: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_selectAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectAll): js.Object = js.native
  @JSName("igCombo")
  def igCombo_selectAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectAll, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_selectAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectAll, options: js.Object, event: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_selectedItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedItems): js.Array[_] = js.native
  @JSName("igCombo")
  def igCombo_text(methodName: igniteDashUiLib.igniteDashUiLibStrings.text): java.lang.String | js.Object = js.native
  @JSName("igCombo")
  def igCombo_text(methodName: igniteDashUiLib.igniteDashUiLibStrings.text, text: java.lang.String): java.lang.String | js.Object = js.native
  @JSName("igCombo")
  def igCombo_textInput(methodName: igniteDashUiLib.igniteDashUiLibStrings.textInput): js.Object = js.native
  @JSName("igCombo")
  def igCombo_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igCombo")
  def igCombo_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): js.Object = js.native
  @JSName("igCombo")
  def igCombo_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator, destroy: scala.Boolean): js.Object = js.native
  @JSName("igCombo")
  def igCombo_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): js.Object = js.native
  @JSName("igCombo")
  def igCombo_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, value: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, value: js.Object, options: js.Object): js.Object = js.native
  @JSName("igCombo")
  def igCombo_value(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.value,
    value: js.Object,
    options: js.Object,
    event: js.Object
  ): js.Object = js.native
  @JSName("igCombo")
  def igCombo_valueInput(methodName: igniteDashUiLib.igniteDashUiLibStrings.valueInput): js.Object = js.native
  def igCurrencyEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a string that is used as the currency symbol that is shown in display mode.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currencySymbol
  ): java.lang.String = js.native
  /**
  	 * /Sets a string that is used as the currency symbol that is shown in display mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currencySymbol,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups
  ): js.Array[_] = js.native
  /**
  	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Array[_] = js.native
  /**
  	 * /Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern
  ): java.lang.String = js.native
  /**
  	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.positivePattern
  ): java.lang.String = js.native
  /**
  	 * /Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.positivePattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): scala.Double = js.native
  /**
  	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * The number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igCurrencyEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igCurrencyEditor(options: IgCurrencyEditor): JQuery = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_currencySymbol(methodName: igniteDashUiLib.igniteDashUiLibStrings.currencySymbol): java.lang.String = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_currencySymbol(methodName: igniteDashUiLib.igniteDashUiLibStrings.currencySymbol, symbol: js.Object): java.lang.String = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex, number: scala.Double): scala.Double = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_getRegionalOption(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRegionalOption): java.lang.String = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_getSelectedText(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedText): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_getSelectionEnd(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionEnd): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_getSelectionStart(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionStart): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgCurrencyEditor): JQuery = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_selectListIndexDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexDown): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_selectListIndexUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexUp): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): scala.Double = js.native
  @JSName("igCurrencyEditor")
  def igCurrencyEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: scala.Double): scala.Double = js.native
  def igDataChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges
  ): scala.Boolean = js.native
  /**
  	 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.startIndex to get the start index for the current items.
  	 * Use ui.endIndex to get the end index for the current items.
  	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
  	 * Use ui.startDate if ui.hasDateRange is true.
  	 * Use ui.endDate if ui.hasDateRange is true.
  	 * Use ui.getItems to get all the items associated with the event (only if necessary).
  	 * Use ui.fill to get or set the fill to use for the current item.
  	 * Use ui.stroke to get or set the stroke to use for the current item.
  	 * Use ui.opacity to get or set the opacity to use for the current item.
  	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
  	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
  	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
  	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
  	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.assigningCategoryMarkerStyle
  ): AssigningCategoryMarkerStyleEvent = js.native
  /**
  	 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.startIndex to get the start index for the current items.
  	 * Use ui.endIndex to get the end index for the current items.
  	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
  	 * Use ui.startDate if ui.hasDateRange is true.
  	 * Use ui.endDate if ui.hasDateRange is true.
  	 * Use ui.getItems to get all the items associated with the event (only if necessary).
  	 * Use ui.fill to get or set the fill to use for the current item.
  	 * Use ui.stroke to get or set the stroke to use for the current item.
  	 * Use ui.opacity to get or set the opacity to use for the current item.
  	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
  	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
  	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
  	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
  	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.assigningCategoryMarkerStyle,
    optionValue: AssigningCategoryMarkerStyleEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.startIndex to get the start index for the current items.
  	 * Use ui.endIndex to get the end index for the current items.
  	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
  	 * Use ui.startDate if ui.hasDateRange is true.
  	 * Use ui.endDate if ui.hasDateRange is true.
  	 * Use ui.getItems to get all the items associated with the event (only if necessary).
  	 * Use ui.fill to get or set the fill to use for the current item.
  	 * Use ui.stroke to get or set the stroke to use for the current item.
  	 * Use ui.opacity to get or set the opacity to use for the current item.
  	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
  	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
  	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
  	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
  	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.assigningCategoryStyle
  ): AssigningCategoryStyleEvent = js.native
  /**
  	 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.startIndex to get the start index for the current items.
  	 * Use ui.endIndex to get the end index for the current items.
  	 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
  	 * Use ui.startDate if ui.hasDateRange is true.
  	 * Use ui.endDate if ui.hasDateRange is true.
  	 * Use ui.getItems to get all the items associated with the event (only if necessary).
  	 * Use ui.fill to get or set the fill to use for the current item.
  	 * Use ui.stroke to get or set the stroke to use for the current item.
  	 * Use ui.opacity to get or set the opacity to use for the current item.
  	 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
  	 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
  	 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
  	 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
  	 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.assigningCategoryStyle,
    optionValue: AssigningCategoryStyleEvent
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the automatic height to add when automatically adding margins to the chart.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginHeight
  ): scala.Double = js.native
  /**
  	 * Sets or gets the automatic height to add when automatically adding margins to the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the automatic width to add when automatically adding margins to the chart.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginWidth
  ): scala.Double = js.native
  /**
  	 * Sets or gets the automatic width to add when automatically adding margins to the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * An array of axis objects
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.axes
  ): js.Array[IgDataChartAxes] = js.native
  /**
  	 * An array of axis objects
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.axes,
    optionValue: js.Array[IgDataChartAxes]
  ): scala.Unit = js.native
  /**
  	 * Event fired when the range of and axis on the chart changes.
  	 * Function takes arguments evt and ui.
  	 * Use ui.axis to get reference to current chart axis object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newMaximumValue to get new maximum value.
  	 * Use ui.newMinimumValue to get new minimum value.
  	 * Use ui.oldMaximumValue to get old maximum value.
  	 * Use ui.oldMinimumValue to get old minimum value.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.axisRangeChanged
  ): AxisRangeChangedEvent = js.native
  /**
  	 * Event fired when the range of and axis on the chart changes.
  	 * Function takes arguments evt and ui.
  	 * Use ui.axis to get reference to current chart axis object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newMaximumValue to get new maximum value.
  	 * Use ui.newMinimumValue to get new minimum value.
  	 * Use ui.oldMaximumValue to get old maximum value.
  	 * Use ui.oldMinimumValue to get old minimum value.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.axisRangeChanged,
    optionValue: AxisRangeChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the bottom margin to use around the chart content in the canvas.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets or gets the bottom margin to use around the chart content in the canvas.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported
  ): BrowserNotSupportedEvent = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported,
    optionValue: BrowserNotSupportedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the Brushes property.
  	 * The brushes property defines the palette from which automatically assigned series brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the Brushes property.
  	 * The brushes property defines the palette from which automatically assigned series brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for circle markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of circle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.circleMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for circle markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of circle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.circleMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  which type of hit testing the series should use.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentHitTestMode
  ): java.lang.String = js.native
  /**
  	 * Sets which type of hit testing the series should use.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentHitTestMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the cross hair point (in world coordinates)
  	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
  	 * case the relevant crosshair line is hidden.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairPoint
  ): IgDataChartCrosshairPoint = js.native
  /**
  	 * Sets the cross hair point (in world coordinates)
  	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
  	 * case the relevant crosshair line is hidden.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairPoint,
    optionValue: IgDataChartCrosshairPoint
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultInteraction
  ): java.lang.String = js.native
  /**
  	 * Sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultInteraction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for diamond markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of diamond.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.diamondMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for diamond markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of diamond.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.diamondMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's DragModifier property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragModifier
  ): java.lang.String = js.native
  /**
  	 * Sets the current Chart's DragModifier property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragModifier,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Occurs just after the current Chart's grid area rectangle is changed.
  	 * The grid area may change as the result of the Chart being resized, or
  	 * of an axis being added or changing size, possibly in another Chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridAreaRectChanged
  ): GridAreaRectChangedEvent = js.native
  /**
  	 * Occurs just after the current Chart's grid area rectangle is changed.
  	 * The grid area may change as the result of the Chart being resized, or
  	 * of an axis being added or changing size, possibly in another Chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridAreaRectChanged,
    optionValue: GridAreaRectChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the GridMode property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridMode
  ): java.lang.String = js.native
  /**
  	 * Sets the GridMode property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for hexagon markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagonMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for hexagon markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagonMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for hexagram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for hexagram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The length, in milliseconds of the highlighting transition.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highlightingTransitionDuration
  ): scala.Double = js.native
  /**
  	 * The length, in milliseconds of the highlighting transition.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highlightingTransitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's horizontal zoomability.  This option is deprecated - please use `isHorizontalZoomEnabled` instead.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalZoomable
  ): scala.Boolean = js.native
  /**
  	 * Sets the current Chart's horizontal zoomability.  This option is deprecated - please use `isHorizontalZoomEnabled` instead.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalZoomable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's horizontal zoomability.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets the current Chart's horizontal zoomability.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isPagePanningAllowed
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isPagePanningAllowed,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSquare
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSquare,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set to true in order to disable any interactions with the plot surface.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSurfaceInteractionDisabled
  ): scala.Boolean = js.native
  /**
  	 * Set to true in order to disable any interactions with the plot surface.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSurfaceInteractionDisabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's vertical zoomability.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets the current Chart's vertical zoomability.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the left margin to use around the chart content in the canvas.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin
  ): scala.Double = js.native
  /**
  	 * Sets or gets the left margin to use around the chart content in the canvas.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): IgDataChartLegend = js.native
  /**
  	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: IgDataChartLegend
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the MarkerBrushes property.
  	 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes
  ): js.Any = js.native
  /**
  	 * Sets the MarkerBrushes property.
  	 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the MarkerOutlines property.
  	 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines
  ): js.Any = js.native
  /**
  	 * Sets the MarkerOutlines property.
  	 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the Outlines property.
  	 * The outlines property defines the palette from which automatically assigned series outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the Outlines property.
  	 * The outlines property defines the palette from which automatically assigned series outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The visibility of the OverviewPlusDetailPane.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overviewPlusDetailPaneVisibility
  ): java.lang.String = js.native
  /**
  	 * The visibility of the OverviewPlusDetailPane.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overviewPlusDetailPaneVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's PanModifier property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panModifier
  ): java.lang.String = js.native
  /**
  	 * Sets the current Chart's PanModifier property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panModifier,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pentagon markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagonMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pentagon markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagonMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pentragram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pentragram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used by the main canvas rendering context to apply a scale transform to it.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used by the main canvas rendering context to apply a scale transform to it.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush used as the background for the current Chart object's plot area.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.plotAreaBackground
  ): java.lang.String = js.native
  /**
  	 * Sets the brush used as the background for the current Chart object's plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.plotAreaBackground,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preferHigherResolutionTiles
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preferHigherResolutionTiles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the preview rectangle.
  	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
  	 * strokePath is hidden.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.previewRect
  ): js.Any = js.native
  /**
  	 * Sets the preview rectangle.
  	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
  	 * strokePath is hidden.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.previewRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event fired when the progressive loading state of the series has changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.currentStatus to get current status.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressiveLoadStatusChanged
  ): ProgressiveLoadStatusChangedEvent = js.native
  /**
  	 * Event fired when the progressive loading state of the series has changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.currentStatus to get current status.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressiveLoadStatusChanged,
    optionValue: ProgressiveLoadStatusChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pyramid markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pyramid.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pyramidMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pyramid markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of pyramid.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pyramidMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Raised when the chart's processing for an update has completed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.refreshCompleted
  ): RefreshCompletedEvent = js.native
  /**
  	 * Raised when the chart's processing for an update has completed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.refreshCompleted,
    optionValue: RefreshCompletedEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the right margin to use around the chart content in the canvas.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin
  ): scala.Double = js.native
  /**
  	 * Sets or gets the right margin to use around the chart content in the canvas.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * An array of series objects
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series
  ): js.Array[IgDataChartSeries] = js.native
  /**
  	 * Occurs when the cursors are moved over a series in this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesCursorMouseMove
  ): SeriesCursorMouseMoveEvent = js.native
  /**
  	 * Occurs when the cursors are moved over a series in this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesCursorMouseMove,
    optionValue: SeriesCursorMouseMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseEnter
  ): SeriesMouseEnterEvent = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseEnter,
    optionValue: SeriesMouseEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeave
  ): SeriesMouseLeaveEvent = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeave,
    optionValue: SeriesMouseLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonDown
  ): SeriesMouseLeftButtonDownEvent = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonDown,
    optionValue: SeriesMouseLeftButtonDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonUp
  ): SeriesMouseLeftButtonUpEvent = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonUp,
    optionValue: SeriesMouseLeftButtonUpEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer moves while over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseMove
  ): SeriesMouseMoveEvent = js.native
  /**
  	 * Occurs when the left mouse pointer moves while over an element of this chart.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseMove,
    optionValue: SeriesMouseMoveEvent
  ): scala.Unit = js.native
  /**
  	 * An array of series objects
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series,
    optionValue: js.Array[IgDataChartSeries]
  ): scala.Unit = js.native
  /**
  	 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.size
  ): js.Any = js.native
  /**
  	 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.size,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for square markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of square.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.squareMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for square markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of square.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.squareMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The subtitle to display for the component.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle
  ): java.lang.String = js.native
  /**
  	 * The bottom margin to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * The bottom margin to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The horizontal alignment to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * The horizontal alignment to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The left margin to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * The left margin to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The right margin to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin
  ): scala.Double = js.native
  /**
  	 * The right margin to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The color to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor
  ): js.Any = js.native
  /**
  	 * The color to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The css font property to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * The css font property to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The top margin to use for the subtitle.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin
  ): scala.Double = js.native
  /**
  	 * The top margin to use for the subtitle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The subtitle to display for the component.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The channel name to use to sync this chart with other charts.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncChannel
  ): java.lang.String = js.native
  /**
  	 * The channel name to use to sync this chart with other charts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncChannel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Whether the chart should be synchronized horizontally
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.synchronizeHorizontally
  ): scala.Boolean = js.native
  /**
  	 * Whether the chart should be synchronized horizontally
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.synchronizeHorizontally,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Whether the chart should be synchronized vertically
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.synchronizeVertically
  ): scala.Boolean = js.native
  /**
  	 * Whether the chart should be synchronized vertically
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.synchronizeVertically,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for tetragram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of tetragram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tetragramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for tetragram markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of tetragram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tetragramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The swatch used to style this widget
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme
  ): java.lang.String = js.native
  /**
  	 * The swatch used to style this widget
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The title to display for the component.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): java.lang.String = js.native
  /**
  	 * The bottom margin to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin
  ): scala.Double = js.native
  /**
  	 * The bottom margin to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The horizontal alignment to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * The horizontal alignment to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The left margin to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin
  ): scala.Double = js.native
  /**
  	 * The left margin to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The right margin to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin
  ): scala.Double = js.native
  /**
  	 * The right margin to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The color to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor
  ): js.Any = js.native
  /**
  	 * The color to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The css font property to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle
  ): java.lang.String = js.native
  /**
  	 * The css font property to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The top margin to use for the title.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin
  ): scala.Double = js.native
  /**
  	 * The top margin to use for the title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The title to display for the component.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the top margin to use around the chart content in the canvas.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin
  ): scala.Double = js.native
  /**
  	 * Sets or gets the top margin to use around the chart content in the canvas.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for triangle markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of triangle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangleMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for triangle markers on the chart.
  	 * Defines the marker template used for
  	 * series with a marker type of triangle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangleMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Handle this event in order to specify which columns the Typical price calculation is based on.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.count to get the number of positions that should be calculated from the start.
  	 * Use ui.position to get the beginning position that should be calculated from.
  	 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
  	 * Use ui.dataSource to get the data to use for the calculation.
  	 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.typicalBasedOn
  ): TypicalBasedOnEvent = js.native
  /**
  	 * Handle this event in order to specify which columns the Typical price calculation is based on.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.count to get the number of positions that should be calculated from the start.
  	 * Use ui.position to get the beginning position that should be calculated from.
  	 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
  	 * Use ui.dataSource to get the data to use for the calculation.
  	 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.typicalBasedOn,
    optionValue: TypicalBasedOnEvent
  ): scala.Unit = js.native
  /**
  	 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useTiledZooming
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useTiledZooming,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Chart's vertical zoomability.  This option is deprecated - please use `isVerticalZoomEnabled` instead.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalZoomable
  ): scala.Boolean = js.native
  /**
  	 * Sets the current Chart's vertical zoomability.  This option is deprecated - please use `isVerticalZoomEnabled` instead.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalZoomable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the position of the horizontal scroll.
  	 * This property is effectively a shortcut to the X position of the WindowRect property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionHorizontal
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the position of the horizontal scroll.
  	 * This property is effectively a shortcut to the X position of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionHorizontal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the position of the vertical scroll.
  	 * This property is effectively a shortcut to the Y position of the WindowRect property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionVertical
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the position of the vertical scroll.
  	 * This property is effectively a shortcut to the Y position of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionVertical,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A rectangle representing the portion of the chart currently in view.
  	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Occurs just after the current Chart's window rectangle is changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged
  ): WindowRectChangedEvent = js.native
  /**
  	 * Occurs just after the current Chart's window rectangle is changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged,
    optionValue: WindowRectChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
  	 * Decrease this value if you want to allow for further zooming into the viewer.
  	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectMinWidth
  ): scala.Double = js.native
  /**
  	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
  	 * Decrease this value if you want to allow for further zooming into the viewer.
  	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectMinWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A rectangle representing the portion of the chart currently in view.
  	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
  	 *
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResponse
  ): java.lang.String = js.native
  /**
  	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResponse,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the scale of the horizontal zoom.
  	 * This property is effectively a shortcut to the Width of the WindowRect property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScaleHorizontal
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the scale of the horizontal zoom.
  	 * This property is effectively a shortcut to the Width of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScaleHorizontal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the scale of the vertical zoom.
  	 * This property is effectively a shortcut to the Height of the WindowRect property.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScaleVertical
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the scale of the vertical zoom.
  	 * This property is effectively a shortcut to the Height of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScaleVertical,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomTileCacheSize
  ): scala.Double = js.native
  /**
  	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDataChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomTileCacheSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDataChart(options: IgDataChart): JQuery = js.native
  @JSName("igDataChart")
  def igDataChart_addItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem,
    item: js.Object,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_clearTileZoomCache(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearTileZoomCache): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_endTiledZoomingIfRunning(methodName: igniteDashUiLib.igniteDashUiLibStrings.endTiledZoomingIfRunning): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage, width: js.Object): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_exportImage(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage,
    width: js.Object,
    height: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_getActualInterval(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActualInterval, targetName: java.lang.String): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_getActualMaximumValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getActualMaximumValue,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_getActualMinimumValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getActualMinimumValue,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_getItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getItem,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getItemFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getItemFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getItemIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getItemIndex,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getItemIndexFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getItemIndexFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getItemSpan(methodName: igniteDashUiLib.igniteDashUiLibStrings.getItemSpan, targetName: java.lang.String): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesCategoryWidth(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesCategoryWidth,
    targetName: java.lang.String
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesHighValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesHighValue,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesHighValueFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesHighValueFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesHighValuePosition(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesHighValuePosition,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesHighValuePositionFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesHighValuePositionFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesLowValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesLowValue,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesLowValueFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesLowValueFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesLowValuePosition(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesLowValuePosition,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesLowValuePositionFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesLowValuePositionFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesOffsetValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesOffsetValue,
    targetName: java.lang.String
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValue,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValueBoundingBox(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValueBoundingBox,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValueBoundingBoxFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValueBoundingBoxFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValueFineGrainedBoundingBoxes(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValueFineGrainedBoundingBoxes,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValueFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValueFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValuePosition(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValuePosition,
    targetName: java.lang.String,
    worldPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_getSeriesValuePositionFromSeriesPixel(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getSeriesValuePositionFromSeriesPixel,
    targetName: java.lang.String,
    seriesPoint: js.Object,
    useInterpolation: scala.Boolean,
    skipUnknowns: scala.Boolean
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igDataChart")
  def igDataChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_moveCursorPoint(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveCursorPoint,
    targetName: java.lang.String,
    worldPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_notifyVisualPropertiesChanged(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyVisualPropertiesChanged,
    targetName: java.lang.String
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_option(methodName: igniteDashUiLib.igniteDashUiLibStrings.option): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igDataChart")
  def igDataChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igDataChart")
  def igDataChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgDataChart): JQuery = js.native
  @JSName("igDataChart")
  def igDataChart_print(methodName: igniteDashUiLib.igniteDashUiLibStrings.print): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_removeItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem,
    index: scala.Double,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_renderSeries(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.renderSeries,
    targetName: java.lang.String,
    animate: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_replayTransitionIn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.replayTransitionIn,
    targetName: java.lang.String
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_resetCachedEnhancedInterval(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.resetCachedEnhancedInterval,
    targetName: java.lang.String
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_resetZoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.resetZoom): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_scaleValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.scaleValue,
    targetName: java.lang.String,
    unscaledValue: scala.Double
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_scrollIntoView(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.scrollIntoView,
    targetName: java.lang.String,
    item: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_setItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem,
    index: scala.Double,
    item: js.Object,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_simulateHover(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.simulateHover,
    targetName: java.lang.String,
    seriesPoint: js.Object
  ): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_startTiledZoomingIfNecessary(methodName: igniteDashUiLib.igniteDashUiLibStrings.startTiledZoomingIfNecessary): scala.Unit = js.native
  @JSName("igDataChart")
  def igDataChart_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): js.Object = js.native
  @JSName("igDataChart")
  def igDataChart_unscaleValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unscaleValue,
    targetName: java.lang.String,
    scaledValue: scala.Double
  ): scala.Double = js.native
  @JSName("igDataChart")
  def igDataChart_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igDateEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold
  ): scala.Double = js.native
  /**
  	 * /Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets format of date while editor has no focus.
  	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
  	 * If value is not set, then the dateInputFormat is used automatically.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "y": year field without century and without leading zero
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "M": month field as digit without leading zero
  	 * "MM": month field as digit with leading zero
  	 * "MMM": month field as short month name
  	 * "MMMM": month field as long month name
  	 * "d": day of month field without leading zero
  	 * "dd": day of month field with leading zero
  	 * "ddd": day of the week as short name
  	 * "dddd": day of the week as long name
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 * "s": seconds field without leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets format of date while editor has no focus.
  	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
  	 * If value is not set, then the dateInputFormat is used automatically.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "y": year field without century and without leading zero
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "M": month field as digit without leading zero
  	 * "MM": month field as digit with leading zero
  	 * "MMM": month field as short month name
  	 * "MMMM": month field as long month name
  	 * "d": day of month field without leading zero
  	 * "dd": day of month field with leading zero
  	 * "ddd": day of the week as short name
  	 * "dddd": day of the week as long name
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 * "s": seconds field without leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets format of date while editor has focus.
  	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "date" is used automatically.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "MM": month field as digit with leading zero
  	 * "dd": day of month field with leading zero
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat
  ): java.lang.String = js.native
  /**
  	 * Format of date while editor has focus.
  	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "date" is used automatically.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "MM": month field as digit with leading zero
  	 * "dd": day of month field with leading zero
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
  	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
  	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset
  ): js.Any = js.native
  /**
  	 * /Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
  	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
  	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): stdLib.Date = js.native
  /**
  	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): stdLib.Date = js.native
  /**
  	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double | stdLib.Date = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * year: 4,
  	 * month: 3,
  	 * day: 10,
  	 * hours: 12,
  	 * minutes: 15,
  	 * seconds: 10,
  	 * milliseconds: 100
  	 * }
  	 * Time periods that don't have values use 1 as default.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): scala.Double | js.Object = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * year: 4,
  	 * month: 3,
  	 * day: 10,
  	 * hours: 12,
  	 * minutes: 15,
  	 * seconds: 10,
  	 * milliseconds: 100
  	 * }
  	 * Time periods that don't have values use 1 as default.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): stdLib.Date = js.native
  /**
  	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * /Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
  	 *
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift
  ): scala.Double = js.native
  /**
  	 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDateEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDateEditor(options: IgDateEditor): JQuery = js.native
  @JSName("igDateEditor")
  def igDateEditor_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_getSelectedDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedDate): stdLib.Date = js.native
  @JSName("igDateEditor")
  def igDateEditor_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igDateEditor")
  def igDateEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igDateEditor")
  def igDateEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igDateEditor")
  def igDateEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgDateEditor): JQuery = js.native
  @JSName("igDateEditor")
  def igDateEditor_selectDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectDate, date: stdLib.Date): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): java.lang.String = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igDateEditor")
  def igDateEditor_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): java.lang.String = js.native
  @JSName("igDateEditor")
  def igDateEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): stdLib.Date = js.native
  @JSName("igDateEditor")
  def igDateEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: stdLib.Date): stdLib.Date = js.native
  def igDatePicker(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold
  ): scala.Double = js.native
  /**
  	 * /Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets format of date while editor has no focus.
  	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
  	 * If value is not set, then the dateInputFormat is used automatically.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "y": year field without century and without leading zero
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "M": month field as digit without leading zero
  	 * "MM": month field as digit with leading zero
  	 * "MMM": month field as short month name
  	 * "MMMM": month field as long month name
  	 * "d": day of month field without leading zero
  	 * "dd": day of month field with leading zero
  	 * "ddd": day of the week as short name
  	 * "dddd": day of the week as long name
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 * "s": seconds field without leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets format of date while editor has no focus.
  	 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
  	 * If value is not set, then the dateInputFormat is used automatically.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "y": year field without century and without leading zero
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "M": month field as digit without leading zero
  	 * "MM": month field as digit with leading zero
  	 * "MMM": month field as short month name
  	 * "MMMM": month field as long month name
  	 * "d": day of month field without leading zero
  	 * "dd": day of month field with leading zero
  	 * "ddd": day of the week as short name
  	 * "dddd": day of the week as long name
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 * "s": seconds field without leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets format of date while editor has focus.
  	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "date" is used automatically.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "MM": month field as digit with leading zero
  	 * "dd": day of month field with leading zero
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat
  ): java.lang.String = js.native
  /**
  	 * Format of date while editor has focus.
  	 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
  	 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "date" is used automatically.
  	 * List of predefined regional flags:
  	 * "date": the datePattern member of regional option is used
  	 * "dateLong": the dateLongPattern member of regional option is used
  	 * "time": the timePattern member of regional option is used
  	 * "timeLong": the timeLongPattern member of regional option is used
  	 * "dateTime": the dateTimePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of date-flags when explicit date pattern is used:
  	 * "yy": year field without century and with leading zero
  	 * "yyyy": year field with leading zeros
  	 * "MM": month field as digit with leading zero
  	 * "dd": day of month field with leading zero
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * "ss": seconds field with leading zero
  	 * "f": milliseconds field in hundreds
  	 * "ff": milliseconds field in tenths
  	 * "fff": milliseconds field
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.datepickerOptions
  ): js.Any = js.native
  /**
  	 * /Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.datepickerOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
  	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
  	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset
  ): js.Any = js.native
  /**
  	 * /Sets time zone offset from UTC, in minutes. The client date values are displayed with this offset instead of the local one.
  	 * Note: It is recommended that this option is used with an UTC value (e.g. "2016-11-03T14:08:08.504Z") so the outcome is consistent.
  	 * Values with ambiguous time zone could map to unpredictable times depending on the user agent local zone.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down (calendar) is closed.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  /**
  	 * Fired after the drop down (calendar) is closed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  /**
  	 * This event is inherited from a parent widget and it's not triggered in igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is opened.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  /**
  	 * Fired after the drop down is opened.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is opening.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  /**
  	 * Fired when the drop down is opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * The ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired after a date selection in the calendar.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemSelected
  ): ItemSelectedEvent = js.native
  /**
  	 * Fired after a date selection in the calendar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemSelected,
    optionValue: ItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDatePicker
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): stdLib.Date = js.native
  /**
  	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): stdLib.Date = js.native
  /**
  	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double | stdLib.Date = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * year: 4,
  	 * month: 3,
  	 * day: 10,
  	 * hours: 12,
  	 * minutes: 15,
  	 * seconds: 10,
  	 * milliseconds: 100
  	 * }
  	 * Time periods that don't have values use 1 as default.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): scala.Double | js.Object = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets delta-value which is used to increment or decrement the editor date on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * year: 4,
  	 * month: 3,
  	 * day: 10,
  	 * hours: 12,
  	 * minutes: 15,
  	 * seconds: 10,
  	 * milliseconds: 100
  	 * }
  	 * Time periods that don't have values use 1 as default.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): stdLib.Date = js.native
  /**
  	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * /Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
  	 *
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift
  ): scala.Double = js.native
  /**
  	 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDatePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDatePicker(options: IgDatePicker): JQuery = js.native
  @JSName("igDatePicker")
  def igDatePicker_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): java.lang.String = js.native
  @JSName("igDatePicker")
  def igDatePicker_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Boolean = js.native
  @JSName("igDatePicker")
  def igDatePicker_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_getCalendar(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCalendar): java.lang.String = js.native
  @JSName("igDatePicker")
  def igDatePicker_getSelectedDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedDate): stdLib.Date = js.native
  @JSName("igDatePicker")
  def igDatePicker_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igDatePicker")
  def igDatePicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igDatePicker")
  def igDatePicker_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igDatePicker")
  def igDatePicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgDatePicker): JQuery = js.native
  @JSName("igDatePicker")
  def igDatePicker_selectDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectDate, date: stdLib.Date): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): java.lang.String = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igDatePicker")
  def igDatePicker_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): java.lang.String = js.native
  @JSName("igDatePicker")
  def igDatePicker_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): stdLib.Date = js.native
  @JSName("igDatePicker")
  def igDatePicker_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: stdLib.Date): stdLib.Date = js.native
  def igDialog(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is raised after the end of the animation when the dialog was closed or opened.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationEnded
  ): AnimationEndedEvent = js.native
  /**
  	 * Event which is raised after the end of the animation when the dialog was closed or opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationEnded,
    optionValue: AnimationEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when the dialog or its content loses focus.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur
  ): BlurEvent = js.native
  /**
  	 * Event which is raised when the dialog or its content loses focus.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur,
    optionValue: BlurEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeAnimation
  ): js.Any = js.native
  /**
  	 * /Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeAnimation,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the close button in the dialog. Use option [locale.closeButtonTitle](ui.igdialog#options:locale.closeButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the close button in the dialog. Use option [locale.closeButtonTitle](ui.igdialog#options:locale.closeButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog should close when Esc key is pressed.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnEscape
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog should close when Esc key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnEscape,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the container html element for the dialog.
  	 * That can be reference to html element, jquery selector or jquery object.
  	 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
  	 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.container
  ): js.Any = js.native
  /**
  	 * /Sets the container html element for the dialog.
  	 * That can be reference to html element, jquery selector or jquery object.
  	 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
  	 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.container,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the name of the css class which is applied to the main DIV element of the dialog.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogClass
  ): java.lang.String = js.native
  /**
  	 * The name of the css class which is applied to the main DIV element of the dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogClass,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog can be dragged by the user.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.draggable
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog can be dragged by the user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.draggable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
  	 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
  	 * and dialog-state will be set to normal if it was maximized.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDblclick
  ): js.Any = js.native
  /**
  	 * /Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
  	 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
  	 * and dialog-state will be set to normal if it was maximized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDblclick,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHeaderFocus
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHeaderFocus,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when the dialog or its content gets focus.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus
  ): IgFocusEvent = js.native
  /**
  	 * Event which is raised when the dialog or its content gets focus.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus,
    optionValue: IgFocusEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the footer of the dialog.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerText
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the footer of the dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the header of the dialog.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerText
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the header of the dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
  	 * In case of "%", the size of browser window is used and it has effect only on open action.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
  	 * In case of "%", the size of browser window is used and it has effect only on open action.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the name of the css class which is applied to the SPAN element located on the left side of the header.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.imageClass
  ): java.lang.String = js.native
  /**
  	 * The name of the css class which is applied to the SPAN element located on the left side of the header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.imageClass,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgDialogLocale = js.native
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgDialogLocale
  ): scala.Unit = js.native
  /**
  	 * Gets the jquery DIV object which is used as the main container for the dialog.
  	 * Notes:
  	 * 1. That object is optional and it should not contain any children.
  	 * 2. It should not have parent.
  	 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
  	 * 4. Change of that option is not supported.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mainElement
  ): stdLib.Element = js.native
  /**
  	 * The jquery DIV object which is used as the main container for the dialog.
  	 * Notes:
  	 * 1. That object is optional and it should not contain any children.
  	 * 2. It should not have parent.
  	 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
  	 * 4. Change of that option is not supported.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mainElement,
    optionValue: stdLib.Element
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight
  ): scala.Double = js.native
  /**
  	 * /Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth
  ): scala.Double = js.native
  /**
  	 * /Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the maximize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizeButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the maximize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizeButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimal height of the dialog in normal state.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minHeight
  ): scala.Double = js.native
  /**
  	 * /Sets the minimal height of the dialog in normal state.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimal width of the dialog in normal state.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth
  ): scala.Double = js.native
  /**
  	 * /Sets the minimal width of the dialog in normal state.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the minimize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimizeButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the minimize button in the dialog. Use option [locale.minimizeButtonTitle](ui.igdialog#options:locale.minimizeButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimizeButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the modal state of the dialog.
  	 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
  	 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modal
  ): scala.Boolean = js.native
  /**
  	 * /Sets the modal state of the dialog.
  	 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
  	 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modal,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.openAnimation
  ): js.Any = js.native
  /**
  	 * /Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.openAnimation,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the pin button in the dialog. Use option [locale.pinButtonTitle](ui.igdialog#options:locale.pinButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the pin button in the dialog. Use option [locale.pinButtonTitle](ui.igdialog#options:locale.pinButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog will be pinned on minimize.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinOnMinimized
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog will be pinned on minimize.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinOnMinimized,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog is pinned.
  	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
  	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
  	 * Notes:
  	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
  	 * 2. Pinned state is not supported for modal dialog.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinned
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog is pinned.
  	 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
  	 * The pinned dialog does not support modal state, maximized state and it can not be moved.
  	 * Notes:
  	 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
  	 * 2. Pinned state is not supported for modal dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pinned,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
  	 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position
  ): js.Any = js.native
  /**
  	 * /Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
  	 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog can be resized by the user.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizable
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog can be resized by the user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the restore button in the dialog.  Use option [locale.restoreButtonTitle](ui.igdialog#options:locale.restoreButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restoreButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the restore button in the dialog.  Use option [locale.restoreButtonTitle](ui.igdialog#options:locale.restoreButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restoreButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the close button in the dialog header should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCloseButton
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the close button in the dialog header should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCloseButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog footer should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog footer should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the dialog header should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the dialog header should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the maximize button in the dialog header should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showMaximizeButton
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the maximize button in the dialog header should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showMaximizeButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the minimize button in the dialog header should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showMinimizeButton
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the minimize button in the dialog header should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showMinimizeButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the pin button in the dialog header should be visible.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPinButton
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the pin button in the dialog header should be visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPinButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.state
  ): java.lang.String = js.native
  /**
  	 * Event which is raised after the state of the dialog was changed.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stateChanged
  ): StateChangedEvent = js.native
  /**
  	 * Event which is raised after the state of the dialog was changed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stateChanged,
    optionValue: StateChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before the state of the dialog was changed.
  	 * Return false in order to cancel the action.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stateChanging
  ): StateChangingEvent = js.native
  /**
  	 * Event which is raised before the state of the dialog was changed.
  	 * Return false in order to cancel the action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stateChanging,
    optionValue: StateChangingEvent
  ): scala.Unit = js.native
  /**
  	 * /Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.state,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the value for the tabIndex attribute applied to the main html element of the dialog.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets the value for the tabIndex attribute applied to the main html element of the dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.temporaryUrl
  ): java.lang.String = js.native
  /**
  	 * /Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.temporaryUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
  	 * Notes:
  	 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
  	 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
  	 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackFocus
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
  	 * Notes:
  	 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
  	 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
  	 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackFocus,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets/Sets the title/tooltip for the unpin button in the dialog. Use option [locale.unpinButtonTitle](ui.igdialog#options:locale.unpinButtonTitle).
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unpinButtonTitle
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * /Sets the title/tooltip for the unpin button in the dialog. Use option [locale.unpinButtonTitle](ui.igdialog#options:locale.unpinButtonTitle).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unpinButtonTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
  	 * In case of "%", the size of browser window is used and it has effect only on open action.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double | java.lang.String = js.native
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
  	 * In case of "%", the size of browser window is used and it has effect only on open action.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
  	 *
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zIndex
  ): scala.Double = js.native
  /**
  	 * /Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDialog(options: IgDialog): JQuery = js.native
  @JSName("igDialog")
  def igDialog_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igDialog")
  def igDialog_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igDialog")
  def igDialog_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igDialog")
  def igDialog_close(methodName: igniteDashUiLib.igniteDashUiLibStrings.close): js.Object = js.native
  @JSName("igDialog")
  def igDialog_close(methodName: igniteDashUiLib.igniteDashUiLibStrings.close, e: js.Object): js.Object = js.native
  @JSName("igDialog")
  def igDialog_content(methodName: igniteDashUiLib.igniteDashUiLibStrings.content): js.Object = js.native
  @JSName("igDialog")
  def igDialog_content(methodName: igniteDashUiLib.igniteDashUiLibStrings.content, newContent: java.lang.String): js.Object = js.native
  @JSName("igDialog")
  def igDialog_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igDialog")
  def igDialog_getTopModal(methodName: igniteDashUiLib.igniteDashUiLibStrings.getTopModal): js.Object = js.native
  @JSName("igDialog")
  def igDialog_isTopModal(methodName: igniteDashUiLib.igniteDashUiLibStrings.isTopModal): scala.Boolean = js.native
  @JSName("igDialog")
  def igDialog_mainElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.mainElement): stdLib.Element = js.native
  @JSName("igDialog")
  def igDialog_maximize(methodName: igniteDashUiLib.igniteDashUiLibStrings.maximize): js.Object = js.native
  @JSName("igDialog")
  def igDialog_minimize(methodName: igniteDashUiLib.igniteDashUiLibStrings.minimize): js.Object = js.native
  @JSName("igDialog")
  def igDialog_moveToTop(methodName: igniteDashUiLib.igniteDashUiLibStrings.moveToTop): js.Object = js.native
  @JSName("igDialog")
  def igDialog_moveToTop(methodName: igniteDashUiLib.igniteDashUiLibStrings.moveToTop, e: js.Object): js.Object = js.native
  @JSName("igDialog")
  def igDialog_open(methodName: igniteDashUiLib.igniteDashUiLibStrings.open): js.Object = js.native
  @JSName("igDialog")
  def igDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igDialog")
  def igDialog_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igDialog")
  def igDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgDialog): JQuery = js.native
  @JSName("igDialog")
  def igDialog_pin(methodName: igniteDashUiLib.igniteDashUiLibStrings.pin): js.Object = js.native
  @JSName("igDialog")
  def igDialog_restore(methodName: igniteDashUiLib.igniteDashUiLibStrings.restore): js.Object = js.native
  @JSName("igDialog")
  def igDialog_state(methodName: igniteDashUiLib.igniteDashUiLibStrings.state): java.lang.String = js.native
  @JSName("igDialog")
  def igDialog_state(methodName: igniteDashUiLib.igniteDashUiLibStrings.state, state: java.lang.String): java.lang.String = js.native
  @JSName("igDialog")
  def igDialog_unpin(methodName: igniteDashUiLib.igniteDashUiLibStrings.unpin): js.Object = js.native
  def igDoughnutChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  whether the slices can be exploded.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceExplosion
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the slices can be exploded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceExplosion,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the slices can be selected.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the slices can be selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported
  ): BrowserNotSupportedEvent = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported,
    optionValue: BrowserNotSupportedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Raised when the dimensions (center point or radius) of the doughnut hole change.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.holeDimensionsChanged
  ): HoleDimensionsChangedEvent = js.native
  /**
  	 * Raised when the dimensions (center point or radius) of the doughnut hole change.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.holeDimensionsChanged,
    optionValue: HoleDimensionsChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the inner extent of the doughnut chart. It is percent from the outer ring's radius.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether all surface interactions with the plot area should be disabled.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSurfaceInteractionDisabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether all surface interactions with the plot area should be disabled.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSurfaceInteractionDisabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the style used when a slice is selected.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedStyle
  ): js.Any = js.native
  /**
  	 * Sets the style used when a slice is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * An array of series objects.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series
  ): js.Array[IgDoughnutChartSeries] = js.native
  /**
  	 * An array of series objects.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series,
    optionValue: js.Array[IgDoughnutChartSeries]
  ): scala.Unit = js.native
  /**
  	 * Raised when the slice is clicked.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClick
  ): SliceClickEvent = js.native
  /**
  	 * Raised when the slice is clicked.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClick,
    optionValue: SliceClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igDoughnutChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igDoughnutChart(options: IgDoughnutChart): JQuery = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_addSeries(methodName: igniteDashUiLib.igniteDashUiLibStrings.addSeries, seriesObj: js.Object): scala.Unit = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_getCenterCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCenterCoordinates): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData, series: java.lang.String): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_getHoleRadius(methodName: igniteDashUiLib.igniteDashUiLibStrings.getHoleRadius): scala.Double = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgDoughnutChart): JQuery = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_removeSeries(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeSeries, seriesObj: js.Object): scala.Unit = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  @JSName("igDoughnutChart")
  def igDoughnutChart_updateSeries(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateSeries, value: js.Object): scala.Unit = js.native
  def igEditorFilter(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igEditorFilter(options: IgEditorFilter): JQuery = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_exitEditMode(methodName: igniteDashUiLib.igniteDashUiLibStrings.exitEditMode): scala.Unit = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_hasInvalidMessage(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasInvalidMessage): scala.Unit = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgEditorFilter): JQuery = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_remove(methodName: igniteDashUiLib.igniteDashUiLibStrings.remove): scala.Unit = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus, delay: js.Object, toggle: js.Object): scala.Unit = js.native
  @JSName("igEditorFilter")
  def igEditorFilter_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): scala.Unit = js.native
  def igFinancialChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
  	 * This will be the intersection of the user-defined range selector options, if any, and the range selector options which are automatically determined based on the range of data.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actualRangeSelectorOptions
  ): js.Any = js.native
  /**
  	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
  	 * This will be the intersection of the user-defined range selector options, if any, and the range selector options which are automatically determined based on the range of data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actualRangeSelectorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels
  ): scala.Boolean = js.native
  /**
  	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event raised by the chart when custom indicator data is needed from the application.
  	 * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applyCustomIndicators
  ): ApplyCustomIndicatorsEvent = js.native
  /**
  	 * Event raised by the chart when custom indicator data is needed from the application.
  	 * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applyCustomIndicators,
    optionValue: ApplyCustomIndicatorsEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin around the chart content.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin around the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating
  ): CalloutStyleUpdatingEvent = js.native
  /**
  	 * Gets  if event annotations should be displayed.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets if event annotations should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating,
    optionValue: CalloutStyleUpdatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the content data for the callouts.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the content data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the collection of callout data to be annotated.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource
  ): js.Any = js.native
  /**
  	 * Sets the collection of callout data to be annotated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the label data for the callouts.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the label data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  if callouts should be displayed.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets if callouts should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the X data for the callouts.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the X data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the Y data for the callouts.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the Y data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The type of price series to display in the main chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType
  ): java.lang.String = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartTypePickerTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartTypePickerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The type of price series to display in the main chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a function for creating wrapped tooltip
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip
  ): js.Any = js.native
  /**
  	 * Sets a function for creating wrapped tooltip
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations are shown along the axis for crosshair values
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations are shown along the axis for crosshair values
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the crosshairs to be displayed.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode
  ): java.lang.String = js.native
  /**
  	 * Sets the crosshairs to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether crosshairs will snap to the nearest data point.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData
  ): scala.Boolean = js.native
  /**
  	 * Sets whether crosshairs will snap to the nearest data point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The names of custom indicators to add to the chart.
  	 * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customIndicatorNames
  ): js.Any = js.native
  /**
  	 * The names of custom indicators to add to the chart.
  	 * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customIndicatorNames,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be excluded from consideration by the category chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations for the final value of each series is displayed on the axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations for the final value of each series is displayed on the axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  a legend displayed between toolbar and chart's plot area
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.financialChartLegend
  ): js.Any = js.native
  /**
  	 * Sets a legend displayed between toolbar and chart's plot area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.financialChartLegend,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The height of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double = js.native
  /**
  	 * The height of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for financial indicators.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorBrushes
  ): js.Any = js.native
  /**
  	 * Brushes to use for financial indicators.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The display types of financial indicators.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorDisplayTypes
  ): js.Any = js.native
  /**
  	 * The display types of financial indicators.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorDisplayTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The long period of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorLongPeriod
  ): scala.Double = js.native
  /**
  	 * The long period of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorLongPeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorMenuTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorMenuTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The multiplier of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorMultiplier
  ): scala.Double = js.native
  /**
  	 * The multiplier of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorMultiplier,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for negative elements in financial indicators.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorNegativeBrushes
  ): js.Any = js.native
  /**
  	 * Brushes to use for negative elements in financial indicators.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorNegativeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The period of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorPeriod
  ): scala.Double = js.native
  /**
  	 * The period of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorPeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The short period of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorShortPeriod
  ): scala.Double = js.native
  /**
  	 * The short period of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorShortPeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The signal period of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorSignalPeriod
  ): scala.Double = js.native
  /**
  	 * The signal period of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorSignalPeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The smoothing period of financial indicators, where applicable.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorSmoothingPeriod
  ): scala.Double = js.native
  /**
  	 * The smoothing period of financial indicators, where applicable.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorSmoothingPeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The outline or stroke thickness of financial indicators.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorThickness
  ): scala.Double = js.native
  /**
  	 * The outline or stroke thickness of financial indicators.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A collection indicating what financial indicator types to display on the Financial Chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorTypes
  ): js.Any = js.native
  /**
  	 * A collection indicating what financial indicator types to display on the Financial Chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indicatorTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be horizontally zoomed through user interactions.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be horizontally zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  weather or not a legend is visible between toolbar and chart's plot area
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLegendVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets weather or not a legend is visible between toolbar and chart's plot area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLegendVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A boolean property controlling the visibility of the toolbar.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isToolbarVisible
  ): scala.Boolean = js.native
  /**
  	 * A boolean property controlling the visibility of the toolbar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isToolbarVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be vertically zoomed through user interactions.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be vertically zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.
  	 * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isWindowSyncedToVisibleRange
  ): scala.Boolean = js.native
  /**
  	 * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.
  	 * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isWindowSyncedToVisibleRange,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource
  ): js.Any = js.native
  /**
  	 * Sets a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of the chart content.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): js.Any = js.native
  /**
  	 * Sets the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum number of markers displyed in the plot area of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount
  ): scala.Double = js.native
  /**
  	 * Sets the maximum number of markers displyed in the plot area of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes
  ): js.Any = js.native
  /**
  	 * Sets the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette used for coloring negative items of Waterfall chart type.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette used for coloring negative items of Waterfall chart type.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeOutlines
  ): js.Any = js.native
  /**
  	 * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for filling financial overlays.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayBrushes
  ): js.Any = js.native
  /**
  	 * Brushes to use for filling financial overlays.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for outlining financial overlays.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayOutlines
  ): js.Any = js.native
  /**
  	 * Brushes to use for outlining financial overlays.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayPickerTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayPickerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The outline thickness of financial overlays.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayThickness
  ): scala.Double = js.native
  /**
  	 * The outline thickness of financial overlays.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A collection indicating what financial overlay types to display on the Financial Chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayTypes
  ): js.Any = js.native
  /**
  	 * A collection indicating what financial overlay types to display on the Financial Chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overlayTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged
  ): PropertyChangedEvent = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged,
    optionValue: PropertyChangedEvent
  ): scala.Unit = js.native
  /**
  	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeSelectorOptions
  ): js.Any = js.native
  /**
  	 * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeSelectorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeSelectorTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeSelectorTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution
  ): scala.Double = js.native
  /**
  	 * Sets the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of the chart content.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded
  ): SeriesAddedEvent = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded,
    optionValue: SeriesAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown
  ): SeriesPointerDownEvent = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown,
    optionValue: SeriesPointerDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter
  ): SeriesPointerEnterEvent = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter,
    optionValue: SeriesPointerEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave
  ): SeriesPointerLeaveEvent = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave,
    optionValue: SeriesPointerLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove
  ): SeriesPointerMoveEvent = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove,
    optionValue: SeriesPointerMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp
  ): SeriesPointerUpEvent = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp,
    optionValue: SeriesPointerUpEvent
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved
  ): SeriesRemovedEvent = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved,
    optionValue: SeriesRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display below the Title, above the plot area.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart subtitle
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display below the Title, above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display above the plot area.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart title
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the style of tooltip to be displayed.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType
  ): java.lang.String = js.native
  /**
  	 * Sets the style of tooltip to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarHeight
  ): scala.Double = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): js.Any = js.native
  /**
  	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the names of tooltip templates
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates
  ): js.Any = js.native
  /**
  	 * Sets the names of tooltip templates
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of the chart content.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the duration used for animating series plots when the data is changing
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the duration used for animating series plots when the data is changing
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction
  ): js.Any = js.native
  /**
  	 * Sets the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod
  ): scala.Double = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType
  ): java.lang.String = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineTypePickerTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineTypePickerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting
  ): java.lang.String = js.native
  /**
  	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for filling volume series in the volume pane.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeBrushes
  ): js.Any = js.native
  /**
  	 * Brushes to use for filling volume series in the volume pane.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Brushes to use for outlining volume series in the volume pane.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeOutlines
  ): js.Any = js.native
  /**
  	 * Brushes to use for outlining volume series in the volume pane.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The outline thickness of volume series in the volume pane.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeThickness
  ): scala.Double = js.native
  /**
  	 * The outline thickness of volume series in the volume pane.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The type of series to display in the volume pane.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeType
  ): java.lang.String = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeTypePickerTemplate
  ): js.Any = js.native
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeTypePickerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The type of series to display in the volume pane.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the widget of this control
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget
  ): js.Any = js.native
  /**
  	 * Sets the widget of this control
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The width of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double = js.native
  /**
  	 * The width of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Sets the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the X-axis and the bottom of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the X-axis and the bottom of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes an context object and returns a formatted label for the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the format for labels along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of X-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of X-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of X-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the format for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum value on x-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMaximumValue
  ): js.Any = js.native
  /**
  	 * Sets maximum value on x-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMaximumValue,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  minimum value on x-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinimumValue
  ): js.Any = js.native
  /**
  	 * Sets minimum value on x-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinimumValue,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The scaling mode of the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMode
  ): java.lang.String = js.native
  /**
  	 * The scaling mode of the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the X-axis line.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the X-axis line.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display below the X-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Horizontal alignment of the X-axis title.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the X-axis title.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the X-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display below the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the Y-axis and the left edge of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the Y-axis and the left edge of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between each label and grid line along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval
  ): scala.Double = js.native
  /**
  	 * Sets the distance between each label and grid line along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the property or string from which the labels are derived.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of Y-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation
  ): java.lang.String = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of Y-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of Y-axis labels.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the property or string from which the labels are derived.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase
  ): scala.Double = js.native
  /**
  	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the maximum value of the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the maximum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the minimum value of the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the minimum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed minor lines along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed minor lines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The scaling mode of the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMode
  ): java.lang.String = js.native
  /**
  	 * The scaling mode of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the Y-axis line.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the Y-axis line.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display to the left of the Y-axis.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Vertical alignment of the Y-axis title.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the Y-axis title.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the Y-axis
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display to the left of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  type of series to display in the zoom slider pane.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderType
  ): java.lang.String = js.native
  /**
  	 * Sets type of series to display in the zoom slider pane.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  stroke brush of major gridlines on x-axis of the zoom slider pane
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderXAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  thickness of major gridlines on x-axis of the zoom slider pane
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderXAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets thickness of major gridlines on x-axis of the zoom slider pane
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderXAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets stroke brush of major gridlines on x-axis of the zoom slider pane
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFinancialChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomSliderXAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igFinancialChart(options: IgFinancialChart): JQuery = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): scala.Unit = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgFinancialChart): JQuery = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igFinancialChart")
  def igFinancialChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  def igFunnelChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  whether to allow slices to be selected.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to allow slices to be selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
  	 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
  	 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
  	 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
  	 * Example:
  	 * bezierPoints: "0.4 0.1 0.6 1"
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bezierPoints
  ): java.lang.String = js.native
  /**
  	 * Sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
  	 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
  	 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
  	 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
  	 * Example:
  	 * bezierPoints: "0.4 0.1 0.6 1"
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bezierPoints,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomEdgeWidth
  ): scala.Double = js.native
  /**
  	 * Sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomEdgeWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for coloring the slices.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for coloring the slices.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatInnerLabel
  ): js.Any = js.native
  /**
  	 * Sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatInnerLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatOuterLabel
  ): js.Any = js.native
  /**
  	 * Sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatOuterLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  how the heights of the funnel slices should be configured.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.funnelSliceDisplay
  ): java.lang.String = js.native
  /**
  	 * Sets how the heights of the funnel slices should be configured.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.funnelSliceDisplay,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The height of the chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double = js.native
  /**
  	 * The height of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the InnerLabel mapping property for the current series object.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the InnerLabel mapping property for the current series object.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the inner labels are visible.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets whether the inner labels are visible.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.innerLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  if the funnel should be rendered inverted.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets if the funnel should be rendered inverted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the Legend for the chart.
  	 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
  	 * If element was not found, then new DIV element is created and inserted into parent after chart element.
  	 * Value of that option can be an object with member "element", which contains the id of legend-element.
  	 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
  	 * Examples:
  	 * legend: {}
  	 * legend: "idOfDiv"
  	 * legend: { element: "idOfDiv", width: 300 }
  	 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): js.Any = js.native
  /**
  	 * Gets  the LegendItemBadgeTemplate to use for the legend items.
  	 * The provided object should have properties called render and optionally measure.
  	 * These are functions which will be called that will be called to handle the user specified custom rendering.
  	 * measure will be passed an object that looks like this:
  	 * {
  	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
  	 *     width: [if value is present, specifies the available width, user may set to desired width for content],
  	 *     height: [if value is present, specifies the available height, user may set to desired height for content],
  	 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
  	 *     data: [if present, represents the contextual data for this template]
  	 * }
  	 * render will be passed an object that looks like this:
  	 * {
  	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
  	 *     xPosition: [if present, specifies the x position at which to render the content],
  	 *     yPosition: [if present, specifies the y position at which to render the content],
  	 *     availableWidth: [if present, specifies the available width in which to render the content],
  	 *     availableHeight: [if present, specifies the available height in which to render the content],
  	 *     data: [if present, specifies the data that is in context for this content],
  	 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
  	 * }
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemBadgeTemplate
  ): js.Any = js.native
  /**
  	 * Sets the LegendItemBadgeTemplate to use for the legend items.
  	 * The provided object should have properties called render and optionally measure.
  	 * These are functions which will be called that will be called to handle the user specified custom rendering.
  	 * measure will be passed an object that looks like this:
  	 * {
  	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
  	 *     width: [if value is present, specifies the available width, user may set to desired width for content],
  	 *     height: [if value is present, specifies the available height, user may set to desired height for content],
  	 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
  	 *     data: [if present, represents the contextual data for this template]
  	 * }
  	 * render will be passed an object that looks like this:
  	 * {
  	 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
  	 *     xPosition: [if present, specifies the x position at which to render the content],
  	 *     yPosition: [if present, specifies the y position at which to render the content],
  	 *     availableWidth: [if present, specifies the available width in which to render the content],
  	 *     availableHeight: [if present, specifies the available height in which to render the content],
  	 *     data: [if present, specifies the data that is in context for this content],
  	 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
  	 * }
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemBadgeTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Sets the Legend for the chart.
  	 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
  	 * If element was not found, then new DIV element is created and inserted into parent after chart element.
  	 * Value of that option can be an object with member "element", which contains the id of legend-element.
  	 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
  	 * Examples:
  	 * legend: {}
  	 * legend: "idOfDiv"
  	 * legend: { element: "idOfDiv", width: 300 }
  	 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  which side of the chart the outer labels should appear.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets which side of the chart the outer labels should appear.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the OuterLabel mapping property for the current series object.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the OuterLabel mapping property for the current series object.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush used for the outer labels.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets the brush used for the outer labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the text style for outer labels
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets the text style for outer labels
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the outer labels are visible.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets whether the outer labels are visible.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness of outline around slices.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness of outline around slices.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for outlines on the slices.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for outlines on the slices.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the style to use for selected slices.
  	 * That can be used to set stroke (outline color), fill (background color) and opacity.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceStyle
  ): js.Any = js.native
  /**
  	 * Sets the style to use for selected slices.
  	 * That can be used to set stroke (outline color), fill (background color) and opacity.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when a slice is clicked.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igFunnelChart.
  	 * Use ui.index to obtain index of clicked slice.
  	 * Use ui.item to obtain reference to clicked slice item.
  	 * Use ui.selected to check if slice became selected.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClicked
  ): SliceClickedEvent = js.native
  /**
  	 * Event which is raised when a slice is clicked.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igFunnelChart.
  	 * Use ui.index to obtain index of clicked slice.
  	 * Use ui.item to obtain reference to clicked slice item.
  	 * Use ui.selected to check if slice became selected.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClicked,
    optionValue: SliceClickedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush used for the inner labels.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textColor
  ): java.lang.String = js.native
  /**
  	 * Sets the brush used for the inner labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the text style for inner labels
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textStyle
  ): java.lang.String = js.native
  /**
  	 * Sets the text style for inner labels
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  how long the animations should take to run.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets how long the animations should take to run.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the style to use for unselected slices.
  	 * That can be used to set stroke (outline color), fill (background color) and opacity.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unselectedSliceStyle
  ): js.Any = js.native
  /**
  	 * Sets the style to use for unselected slices.
  	 * That can be used to set stroke (outline color), fill (background color) and opacity.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unselectedSliceStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to use a Bezier curve to define the funnel.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useBezierCurve
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to use a Bezier curve to define the funnel.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useBezierCurve,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to use the outer labels to identify the legend items.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useOuterLabelsForLegend
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to use the outer labels to identify the legend items.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useOuterLabelsForLegend,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to use the unselected style on unselected slices.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useUnselectedStyle
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to use the unselected style on unselected slices.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useUnselectedStyle,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the value member path for the funnel chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the value member path for the funnel chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the chart.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double = js.native
  /**
  	 * The width of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igFunnelChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igFunnelChart(options: IgFunnelChart): JQuery = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_isSelected(methodName: igniteDashUiLib.igniteDashUiLibStrings.isSelected, slice: js.Object): scala.Boolean = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgFunnelChart): JQuery = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_selectedSliceIndexes(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceIndexes): js.Array[_] = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_selectedSliceIndexes(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceIndexes, selection: js.Array[_]): js.Array[_] = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_selectedSliceItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceItems): js.Array[_] = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_selectedSliceItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedSliceItems, selection: js.Array[_]): js.Array[_] = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  @JSName("igFunnelChart")
  def igFunnelChart_toggleSelection(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleSelection, slice: js.Object): js.Object = js.native
  def igGrid(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions
  ): scala.Boolean = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight
  ): scala.Boolean = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit
  ): scala.Boolean = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat
  ): java.lang.String | scala.Boolean = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns
  ): scala.Boolean = js.native
  /**
  	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn
  ): scala.Boolean = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Used for [column virtualization](ui.iggrid#options:columnVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels for a column width.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Used for [column virtualization](ui.iggrid#options:columnVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels for a column width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Used for [row virtualization](ui.iggrid#options:rowVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Used for [row virtualization](ui.iggrid#options:rowVirtualization) in [fixed mode](ui.iggrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption
  ): java.lang.String = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered
  ): CaptionRenderedEvent = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered,
    optionValue: CaptionRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering
  ): CaptionRenderingEvent = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering,
    optionValue: CaptionRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick
  ): CellClickEvent = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick,
    optionValue: CellClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick
  ): CellRightClickEvent = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick,
    optionValue: CellRightClickEvent
  ): scala.Unit = js.native
  /**
  	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.iggrid#options:virtualization) to true and [virtualizationMode](ui.iggrid#options:virtualizationMode) to "fixed".
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization
  ): scala.Boolean = js.native
  /**
  	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.iggrid#options:virtualization) to true and [virtualizationMode](ui.iggrid#options:virtualizationMode) to "fixed".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns
  ): js.Array[IgGridColumn] = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified
  ): ColumnsCollectionModifiedEvent = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified,
    optionValue: ColumnsCollectionModifiedEvent
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns,
    optionValue: js.Array[IgGridColumn]
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created
  ): CreatedEvent = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created,
    optionValue: CreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after data binding is complete.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event fired after data binding is complete.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered
  ): DataRenderedEvent = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered,
    optionValue: DataRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering
  ): DataRenderingEvent = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering,
    optionValue: DataRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Array[_] | js.Object | java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is destroyed
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed
  ): DestroyedEvent = js.native
  /**
  	 * Fired when the grid is destroyed
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed,
    optionValue: DestroyedEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay
  ): java.lang.String = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features
  ): js.Array[IgGridFeature] = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features,
    optionValue: js.Array[IgGridFeature]
  ): scala.Unit = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters
  ): scala.Boolean = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders
  ): scala.Boolean = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered
  ): FooterRenderedEvent = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered,
    optionValue: FooterRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering
  ): FooterRenderingEvent = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering,
    optionValue: FooterRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered
  ): HeaderCellRenderedEvent = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered,
    optionValue: HeaderCellRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered
  ): HeaderRenderedEvent = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered,
    optionValue: HeaderRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering
  ): HeaderRenderingEvent = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering,
    optionValue: HeaderRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest
  ): scala.Boolean = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns
  ): scala.Boolean = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey
  ): java.lang.String = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes
  ): scala.Boolean = js.native
  /**
  	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError
  ): RequestErrorEvent = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError,
    optionValue: RequestErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Settings related to REST compliant update routines.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings
  ): IgGridRestSettings = js.native
  /**
  	 * Settings related to REST compliant update routines.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings,
    optionValue: IgGridRestSettings
  ): scala.Unit = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization
  ): scala.Boolean = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered
  ): RowsRenderedEvent = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered,
    optionValue: RowsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering
  ): RowsRenderingEvent = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering,
    optionValue: RowsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated
  ): SchemaGeneratedEvent = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated,
    optionValue: SchemaGeneratedEvent
  ): scala.Unit = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings
  ): IgGridScrollSettings = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings,
    optionValue: IgGridScrollSettings
  ): scala.Unit = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog
  ): scala.Boolean = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine
  ): java.lang.String = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl
  ): java.lang.String = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization
  ): scala.Boolean = js.native
  /**
  	 * Determines row virtualization mode.
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode
  ): java.lang.String = js.native
  /**
  	 * Determines row virtualization mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep
  ): scala.Double = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGrid(options: IgGrid): JQuery = js.native
  def igGridAppendRowsOnDemand(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Defines local or remote type of appending rows on demand in igGrid
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Defines local or remote type of appending rows on demand in igGrid
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk index
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkIndexUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk index
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkIndexUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Default number of records per chunk
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkSize
  ): scala.Double = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk size
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkSizeUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested chunk size
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkSizeUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Default number of records per chunk
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chunkSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Current chunk index position
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentChunkIndex
  ): scala.Double = js.native
  /**
  	 * Current chunk index position
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentChunkIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Initial chunk index position
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultChunkIndex
  ): scala.Double = js.native
  /**
  	 * Initial chunk index position
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultChunkIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Gets caption text for the "load more data" button. Use option [locale.loadMoreDataButtonText](ui.iggridappendrowsondemand#options:locale.loadMoreDataButtonText).
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadMoreDataButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Sets caption text for the "load more data" button. Use option [locale.loadMoreDataButtonText](ui.iggridappendrowsondemand#options:locale.loadMoreDataButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadMoreDataButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Denotes the append rows on demand request method
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadTrigger
  ): java.lang.String = js.native
  /**
  	 * Denotes the append rows on demand request method
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadTrigger,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridAppendRowsOnDemandLocale = js.native
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridAppendRowsOnDemandLocale
  ): scala.Unit = js.native
  /**
  	 * The property in the response that will hold the total number of records in the data source
  	 *
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey
  ): java.lang.String = js.native
  /**
  	 * The property in the response that will hold the total number of records in the data source
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the requested rows are returned from the remote endpoint, but before grid data rebinds
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRequested
  ): RowsRequestedEvent = js.native
  /**
  	 * Event fired after the requested rows are returned from the remote endpoint, but before grid data rebinds
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRequested,
    optionValue: RowsRequestedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the rows are requested from the remote endpoint.
  	 * Return false in order to cancel requesting of rows.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRequesting
  ): RowsRequestingEvent = js.native
  /**
  	 * Event fired before the rows are requested from the remote endpoint.
  	 * Return false in order to cancel requesting of rows.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridAppendRowsOnDemand(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRequesting,
    optionValue: RowsRequestingEvent
  ): scala.Unit = js.native
  def igGridAppendRowsOnDemand(options: IgGridAppendRowsOnDemand): JQuery = js.native
  @JSName("igGridAppendRowsOnDemand")
  def igGridAppendRowsOnDemand_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridAppendRowsOnDemand")
  def igGridAppendRowsOnDemand_nextChunk(methodName: igniteDashUiLib.igniteDashUiLibStrings.nextChunk): scala.Unit = js.native
  @JSName("igGridAppendRowsOnDemand")
  def igGridAppendRowsOnDemand_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridAppendRowsOnDemand")
  def igGridAppendRowsOnDemand_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridAppendRowsOnDemand")
  def igGridAppendRowsOnDemand_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridAppendRowsOnDemand): JQuery = js.native
  def igGridCellMerging(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellsMerged
  ): CellsMergedEvent = js.native
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellsMerged,
    optionValue: CellsMergedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a new merged cells group is created.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellsMerging
  ): CellsMergingEvent = js.native
  /**
  	 * Event fired before a new merged cells group is created.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellsMerging,
    optionValue: CellsMergingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridCellMergingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridCellMergingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Defines when merging should be applied.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeOn
  ): java.lang.String = js.native
  /**
  	 * Defines when merging should be applied.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeOn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines the whether the rows will be merged or not.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeRows
  ): js.Any = js.native
  /**
  	 * Defines the whether the rows will be merged or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeRows,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Defines the rules merging is based on.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeStrategy
  ): java.lang.String | js.Function = js.native
  /**
  	 * Defines the rules merging is based on.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeStrategy,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeStrategy,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Defines the type of merging.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeType
  ): java.lang.String = js.native
  /**
  	 * Defines the type of merging.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Defines the rules merging is based on.
  	 *
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowMergeStrategy
  ): java.lang.String | js.Function = js.native
  /**
  	 * Defines the rules merging is based on.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowMergeStrategy,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridCellMerging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowMergeStrategy,
    optionValue: js.Function
  ): scala.Unit = js.native
  def igGridCellMerging(options: IgGridCellMerging): JQuery = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_isMerged(methodName: igniteDashUiLib.igniteDashUiLibStrings.isMerged, column: js.Object): scala.Boolean = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_mergeColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.mergeColumn,
    column: js.Object,
    raiseEvents: scala.Boolean
  ): java.lang.String = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_mergeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.mergeRow, id: js.Object, fireEvents: js.Object): scala.Unit = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridCellMerging): JQuery = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_unmergeColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.unmergeColumn, column: js.Object): java.lang.String = js.native
  @JSName("igGridCellMerging")
  def igGridCellMerging_unmergeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.unmergeRow, id: js.Object, index: js.Object): scala.Unit = js.native
  def igGridColumnFixing(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is fired when column fixing operation is finished
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixed
  ): ColumnFixedEvent = js.native
  /**
  	 * Event which is fired when column fixing operation is finished
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixed,
    optionValue: ColumnFixedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column fixing operation is initiated.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixing
  ): ColumnFixingEvent = js.native
  /**
  	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixingRefused
  ): ColumnFixingRefusedEvent = js.native
  /**
  	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixingRefused,
    optionValue: ColumnFixingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column fixing operation is initiated.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixing,
    optionValue: ColumnFixingEvent
  ): scala.Unit = js.native
  /**
  	 * List of column settings that specifies custom column fixing options on a per column basis.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridColumnFixingColumnSetting] = js.native
  /**
  	 * List of column settings that specifies custom column fixing options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridColumnFixingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is done
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixed
  ): ColumnUnfixedEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation is done
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixed,
    optionValue: ColumnUnfixedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is initiated
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixing
  ): ColumnUnfixingEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixingRefused
  ): ColumnUnfixingRefusedEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixingRefused,
    optionValue: ColumnUnfixingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is initiated
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixing,
    optionValue: ColumnUnfixingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextFixedColumn
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextFixedColumn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextUnfixedColumn
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextUnfixedColumn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixNondataColumns
  ): scala.Boolean = js.native
  /**
  	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixNondataColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection
  ): java.lang.String = js.native
  /**
  	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Gets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerFixButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Sets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerFixButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Gets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerUnfixButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Sets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerUnfixButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridColumnFixingLocale = js.native
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridColumnFixingLocale
  ): scala.Unit = js.native
  /**
  	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.populateDataRowsAttributes
  ): scala.Boolean = js.native
  /**
  	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.populateDataRowsAttributes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta
  ): scala.Double = js.native
  /**
  	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets whether to show the column fixing buttons in header cells/feature chooser.
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFixButtons
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to show the column fixing buttons in header cells/feature chooser.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFixButtons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
  	 *
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncRowHeights
  ): scala.Boolean = js.native
  /**
  	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncRowHeights,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridColumnFixing(options: IgGridColumnFixing): JQuery = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_checkAndSyncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkAndSyncHeights): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_checkFixingAllowed(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkFixingAllowed, columns: js.Array[_]): scala.Boolean = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_checkUnfixingAllowed(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkUnfixingAllowed, columns: js.Array[_]): scala.Boolean = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_fixColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn, colIdentifier: js.Object): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_fixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn,
    colIdentifier: js.Object,
    target: java.lang.String
  ): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_fixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn,
    colIdentifier: js.Object,
    target: java.lang.String,
    after: scala.Boolean
  ): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_fixDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixDataSkippedColumns): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_fixNonDataColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixNonDataColumns): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_getWidthOfFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns): scala.Double = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_getWidthOfFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns, fCols: js.Array[_]): scala.Double = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_getWidthOfFixedColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns,
    fCols: js.Array[_],
    excludeNonDataColumns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_getWidthOfFixedColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns,
    fCols: js.Array[_],
    excludeNonDataColumns: scala.Boolean,
    includeHidden: scala.Boolean
  ): scala.Double = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_isGroupHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.isGroupHeader, colKey: java.lang.String): scala.Boolean = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridColumnFixing): JQuery = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_syncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_syncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights, check: scala.Boolean): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_syncHeights(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights,
    check: scala.Boolean,
    clearRowsHeights: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_syncRowsHeights(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.syncRowsHeights,
    $trs: js.Array[_],
    $anotherRows: js.Array[_]
  ): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixAllColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixAllColumns): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn, colIdentifier: js.Object): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn,
    colIdentifier: js.Object,
    target: java.lang.String
  ): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn,
    colIdentifier: js.Object,
    target: java.lang.String,
    after: scala.Boolean
  ): js.Object = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixDataSkippedColumns): scala.Unit = js.native
  @JSName("igGridColumnFixing")
  def igGridColumnFixing_unfixNonDataColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixNonDataColumns): scala.Unit = js.native
  def igGridColumnMoving(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets if header cells should include an additional button that opens a moving helper dropdown.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addMovingDropdown
  ): scala.Boolean = js.native
  /**
  	 * Sets if header cells should include an additional button that opens a moving helper dropdown.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addMovingDropdown,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation is canceled
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragCanceled
  ): ColumnDragCanceledEvent = js.native
  /**
  	 * Event which is fired when a drag operation is canceled
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragCanceled,
    optionValue: ColumnDragCanceledEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation ends on a column header
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragEnd
  ): ColumnDragEndEvent = js.native
  /**
  	 * Event which is fired when a drag operation ends on a column header
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragEnd,
    optionValue: ColumnDragEndEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation begins on a column header
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragStart
  ): ColumnDragStartEvent = js.native
  /**
  	 * Event which is fired when a drag operation begins on a column header
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragStart,
    optionValue: ColumnDragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation completes
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoved
  ): ColumnMovedEvent = js.native
  /**
  	 * Event which is fired when a column moving operation completes
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoved,
    optionValue: ColumnMovedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation is initiated
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoving
  ): ColumnMovingEvent = js.native
  /**
  	 * Controls containment behavior of column moving dialog.
  	 *
  	 *                 owner  The dialog will be draggable only in the grid area
  	 *                 window  The dialog will be draggable in the whole window area
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMovingDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior of column moving dialog.
  	 *
  	 *                 owner  The dialog will be draggable only in the grid area
  	 *                 window  The dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMovingDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation is initiated
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoving,
    optionValue: ColumnMovingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies moving options on a per column basis.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridColumnMovingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies moving options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridColumnMovingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the opacity of the drag markup, while a column header is being dragged.
  	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
  	 * will be used with priority over this one.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragHelperOpacity
  ): scala.Double = js.native
  /**
  	 * Sets the opacity of the drag markup, while a column header is being dragged.
  	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
  	 * will be used with priority over this one.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragHelperOpacity,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveFirstText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveFirstText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLastText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLastText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLeftText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLeftText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveRightText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveRightText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSubmenuText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSubmenuText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets whether the contents of the column being dragged will get hidden. The option is only
  	 * relevant in immediate moving mode.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideHeaderContentsDuringDrag
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the contents of the column being dragged will get hidden. The option is only
  	 * relevant in immediate moving mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideHeaderContentsDuringDrag,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridColumnMovingLocale = js.native
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridColumnMovingLocale
  ): scala.Unit = js.native
  /**
  	 * Specify the drag-and-drop mode for the feature
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Specify the drag-and-drop mode for the feature
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specify the way columns will be rearranged
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.moveType
  ): java.lang.String = js.native
  /**
  	 * Specify the way columns will be rearranged
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.moveType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingAcceptanceTolerance
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingAcceptanceTolerance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the moving dialog has been closed.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosed
  ): MovingDialogClosedEvent = js.native
  /**
  	 * Event fired after the moving dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosed,
    optionValue: MovingDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the moving dialog is closed.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosing
  ): MovingDialogClosingEvent = js.native
  /**
  	 * Event fired before the moving dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosing,
    optionValue: MovingDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the model dialog are rendered.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendered
  ): MovingDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the model dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendered,
    optionValue: MovingDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the model dialog are rendered.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendering
  ): MovingDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the model dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendering,
    optionValue: MovingDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDisplayText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDisplayText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when column moving is completed through dragging it in the moving dialog
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoved
  ): MovingDialogDragColumnMovedEvent = js.native
  /**
  	 * Event fired when column moving is completed through dragging it in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoved,
    optionValue: MovingDialogDragColumnMovedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when column moving is initiated through dragging it in the moving dialog
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoving
  ): MovingDialogDragColumnMovingEvent = js.native
  /**
  	 * Event fired when column moving is initiated through dragging it in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoving,
    optionValue: MovingDialogDragColumnMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the moving dialog changes its position.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragged
  ): MovingDialogDraggedEvent = js.native
  /**
  	 * Event fired every time the moving dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragged,
    optionValue: MovingDialogDraggedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets markup for drop tooltip in column moving dialog
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipMarkup
  ): java.lang.String = js.native
  /**
  	 * Sets markup for drop tooltip in column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipMarkup,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets height of column moving dialog
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogHeight
  ): scala.Double = js.native
  /**
  	 * Sets height of column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when move down button is pressed in the moving dialog
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveDownButtonPressed
  ): MovingDialogMoveDownButtonPressedEvent = js.native
  /**
  	 * Event fired when move down button is pressed in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveDownButtonPressed,
    optionValue: MovingDialogMoveDownButtonPressedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when move up button is pressed in the moving dialog
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveUpButtonPressed
  ): MovingDialogMoveUpButtonPressedEvent = js.native
  /**
  	 * Event fired when move up button is pressed in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveUpButtonPressed,
    optionValue: MovingDialogMoveUpButtonPressedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpened
  ): MovingDialogOpenedEvent = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpened,
    optionValue: MovingDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the moving dialog is opened.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpening
  ): MovingDialogOpeningEvent = js.native
  /**
  	 * Event fired before the moving dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpening,
    optionValue: MovingDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of column moving dialog
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogWidth
  ): scala.Double = js.native
  /**
  	 * Sets width of column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingScrollTolerance
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingScrollTolerance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingToolTipMove
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingToolTipMove,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) of each individual scroll operation
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) of each individual scroll operation
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
  	 *
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSpeedMultiplier
  ): scala.Double = js.native
  /**
  	 * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSpeedMultiplier,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridColumnMoving(options: IgGridColumnMoving): JQuery = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object
  ): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridColumnMoving")
  def igGridColumnMoving_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridColumnMoving): JQuery = js.native
  def igGridFeatureChooser(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth
  ): js.Any = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserDropDownOpened
  ): FeatureChooserDropDownOpenedEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserDropDownOpened,
    optionValue: FeatureChooserDropDownOpenedEvent
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserDropDownOpening
  ): FeatureChooserDropDownOpeningEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserDropDownOpening,
    optionValue: FeatureChooserDropDownOpeningEvent
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserRendered
  ): FeatureChooserRenderedEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserRendered,
    optionValue: FeatureChooserRenderedEvent
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserRendering
  ): FeatureChooserRenderingEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserRendering,
    optionValue: FeatureChooserRenderingEvent
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureToggled
  ): FeatureToggledEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureToggled,
    optionValue: FeatureToggledEvent
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureToggling
  ): FeatureTogglingEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureToggling,
    optionValue: FeatureTogglingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuToggling
  ): MenuTogglingEvent = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuToggling,
    optionValue: MenuTogglingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFeatureChooser(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igGridFeatureChooser(options: IgGridFeatureChooser): JQuery = js.native
  def igGridFeatureChooserPopover(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * The time popover fades in and out when showing/hiding
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * Sets the time popover fades in and out when showing/hiding
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls where the popover DOM should be attached to.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo
  ): java.lang.String | js.Object = js.native
  /**
  	 * Controls where the popover DOM should be attached to.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur
  ): scala.Boolean = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment
  ): js.Any = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The content for the popover container. If left null the content will be get from the target.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate
  ): java.lang.String | js.Function = js.native
  /**
  	 * Sets the content for the popover container. If left null the content will be get from the target.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction
  ): java.lang.String = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority
  ): js.Array[_] = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridId
  ): java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridId,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The content for the popover header
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate
  ): IgPopoverHeaderTemplate = js.native
  /**
  	 * Sets the content for the popover header
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate,
    optionValue: IgPopoverHeaderTemplate
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is hidden.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden
  ): HiddenEvent = js.native
  /**
  	 * Event fired after popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden,
    optionValue: HiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is hidden.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding
  ): HidingEvent = js.native
  /**
  	 * Event fired before popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding,
    optionValue: HidingEvent
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight
  ): scala.Double | java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth
  ): scala.Double | java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth
  ): scala.Double | java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position
  ): java.lang.String = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors
  ): java.lang.String = js.native
  /**
  	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn
  ): java.lang.String = js.native
  /**
  	 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is shown.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing
  ): ShowingEvent = js.native
  /**
  	 * Event fired before popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing,
    optionValue: ShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is shown.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown
  ): ShownEvent = js.native
  /**
  	 * Event fired after popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown,
    optionValue: ShownEvent
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetButton
  ): js.Any = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.targetButton,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double | java.lang.String = js.native
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFeatureChooserPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridFeatureChooserPopover(options: IgGridFeatureChooserPopover): JQuery = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): js.Object = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_getContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContent): java.lang.String = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_getCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCoordinates): js.Object = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_isShown(methodName: igniteDashUiLib.igniteDashUiLibStrings.isShown): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridFeatureChooserPopover): JQuery = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_registerElements(methodName: igniteDashUiLib.igniteDashUiLibStrings.registerElements, elements: js.Object): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_setContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.setContent, newCnt: java.lang.String): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_setCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.setCoordinates, pos: js.Object): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, trg: stdLib.Element): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_show(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.show,
    trg: stdLib.Element,
    content: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridFeatureChooserPopover")
  def igGridFeatureChooserPopover_target(methodName: igniteDashUiLib.igniteDashUiLibStrings.target): js.Object = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy, e: js.Object, args: js.Object): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_getDropDownByColumnKey(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getDropDownByColumnKey,
    columnKey: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown, columnKey: java.lang.String): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridFeatureChooser): JQuery = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_shouldShowFeatureIcon(methodName: igniteDashUiLib.igniteDashUiLibStrings.shouldShowFeatureIcon, key: js.Object): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown, columnKey: java.lang.String): scala.Unit = js.native
  @JSName("igGridFeatureChooser")
  def igGridFeatureChooser_toggleDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleDropDown, columnKey: java.lang.String): scala.Unit = js.native
  def igGridFiltering(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeEditorsVisible
  ): scala.Boolean = js.native
  /**
  	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeEditorsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeHeaderButtonLocation
  ): java.lang.String = js.native
  /**
  	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeHeaderButtonLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive
  ): scala.Boolean = js.native
  /**
  	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies custom filtering options on a per column basis.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridFilteringColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies custom filtering options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridFilteringColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired after the filtering has been executed and results are rendered.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltered
  ): DataFilteredEvent = js.native
  /**
  	 * Event fired after the filtering has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltered,
    optionValue: DataFilteredEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a filtering operation is executed (remote request or local).
  	 * Return false in order to cancel filtering operation.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltering
  ): DataFilteringEvent = js.native
  /**
  	 * Event fired before a filtering operation is executed (remote request or local).
  	 * Return false in order to cancel filtering operation.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltering,
    optionValue: DataFilteringEvent
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a filter column dropdown is completely closed.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed
  ): DropDownClosedEvent = js.native
  /**
  	 * Event fired after a filter column dropdown is completely closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed,
    optionValue: DropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the filter dropdown starts closing.
  	 * Return false in order to cancel dropdown closing.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing
  ): DropDownClosingEvent = js.native
  /**
  	 * Event fired before the filter dropdown starts closing.
  	 * Return false in order to cancel dropdown closing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing,
    optionValue: DropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the filter dropdown is opened for a specific column.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened
  ): DropDownOpenedEvent = js.native
  /**
  	 * Event fired after the filter dropdown is opened for a specific column.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened,
    optionValue: DropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the filter dropdown is opened for a specific column.
  	 * Return false in order to cancel dropdown opening.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening
  ): DropDownOpeningEvent = js.native
  /**
  	 * Event fired before the filter dropdown is opened for a specific column.
  	 * Return false in order to cancel dropdown opening.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening,
    optionValue: DropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextAdvancedFilter
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextAdvancedFilter,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterButtonLocation
  ): java.lang.String = js.native
  /**
  	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterButtonLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDelay
  ): scala.Double = js.native
  /**
  	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Add button width - in the advanced filter dialog.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Add button width - in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
  	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionDropDownTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
  	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionDropDownTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the advanced filter dialog has been closed.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosed
  ): FilterDialogClosedEvent = js.native
  /**
  	 * Event fired after the advanced filter dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosed,
    optionValue: FilterDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the advanced filter dialog is closed.
  	 * Return false in order to cancel filtering dialog closing.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosing
  ): FilterDialogClosingEvent = js.native
  /**
  	 * Event fired before the advanced filter dialog is closed.
  	 * Return false in order to cancel filtering dialog closing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosing,
    optionValue: FilterDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the column chooser dropdowns in the advanced filter dialog.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the column chooser dropdowns in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The filter dialog will be draggable only within the grid area.
  	 * window  The filter dialog will be draggable within the whole window area.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The filter dialog will be draggable only within the grid area.
  	 * window  The filter dialog will be draggable within the whole window area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the advanced filter dialog are rendered.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendered
  ): FilterDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the advanced filter dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendered,
    optionValue: FilterDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the advanced filter dialog are rendered.
  	 * Return false in order to cancel filtering dialog rendering.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendering
  ): FilterDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the advanced filter dialog are rendered.
  	 * Return false in order to cancel filtering dialog rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendering,
    optionValue: FilterDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the filtering expression input boxes in the advanced filter dialog.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the filtering expression input boxes in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after a filter row is added to the advanced filter dialog.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdded
  ): FilterDialogFilterAddedEvent = js.native
  /**
  	 * Event fired after a filter row is added to the advanced filter dialog.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdded,
    optionValue: FilterDialogFilterAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a filter row is added to the advanced filter dialog.
  	 * Return false in order to cancel filter adding to the advanced filtering dialog.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdding
  ): FilterDialogFilterAddingEvent = js.native
  /**
  	 * Event fired before a filter row is added to the advanced filter dialog.
  	 * Return false in order to cancel filter adding to the advanced filtering dialog.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdding,
    optionValue: FilterDialogFilterAddingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
  	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterConditionTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
  	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterConditionTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Width of the filtering condition dropdowns in the advanced filter dialog.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the filtering condition dropdowns in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Custom template for filter dialog.
  	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
  	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
  	 * NOTE: The template is supported only with <tr />.
  	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for filter dialog.
  	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
  	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
  	 * NOTE: The template is supported only with <tr />.
  	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when the OK button in the advanced filter dialog is pressed.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFiltering
  ): FilterDialogFilteringEvent = js.native
  /**
  	 * Event fired when the OK button in the advanced filter dialog is pressed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFiltering,
    optionValue: FilterDialogFilteringEvent
  ): scala.Unit = js.native
  /**
  	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMaxFilterCount
  ): scala.Double = js.native
  /**
  	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMaxFilterCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the advanced filter dialog changes its position.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMoving
  ): FilterDialogMovingEvent = js.native
  /**
  	 * Event fired every time the advanced filter dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMoving,
    optionValue: FilterDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after the advanced filter dialog is already opened.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpened
  ): FilterDialogOpenedEvent = js.native
  /**
  	 * Event fired after the advanced filter dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpened,
    optionValue: FilterDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the advanced filtering dialog is opened.
  	 * Return false in order to cancel filter dialog opening.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpening
  ): FilterDialogOpeningEvent = js.native
  /**
  	 * Event fired before the advanced filtering dialog is opened.
  	 * Return false in order to cancel filter dialog opening.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpening,
    optionValue: FilterDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Type of animations for the column filter dropdowns.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimations
  ): java.lang.String = js.native
  /**
  	 * Type of animations for the column filter dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimations,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Height of the column filter dropdowns.
  	 *
  	 * string  The height of the column filter dropdowns in pixels (0px).
  	 * number  The height of the column filter dropdowns in pixels as a number (0).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownHeight
  ): js.Any = js.native
  /**
  	 * Height of the column filter dropdowns.
  	 *
  	 * string  The height of the column filter dropdowns in pixels (0px).
  	 * number  The height of the column filter dropdowns in pixels as a number (0).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownHeight,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Enable/disable filter icons visibility.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownItemIcons
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable filter icons visibility.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownItemIcons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Width of the column filter dropdowns.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the column filter dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey
  ): java.lang.String = js.native
  /**
  	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enable/disable footer visibility with summary info about the filter.
  	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
  	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryAlwaysVisible
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable footer visibility with summary info about the filter.
  	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
  	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryAlwaysVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child [layouts](ui.ighierarchicalgrid#options:columnLayouts). NOTE: It only applies for [igHierarchicalGrid](ui.ighierarchicalgrid).
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child [layouts](ui.ighierarchicalgrid#options:columnLayouts). NOTE: It only applies for [igHierarchicalGrid](ui.ighierarchicalgrid).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labels
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labels,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridFilteringLocale = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridFilteringLocale
  ): scala.Unit = js.native
  /**
  	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullTexts
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullTexts,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables filtering persistence between states.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables filtering persistence between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFC
  ): scala.Boolean = js.native
  /**
  	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFC,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFilterButton
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFilterButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showEmptyConditions
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showEmptyConditions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
  	 *
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showNullConditions
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showNullConditions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridFiltering(options: IgGridFiltering): JQuery = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_filter(methodName: igniteDashUiLib.igniteDashUiLibStrings.filter, expressions: js.Array[_]): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_filter(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.filter,
    expressions: js.Array[_],
    updateUI: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_filter(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.filter,
    expressions: js.Array[_],
    updateUI: scala.Boolean,
    addedFromAdvanced: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_getFilteringMatchesCount(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFilteringMatchesCount): scala.Double = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridFiltering): JQuery = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_requiresFilteringExpression(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.requiresFilteringExpression,
    filterCondition: java.lang.String
  ): scala.Boolean = js.native
  @JSName("igGridFiltering")
  def igGridFiltering_toggleFilterRowByFeatureChooser(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleFilterRowByFeatureChooser,
    event: java.lang.String
  ): scala.Unit = js.native
  def igGridGroupBy(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Sets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the collapse indicator tooltip for grouped rows. Use option [locale.collapseTooltip](ui.iggridgroupby#options:locale.collapseTooltip).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the collapse indicator tooltip for grouped rows. Use option [locale.collapseTooltip](ui.iggridgroupby#options:locale.collapseTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Configures individual column settings.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): IgGridGroupByColumnSettings = js.native
  /**
  	 * Configures individual column settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: IgGridGroupByColumnSettings
  ): scala.Unit = js.native
  /**
  	 * Default sort order - ascending or descending
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultSortingDirection
  ): java.lang.String = js.native
  /**
  	 * Default sort order - ascending or descending
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultSortingDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the hyperlink which opens the GroupBy Dialog. Use option [locale.emptyGroupByAreaContentSelectColumnsCaption](ui.iggridgroupby#options:locale.emptyGroupByAreaContentSelectColumnsCaption).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyGroupByAreaContentSelectColumnsCaption
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the hyperlink which opens the GroupBy Dialog. Use option [locale.emptyGroupByAreaContentSelectColumnsCaption](ui.iggridgroupby#options:locale.emptyGroupByAreaContentSelectColumnsCaption).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyGroupByAreaContentSelectColumnsCaption,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the expand indicator tooltip for grouped rows. Use option [locale.expandTooltip](ui.iggridgroupby#options:locale.expandTooltip).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the expand indicator tooltip for grouped rows. Use option [locale.expandTooltip](ui.iggridgroupby#options:locale.expandTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expansionIndicatorVisibility
  ): scala.Boolean = js.native
  /**
  	 * Sets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expansionIndicatorVisibility,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets the place in the grid where the GroupBy area will be
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByAreaVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the place in the grid where the GroupBy area will be
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByAreaVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior for the GroupBy Dialog.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior for the GroupBy Dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * By default, the column width for the header is taken. If this is specified it's used for all headers.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByLabelWidth
  ): scala.Double = js.native
  /**
  	 * By default, the column width for the header is taken. If this is specified it's used for all headers.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByLabelWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKey
  ): java.lang.String = js.native
  /**
  	 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKeyAscValue
  ): java.lang.String = js.native
  /**
  	 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKeyAscValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKeyDescValue
  ): java.lang.String = js.native
  /**
  	 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKeyDescValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupByUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets default summaries that will appear when grouping by a column on the bottom of each group as a row.This option has a lower priority than the groupSummaries defined under columnSettings for each column.
  	 * All default summaries are defined under $.ig.util.defaultSummaryMethods
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSummaries
  ): js.Any = js.native
  /**
  	 * Gets the groupSummaries postion inside each group.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSummariesPosition
  ): java.lang.String = js.native
  /**
  	 * Sets the groupSummaries postion inside each group.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSummariesPosition,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets default summaries that will appear when grouping by a column on the bottom of each group as a row.This option has a lower priority than the groupSummaries defined under columnSettings for each column.
  	 * All default summaries are defined under $.ig.util.defaultSummaryMethods
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSummaries,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumns
  ): js.Array[IgGridGroupByGroupedColumn] = js.native
  /**
  	 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumnsChanged
  ): GroupedColumnsChangedEvent = js.native
  /**
  	 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumnsChanged,
    optionValue: GroupedColumnsChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumnsChanging
  ): GroupedColumnsChangingEvent = js.native
  /**
  	 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumnsChanging,
    optionValue: GroupedColumnsChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedColumns,
    optionValue: js.Array[IgGridGroupByGroupedColumn]
  ): scala.Unit = js.native
  /**
  	 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedRowTextTemplate
  ): java.lang.String = js.native
  /**
  	 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupedRowTextTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indentation
  ): scala.Double = js.native
  /**
  	 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indentation,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if after grouping, the grouped rows will be initially expanded or collapsed.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpand
  ): scala.Boolean = js.native
  /**
  	 * Sets if after grouping, the grouped rows will be initially expanded or collapsed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpand,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelDragHelperOpacity
  ): scala.Double = js.native
  /**
  	 * Sets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelDragHelperOpacity,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridGroupByLocale = js.native
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridGroupByLocale
  ): scala.Unit = js.native
  /**
  	 * Gets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when the button is Apply is clicked.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick
  ): ModalDialogButtonApplyClickEvent = js.native
  /**
  	 * Event fired when the button is Apply is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick,
    optionValue: ModalDialogButtonApplyClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonApplyText](ui.iggridgroupby#options:locale.modalDialogButtonApplyText).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonApplyText](ui.iggridgroupby#options:locale.modalDialogButtonApplyText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonCancelText](ui.iggridgroupby#options:locale.modalDialogButtonCancelText).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancel changes in the GroupBy Dialog. Use option [locale.modalDialogButtonCancelText](ui.iggridgroupby#options:locale.modalDialogButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when reset button is clicked.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick
  ): ModalDialogButtonResetClickEvent = js.native
  /**
  	 * Event fired when reset button is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick,
    optionValue: ModalDialogButtonResetClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each ascending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonAsc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonAsc).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each ascending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonAsc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each descending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonDesc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonDesc).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each descending sorted column in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonDesc](ui.iggridgroupby#options:locale.modalDialogCaptionButtonDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption button ungroup in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonUngroup](ui.iggridgroupby#options:locale.modalDialogCaptionButtonUngroup).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUngroup
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption button ungroup in GroupBy Dialog. Use option [locale.modalDialogCaptionButtonUngroup](ui.iggridgroupby#options:locale.modalDialogCaptionButtonUngroup).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUngroup,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the GroupBy Dialog. Use option [locale.modalDialogCaptionText](ui.iggridgroupby#options:locale.modalDialogCaptionText).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the GroupBy Dialog. Use option [locale.modalDialogCaptionText](ui.iggridgroupby#options:locale.modalDialogCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets label for "Clear all" button in the GroupBy Dialog. Use option [locale.modalDialogClearAllButtonLabel](ui.iggridgroupby#options:locale.modalDialogClearAllButtonLabel).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClearAllButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets label for "Clear all" button in the GroupBy Dialog. Use option [locale.modalDialogClearAllButtonLabel](ui.iggridgroupby#options:locale.modalDialogClearAllButtonLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClearAllButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed
  ): ModalDialogClosedEvent = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed,
    optionValue: ModalDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing
  ): ModalDialogClosingEvent = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing,
    optionValue: ModalDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered
  ): ModalDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered,
    optionValue: ModalDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering
  ): ModalDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering,
    optionValue: ModalDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of layouts dropdown in the GroupBy Dialog
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownAreaWidth
  ): scala.Double = js.native
  /**
  	 * Sets width of layouts dropdown in the GroupBy Dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownAreaWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogDropDownButtonCaption](ui.iggridgroupby#options:locale.modalDialogDropDownButtonCaption).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownButtonCaption
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogDropDownButtonCaption](ui.iggridgroupby#options:locale.modalDialogDropDownButtonCaption).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownButtonCaption,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets label for layouts dropdown in the GroupBy Dialog.  Use option [locale.modalDialogDropDownLabel](ui.iggridgroupby#options:locale.modalDialogDropDownLabel).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets label for layouts dropdown in the GroupBy Dialog.  Use option [locale.modalDialogDropDownLabel](ui.iggridgroupby#options:locale.modalDialogDropDownLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets width of layouts dropdown in the GroupBy Dialog
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownWidth
  ): scala.Double = js.native
  /**
  	 * Sets width of layouts dropdown in the GroupBy Dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogDropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text of GroupBy button in the GroupBy Dialog. Use option [locale.modalDialogGroupByButtonText](ui.iggridgroupby#options:locale.modalDialogGroupByButtonText).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupByButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text of GroupBy button in the GroupBy Dialog. Use option [locale.modalDialogGroupByButtonText](ui.iggridgroupby#options:locale.modalDialogGroupByButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupByButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupByOnClick
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupByOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be grouped.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupColumn
  ): ModalDialogGroupColumnEvent = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be grouped.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupColumn,
    optionValue: ModalDialogGroupColumnEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be grouped.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupingColumn
  ): ModalDialogGroupingColumnEvent = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be grouped.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogGroupingColumn,
    optionValue: ModalDialogGroupingColumnEvent
  ): scala.Unit = js.native
  /**
  	 * Gets height of the GroupBy Dialog
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets height of the GroupBy Dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the GroupBy Dialog changes its position.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving
  ): ModalDialogMovingEvent = js.native
  /**
  	 * Event fired every time the GroupBy Dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving,
    optionValue: ModalDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened
  ): ModalDialogOpenedEvent = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened,
    optionValue: ModalDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening
  ): ModalDialogOpeningEvent = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening,
    optionValue: ModalDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogRootLevelHierarchicalGrid](ui.iggridgroupby#options:locale.modalDialogRootLevelHierarchicalGrid).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogRootLevelHierarchicalGrid
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption of layouts dropdown button in the GroupBy Dialog. Use option [locale.modalDialogRootLevelHierarchicalGrid](ui.iggridgroupby#options:locale.modalDialogRootLevelHierarchicalGrid).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogRootLevelHierarchicalGrid,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when column in modal dialog is sorted.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortGroupedColumn
  ): ModalDialogSortGroupedColumnEvent = js.native
  /**
  	 * Event fired when column in modal dialog is sorted.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortGroupedColumn,
    optionValue: ModalDialogSortGroupedColumnEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be ungrouped.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogUngroupColumn
  ): ModalDialogUngroupColumnEvent = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be ungrouped.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogUngroupColumn,
    optionValue: ModalDialogUngroupColumnEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be ungrouped.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogUngroupingColumn
  ): ModalDialogUngroupingColumnEvent = js.native
  /**
  	 * Event fired when column in modal dialog is clicked to be ungrouped.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogUngroupingColumn,
    optionValue: ModalDialogUngroupingColumnEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of the GroupBy Dialog
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets width of the GroupBy Dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets when paging is applied and there is at least one grouped column which records should be included in page processing.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagingMode
  ): java.lang.String = js.native
  /**
  	 * Sets when paging is applied and there is at least one grouped column which records should be included in page processing.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagingMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the tooltip for the remove button. Use option [locale.removeButtonTooltip](ui.iggridgroupby#options:locale.removeButtonTooltip).
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.removeButtonTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the tooltip for the remove button. Use option [locale.removeButtonTooltip](ui.iggridgroupby#options:locale.removeButtonTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.removeButtonTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a key to get group by data from the remote response.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resultResponseKey
  ): java.lang.String = js.native
  /**
  	 * Sets a key to get group by data from the remote response.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resultResponseKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the settings for GroupBy summaries.
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summarySettings
  ): IgGridGroupBySummarySettings = js.native
  /**
  	 * Sets the settings for GroupBy summaries.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summarySettings,
    optionValue: IgGridGroupBySummarySettings
  ): scala.Unit = js.native
  /**
  	 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
  	 *
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useGridColumnFormatter
  ): scala.Boolean = js.native
  /**
  	 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridGroupBy(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useGridColumnFormatter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridGroupBy(options: IgGridGroupBy): JQuery = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_checkColumnIsGrouped(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.checkColumnIsGrouped,
    key: java.lang.String,
    layout: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_closeDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeDropDown): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_closeGroupByDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeGroupByDialog): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse, rowId: java.lang.String): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand, rowId: java.lang.String): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_getGroupedData(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getGroupedData,
    data: js.Array[_],
    colKey: java.lang.String
  ): js.Array[_] = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_getGroupedData(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getGroupedData,
    data: js.Array[_],
    colKey: java.lang.String,
    idval: java.lang.String
  ): js.Array[_] = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_groupByColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.groupByColumn, key: java.lang.String): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_groupByColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.groupByColumn,
    key: java.lang.String,
    layout: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_groupByColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.groupByColumn,
    key: java.lang.String,
    layout: java.lang.String,
    sortingDirection: js.Object
  ): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_groupByColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.groupByColumns): js.Object = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_openDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.openDropDown): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_openGroupByDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.openGroupByDialog): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridGroupBy): JQuery = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_renderGroupByModalDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderGroupByModalDialog): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_ungroupAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.ungroupAll): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_ungroupByColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.ungroupByColumn, key: java.lang.String): scala.Unit = js.native
  @JSName("igGridGroupBy")
  def igGridGroupBy_ungroupByColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.ungroupByColumn,
    key: java.lang.String,
    layout: java.lang.String
  ): scala.Unit = js.native
  def igGridHiding(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets time of milliseconds for animation duration to show/hide modal dialog
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time of milliseconds for animation duration to show/hide modal dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Apply in column chooser is clicked
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyClick
  ): ColumnChooserButtonApplyClickEvent = js.native
  /**
  	 * Event fired when button Apply in column chooser is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyClick,
    optionValue: ColumnChooserButtonApplyClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Reset in column chooser is clicked
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonResetClick
  ): ColumnChooserButtonResetClickEvent = js.native
  /**
  	 * Event fired when button Reset in column chooser is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonResetClick,
    optionValue: ColumnChooserButtonResetClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser has been closed.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosed
  ): ColumnChooserClosedEvent = js.native
  /**
  	 * Event fired after the column chooser has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosed,
    optionValue: ColumnChooserClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the column chooser is closed.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosing
  ): ColumnChooserClosingEvent = js.native
  /**
  	 * Event fired before the column chooser is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosing,
    optionValue: ColumnChooserClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The column chooser dialog will be draggable only in the grid area
  	 * window  The column chooser dialog will be draggable in the whole window area
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The column chooser dialog will be draggable only in the grid area
  	 * window  The column chooser dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the column chooser are rendered.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendered
  ): ColumnChooserContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the column chooser are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendered,
    optionValue: ColumnChooserContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the column chooser are rendered.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendering
  ): ColumnChooserContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the column chooser are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendering,
    optionValue: ColumnChooserContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserDisplayText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserDisplayText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The default column chooser height.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHeight
  ): java.lang.String = js.native
  /**
  	 * The default column chooser height.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideOnClick
  ): scala.Boolean = js.native
  /**
  	 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the column chooser changes its position.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserMoving
  ): ColumnChooserMovingEvent = js.native
  /**
  	 * Event fired every time the column chooser changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserMoving,
    optionValue: ColumnChooserMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpened
  ): ColumnChooserOpenedEvent = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpened,
    optionValue: ColumnChooserOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the column chooser is opened.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpening
  ): ColumnChooserOpeningEvent = js.native
  /**
  	 * Event fired before the column chooser is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpening,
    optionValue: ColumnChooserOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserResetButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserResetButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserShowText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserShowText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The default column chooser width.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserWidth
  ): java.lang.String = js.native
  /**
  	 * The default column chooser width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the hiding has been executed and results are rendered.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidden
  ): ColumnHiddenEvent = js.native
  /**
  	 * Event fired after the hiding has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidden,
    optionValue: ColumnHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHideText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHideText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHiding
  ): ColumnHidingEvent = js.native
  /**
  	 * Event fired when trying to hide all columns in fixed or unfixed area.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidingRefused
  ): ColumnHidingRefusedEvent = js.native
  /**
  	 * Event fired when trying to hide all columns in fixed or unfixed area.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidingRefused,
    optionValue: ColumnHidingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHiding,
    optionValue: ColumnHidingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridHidingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridHidingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired before a showing operation is executed.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowing
  ): ColumnShowingEvent = js.native
  /**
  	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowingRefused
  ): ColumnShowingRefusedEvent = js.native
  /**
  	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowingRefused,
    optionValue: ColumnShowingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a showing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowing,
    optionValue: ColumnShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the showing has been executed and results are rendered.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShown
  ): ColumnShownEvent = js.native
  /**
  	 * Event fired after the showing has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShown,
    optionValue: ColumnShownEvent
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The duration of the dropdown animation in milliseconds.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * The duration of the dropdown animation in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width in pixels of the hidden column indicator in the header.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorHeaderWidth
  ): scala.Double = js.native
  /**
  	 * The width in pixels of the hidden column indicator in the header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorHeaderWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridHidingLocale = js.native
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridHidingLocale
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiColumnHiding
  ): MultiColumnHidingEvent = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiColumnHiding,
    optionValue: MultiColumnHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igGridHiding(options: IgGridHiding): JQuery = js.native
  @JSName("igGridHiding")
  def igGridHiding_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_hideColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn, column: js.Object): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_hideColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_hideColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumnChooser): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_hideMultiColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideMultiColumns, columns: js.Array[_]): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_hideMultiColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideMultiColumns,
    columns: js.Array[_],
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_isToRenderButtonReset(methodName: igniteDashUiLib.igniteDashUiLibStrings.isToRenderButtonReset): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridHiding")
  def igGridHiding_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridHiding")
  def igGridHiding_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridHiding): JQuery = js.native
  @JSName("igGridHiding")
  def igGridHiding_removeColumnChooserResetButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeColumnChooserResetButton): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_renderColumnChooserResetButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderColumnChooserResetButton): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_resetHidingColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.resetHidingColumnChooser): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_showColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn, column: js.Object): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_showColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_showColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumnChooser): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_showMultiColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.showMultiColumns, columns: js.Array[_]): scala.Unit = js.native
  @JSName("igGridHiding")
  def igGridHiding_showMultiColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showMultiColumns,
    columns: js.Array[_],
    callback: js.Function
  ): scala.Unit = js.native
  def igGridModalDialog(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonApplyDisabled
  ): scala.Boolean = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonApplyDisabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when the button Cancel is clicked
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonCancelClick
  ): ButtonCancelClickEvent = js.native
  /**
  	 * Event fired when the button Cancel is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonCancelClick,
    optionValue: ButtonCancelClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the button OK/Apply is clicked
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonOKClick
  ): ButtonOKClickEvent = js.native
  /**
  	 * Event fired when the button OK/Apply is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonOKClick,
    optionValue: ButtonOKClickEvent
  ): scala.Unit = js.native
  /**
  	 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeModalDialogOnEnter
  ): scala.Boolean = js.native
  /**
  	 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeModalDialogOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed
  ): ModalDialogClosedEvent = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed,
    optionValue: ModalDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing
  ): ModalDialogClosingEvent = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing,
    optionValue: ModalDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered
  ): ModalDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered,
    optionValue: ModalDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering
  ): ModalDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering,
    optionValue: ModalDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * The default modal dialog height in pixels.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight
  ): scala.Double = js.native
  /**
  	 * The default modal dialog height in pixels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving
  ): ModalDialogMovingEvent = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving,
    optionValue: ModalDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened
  ): ModalDialogOpenedEvent = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened,
    optionValue: ModalDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening
  ): ModalDialogOpeningEvent = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening,
    optionValue: ModalDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * The default modal dialog width in pixels.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth
  ): scala.Double = js.native
  /**
  	 * The default modal dialog width in pixels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFooterButtons
  ): scala.Boolean = js.native
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFooterButtons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Tab index to assign to containers and buttons inside the dialog
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * Tab index to assign to containers and buttons inside the dialog
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridModalDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridModalDialog(options: IgGridModalDialog): JQuery = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_closeModalDialog(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.closeModalDialog,
    accepted: js.Object,
    e: js.Object
  ): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_getCaptionButtonContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCaptionButtonContainer): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_getContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContent): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_getFooter(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFooter): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_openModalDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.openModalDialog): scala.Unit = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridModalDialog")
  def igGridModalDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridModalDialog): JQuery = js.native
  def igGridMultiColumnHeaders(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired after the group collapsing has been executed and results are rendered.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsed
  ): GroupCollapsedEvent = js.native
  /**
  	 * Event fired after the group collapsing has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsed,
    optionValue: GroupCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a group collapsing operation is executed.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsing
  ): GroupCollapsingEvent = js.native
  /**
  	 * Event fired before a group collapsing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsing,
    optionValue: GroupCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the group expanding has been executed and results are rendered.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanded
  ): GroupExpandedEvent = js.native
  /**
  	 * Event fired after the group expanding has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanded,
    optionValue: GroupExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a group expanding operation is executed.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanding
  ): GroupExpandingEvent = js.native
  /**
  	 * Event fired before a group expanding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanding,
    optionValue: GroupExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridMultiColumnHeaders(options: IgGridMultiColumnHeaders): JQuery = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_collapseGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_collapseGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_expandGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.expandGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_expandGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_getMultiColumnHeaders(methodName: igniteDashUiLib.igniteDashUiLibStrings.getMultiColumnHeaders): js.Array[_] = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridMultiColumnHeaders): JQuery = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_toggleGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igGridMultiColumnHeaders")
  def igGridMultiColumnHeaders_toggleGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  def igGridPaging(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownLeadingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownLeadingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTrailingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTrailingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Current page index that's bound in the data source and rendered in the UI.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageIndex
  ): scala.Double = js.native
  /**
  	 * Current page index that's bound in the data source and rendered in the UI.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Drop down width for the page size and page index drop downs.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultDropDownWidth
  ): scala.Double = js.native
  /**
  	 * Drop down width for the page size and page index drop downs.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultDropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayOnPageChanged
  ): scala.Double = js.native
  /**
  	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayOnPageChanged,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridPagingLocale = js.native
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridPagingLocale
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageCountLimit
  ): scala.Double = js.native
  /**
  	 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageCountLimit,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after the page index is changed , but before grid data rebinds
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanged
  ): PageIndexChangedEvent = js.native
  /**
  	 * Event fired after the page index is changed , but before grid data rebinds
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanged,
    optionValue: PageIndexChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the page index is changed.
  	 * Return false in order to cancel page index changing.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanging
  ): PageIndexChangingEvent = js.native
  /**
  	 * Event fired before the page index is changed.
  	 * Return false in order to cancel page index changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanging,
    optionValue: PageIndexChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of records loaded and displayed per page.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSize
  ): scala.Double = js.native
  /**
  	 * Event fired after the page size is changed from the page size dropdown.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanged
  ): PageSizeChangedEvent = js.native
  /**
  	 * Event fired after the page size is changed from the page size dropdown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanged,
    optionValue: PageSizeChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the page size is about to be changed from the page size dropdown.
  	 * Return false in order to cancel page size changing.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanging
  ): PageSizeChangingEvent = js.native
  /**
  	 * Event fired when the page size is about to be changed from the page size dropdown.
  	 * Return false in order to cancel page size changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanging,
    optionValue: PageSizeChangingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLocation
  ): java.lang.String = js.native
  /**
  	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTrailingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTrailingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeList
  ): js.Any = js.native
  /**
  	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeList,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of records loaded and displayed per page.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
  	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageTooltipFormat
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
  	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageTooltipFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
  	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
  	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the pager footer is rendered
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendered
  ): PagerRenderedEvent = js.native
  /**
  	 * Event fired after the pager footer is rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendered,
    optionValue: PagerRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the pager footer is rendered (the whole area below the grid records).
  	 *  Event fired after the page size is changed from the page size dropdown.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendering
  ): PagerRenderingEvent = js.native
  /**
  	 * Event fired before the pager footer is rendered (the whole area below the grid records).
  	 *  Event fired after the page size is changed from the page size dropdown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendering,
    optionValue: PagerRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables paging persistence between states.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables paging persistence between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey
  ): java.lang.String = js.native
  /**
  	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to render the first and last page navigation buttons.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFirstLastPages
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to render the first and last page navigation buttons.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFirstLastPages,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPageSizeDropDown
  ): scala.Boolean = js.native
  /**
  	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPageSizeDropDown,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to show summary label for the currently rendered records or not.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPagerRecordsLabel
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to show summary label for the currently rendered records or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPagerRecordsLabel,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to render the previous and next page navigation buttons.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPrevNextPages
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to render the previous and next page navigation buttons.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPrevNextPages,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
  	 *
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visiblePageCount
  ): scala.Double = js.native
  /**
  	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visiblePageCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridPaging(options: IgGridPaging): JQuery = js.native
  @JSName("igGridPaging")
  def igGridPaging_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridPaging")
  def igGridPaging_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridPaging")
  def igGridPaging_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridPaging")
  def igGridPaging_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridPaging")
  def igGridPaging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridPaging")
  def igGridPaging_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridPaging")
  def igGridPaging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridPaging): JQuery = js.native
  @JSName("igGridPaging")
  def igGridPaging_pageIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageIndex): scala.Double = js.native
  @JSName("igGridPaging")
  def igGridPaging_pageIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageIndex, index: scala.Double): scala.Double = js.native
  @JSName("igGridPaging")
  def igGridPaging_pageSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageSize): scala.Double = js.native
  @JSName("igGridPaging")
  def igGridPaging_pageSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageSize, size: scala.Double): scala.Double = js.native
  def igGridResizing(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Resize the column to the size of the longest currently visible cell value.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDoubleClickToResize
  ): scala.Boolean = js.native
  /**
  	 * Resize the column to the size of the longest currently visible cell value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDoubleClickToResize,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the resizing has been executed and results are rendered
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResized
  ): ColumnResizedEvent = js.native
  /**
  	 * Event fired after the resizing has been executed and results are rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResized,
    optionValue: ColumnResizedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a resizing operation is executed.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizing
  ): ColumnResizingEvent = js.native
  /**
  	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizingRefused
  ): ColumnResizingRefusedEvent = js.native
  /**
  	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizingRefused,
    optionValue: ColumnResizingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a resizing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizing,
    optionValue: ColumnResizingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies resizing options on a per column basis.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridResizingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies resizing options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridResizingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferredResizing
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferredResizing,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.handleThreshold
  ): scala.Double = js.native
  /**
  	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.handleThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igGridResizing(options: IgGridResizing): JQuery = js.native
  @JSName("igGridResizing")
  def igGridResizing_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridResizing")
  def igGridResizing_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridResizing")
  def igGridResizing_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igGridResizing")
  def igGridResizing_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridResizing")
  def igGridResizing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridResizing")
  def igGridResizing_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridResizing")
  def igGridResizing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridResizing): JQuery = js.native
  @JSName("igGridResizing")
  def igGridResizing_resize(methodName: igniteDashUiLib.igniteDashUiLibStrings.resize, column: js.Object): scala.Unit = js.native
  @JSName("igGridResizing")
  def igGridResizing_resize(methodName: igniteDashUiLib.igniteDashUiLibStrings.resize, column: js.Object, width: js.Object): scala.Unit = js.native
  def igGridResponsive(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
  	 * forcing vertical rendering for the grid
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowedColumnWidthPerType
  ): IgGridResponsiveAllowedColumnWidthPerType = js.native
  /**
  	 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
  	 * forcing vertical rendering for the grid
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowedColumnWidthPerType,
    optionValue: IgGridResponsiveAllowedColumnWidthPerType
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridResponsiveColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridResponsiveColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Enable or disable the responsive vertical rendering for the grid.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableVerticalRendering
  ): scala.Boolean = js.native
  /**
  	 * Enable or disable the responsive vertical rendering for the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableVerticalRendering,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.forceResponsiveGridWidth
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.forceResponsiveGridWidth,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The width of the properties column when vertical rendering is enabled
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertiesColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the properties column when vertical rendering is enabled
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertiesColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertiesColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.reactOnContainerWidthChanges
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.reactOnContainerWidthChanges,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after a hiding operation is executed on the collection of columns.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnHidden
  ): ResponsiveColumnHiddenEvent = js.native
  /**
  	 * Event fired after a hiding operation is executed on the collection of columns.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnHidden,
    optionValue: ResponsiveColumnHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed on a collection of columns.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnHiding
  ): ResponsiveColumnHidingEvent = js.native
  /**
  	 * Event fired before a hiding operation is executed on a collection of columns.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnHiding,
    optionValue: ResponsiveColumnHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a showing operation is executed on a collection of columns.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnShowing
  ): ResponsiveColumnShowingEvent = js.native
  /**
  	 * Event fired before a showing operation is executed on a collection of columns.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnShowing,
    optionValue: ResponsiveColumnShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a showing operation is executed on the collection of columns.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnShown
  ): ResponsiveColumnShownEvent = js.native
  /**
  	 * Event fired after a showing operation is executed on the collection of columns.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveColumnShown,
    optionValue: ResponsiveColumnShownEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when the widget detects an environment change.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveModeChanged
  ): ResponsiveModeChangedEvent = js.native
  /**
  	 * Event which is fired when the widget detects an environment change.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveModeChanged,
    optionValue: ResponsiveModeChangedEvent
  ): scala.Unit = js.native
  /**
  	 * The recognized types of environments and their configuration.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveModes
  ): js.Any = js.native
  /**
  	 * The recognized types of environments and their configuration.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveModes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The amount of pixels the window needs to resize with for the grid to respond.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveSensitivity
  ): scala.Double = js.native
  /**
  	 * The amount of pixels the window needs to resize with for the grid to respond.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responsiveSensitivity,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets a template to render a record with in a list-view style layout per mode.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.singleColumnTemplate
  ): js.Any = js.native
  /**
  	 * Sets a template to render a record with in a list-view style layout per mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.singleColumnTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The width of the values column when vertical rendering is enabled
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valuesColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the values column when vertical rendering is enabled
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valuesColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valuesColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The window's width under which the grid will render its contents vertically.
  	 *
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowWidthToRenderVertically
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The window's width under which the grid will render its contents vertically.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowWidthToRenderVertically,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridResponsive(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowWidthToRenderVertically,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igGridResponsive(options: IgGridResponsive): JQuery = js.native
  @JSName("igGridResponsive")
  def igGridResponsive_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridResponsive")
  def igGridResponsive_getCurrentResponsiveMode(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCurrentResponsiveMode): scala.Unit = js.native
  @JSName("igGridResponsive")
  def igGridResponsive_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridResponsive")
  def igGridResponsive_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridResponsive")
  def igGridResponsive_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridResponsive): JQuery = js.native
  def igGridRowSelectors(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired after a row selector checkbox had changed state.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanged
  ): CheckBoxStateChangedEvent = js.native
  /**
  	 * Event fired after a row selector checkbox had changed state.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanged,
    optionValue: CheckBoxStateChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when a row selector checkbox is changing.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanging
  ): CheckBoxStateChangingEvent = js.native
  /**
  	 * Event fired when a row selector checkbox is changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanging,
    optionValue: CheckBoxStateChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom template for "deselect all" overlay with paging
  	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deselectAllForPagingTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for "deselect all" overlay with paging
  	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deselectAllForPagingTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Determines whether the row selectors column should contain checkboxes
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableCheckBoxes
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the row selectors column should contain checkboxes
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableCheckBoxes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Determines whether the row selectors column should contain row numbering
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRowNumbering
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the row selectors column should contain row numbering
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRowNumbering,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableSelectAllForPaging
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableSelectAllForPaging,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridRowSelectorsLocale = js.native
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridRowSelectorsLocale
  ): scala.Unit = js.native
  /**
  	 * Determines whether the selection feature is required for the row selectors. If set to "false"
  	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
  	 * not available.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requireSelection
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the selection feature is required for the row selectors. If set to "false"
  	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
  	 * not available.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requireSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The seed to be added to the default numbering
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowNumberingSeed
  ): scala.Double = js.native
  /**
  	 * The seed to be added to the default numbering
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowNumberingSeed,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row selector is clicked.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorClicked
  ): RowSelectorClickedEvent = js.native
  /**
  	 * Event fired after a row selector is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorClicked,
    optionValue: RowSelectorClickedEvent
  ): scala.Unit = js.native
  /**
  	 * Defines width of the row selector`s column in pixels or percentage.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Defines width of the row selector`s column in pixels or percentage.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Custom template for "select all" overlay with paging
  	 * Element with attribute data-rs-select-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectAllForPagingTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for "select all" overlay with paging
  	 * Element with attribute data-rs-select-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectAllForPagingTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
  	 *
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCheckBoxesOnFocus
  ): scala.Boolean = js.native
  /**
  	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCheckBoxesOnFocus,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridRowSelectors(options: IgGridRowSelectors): JQuery = js.native
  @JSName("igGridRowSelectors")
  def igGridRowSelectors_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridRowSelectors")
  def igGridRowSelectors_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridRowSelectors")
  def igGridRowSelectors_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridRowSelectors")
  def igGridRowSelectors_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridRowSelectors")
  def igGridRowSelectors_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridRowSelectors): JQuery = js.native
  def igGridSelection(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activation
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activation,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after a cell becomes active (focus style applied).
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged
  ): ActiveCellChangedEvent = js.native
  /**
  	 * Event fired after a cell becomes active (focus style applied).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged,
    optionValue: ActiveCellChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a cell becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active cell changing.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanging
  ): ActiveCellChangingEvent = js.native
  /**
  	 * Event fired before a cell becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active cell changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanging,
    optionValue: ActiveCellChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row becomes active (focus style applied).
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanged
  ): ActiveRowChangedEvent = js.native
  /**
  	 * Event fired after a row becomes active (focus style applied).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanged,
    optionValue: ActiveRowChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a row becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active row changing.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanging
  ): ActiveRowChangingEvent = js.native
  /**
  	 * Event fired before a row becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active row changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanging,
    optionValue: ActiveRowChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowMultipleRangeSelection
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowMultipleRangeSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell(s) are selected.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanged
  ): CellSelectionChangedEvent = js.native
  /**
  	 * Event fired after cell(s) are selected.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanged,
    optionValue: CellSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell(s) are about to be selected (cancellable).
  	 * Return false in order to cancel cell selection changing.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanging
  ): CellSelectionChangingEvent = js.native
  /**
  	 * Event fired before cell(s) are about to be selected (cancellable).
  	 * Return false in order to cancel cell selection changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanging,
    optionValue: CellSelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Defines type of the selection.
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Defines type of the selection.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseDragSelect
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseDragSelect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleCellSelectOnClick
  ): scala.Boolean = js.native
  /**
  	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleCellSelectOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables / Disables multiple selection of cells and rows - depending on the mode
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleSelection
  ): scala.Boolean = js.native
  /**
  	 * Enables / Disables multiple selection of cells and rows - depending on the mode
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables / disables selection persistance between states.
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables selection persistance between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after row(s) are selected.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanged
  ): RowSelectionChangedEvent = js.native
  /**
  	 * Event fired after row(s) are selected.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanged,
    optionValue: RowSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row(s) are about to be selected (cancellable).
  	 * Return false in order to cancel selection changing.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanging
  ): RowSelectionChangingEvent = js.native
  /**
  	 * Event fired before row(s) are about to be selected (cancellable).
  	 * Return false in order to cancel selection changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanging,
    optionValue: RowSelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.skipChildren
  ): scala.Boolean = js.native
  /**
  	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.skipChildren,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.touchDragSelect
  ): scala.Boolean = js.native
  /**
  	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.touchDragSelect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
  	 *
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround
  ): scala.Boolean = js.native
  /**
  	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridSelection(options: IgGridSelection): JQuery = js.native
  @JSName("igGridSelection")
  def igGridSelection_activeCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeCell): js.Object = js.native
  @JSName("igGridSelection")
  def igGridSelection_activeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeRow): js.Object = js.native
  @JSName("igGridSelection")
  def igGridSelection_clearSelection(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearSelection): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_deselectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCell,
    row: scala.Double,
    col: scala.Double
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_deselectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCell,
    row: scala.Double,
    col: scala.Double,
    isFixed: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_deselectCellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCellById,
    id: js.Object,
    colKey: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_deselectRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectRow, index: scala.Double): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_deselectRowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectRowById, id: js.Object): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridSelection")
  def igGridSelection_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridSelection")
  def igGridSelection_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridSelection): JQuery = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCell,
    row: scala.Double,
    col: scala.Double
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCell,
    row: scala.Double,
    col: scala.Double,
    isFixed: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectCellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCellById,
    id: js.Object,
    colKey: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectRow, index: scala.Double): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectRowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectRowById, id: js.Object): scala.Unit = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectedCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCell): js.Object = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectedCells(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCells): js.Array[_] = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectedRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRow): js.Object = js.native
  @JSName("igGridSelection")
  def igGridSelection_selectedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRows): js.Array[_] = js.native
  def igGridSorting(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Defines local or remote sorting operations.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Defines local or remote sorting operations.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applySortedColumnCss
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applySortedColumnCss,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive
  ): scala.Boolean = js.native
  /**
  	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridSortingColumnSetting] = js.native
  /**
  	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridSortingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column has already been sorted and data - re-rendered.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorted
  ): ColumnSortedEvent = js.native
  /**
  	 * Event fired after the column has already been sorted and data - re-rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorted,
    optionValue: ColumnSortedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before sorting is invoked for a certain column.
  	 * Return false in order to cancel column sorting.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorting
  ): ColumnSortingEvent = js.native
  /**
  	 * Event fired before sorting is invoked for a certain column.
  	 * Return false in order to cancel column sorting.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorting,
    optionValue: ColumnSortingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customSortFunction
  ): js.Function = js.native
  /**
  	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customSortFunction,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text of the feature chooser sorting button.
  	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text of the feature chooser sorting button.
  	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection
  ): java.lang.String = js.native
  /**
  	 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridSortingLocale = js.native
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridSortingLocale
  ): scala.Unit = js.native
  /**
  	 * Gets time of milliseconds for animation duration to show/hide modal dialog.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time of milliseconds for animation duration to show/hide modal dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Apply in modal dialog is clicked
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick
  ): ModalDialogButtonApplyClickEvent = js.native
  /**
  	 * Event fired when button Apply in modal dialog is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick,
    optionValue: ModalDialogButtonApplyClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which apply changes in modal dialog.
  	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which apply changes in modal dialog.
  	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
  	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
  	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when the button to reset sorting is clicked.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick
  ): ModalDialogButtonResetClickEvent = js.native
  /**
  	 * Event fired when the button to reset sorting is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick,
    optionValue: ModalDialogButtonResetClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when button to unsort column is clicked in modal dialog
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonUnsortClick
  ): ModalDialogButtonUnsortClickEvent = js.native
  /**
  	 * Event fired when button to unsort column is clicked in modal dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonUnsortClick,
    optionValue: ModalDialogButtonUnsortClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each ascending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each ascending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each descending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each descending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for unsort button in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUnsort
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for unsort button in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUnsort,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed
  ): ModalDialogClosedEvent = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed,
    optionValue: ModalDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing
  ): ModalDialogClosingEvent = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing,
    optionValue: ModalDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered
  ): ModalDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered,
    optionValue: ModalDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering
  ): ModalDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering,
    optionValue: ModalDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets height of multiple sorting dialog.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets height of multiple sorting dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving
  ): ModalDialogMovingEvent = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving,
    optionValue: ModalDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened
  ): ModalDialogOpenedEvent = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened,
    optionValue: ModalDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening
  ): ModalDialogOpeningEvent = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening,
    optionValue: ModalDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets reset button text in multiple sorting dialog.
  	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogResetButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets reset button text in multiple sorting dialog.
  	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogResetButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets sortby button text for each unsorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortByButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets sortby button text for each unsorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortByButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortClick
  ): ModalDialogSortClickEvent = js.native
  /**
  	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortClick,
    optionValue: ModalDialogSortClickEvent
  ): scala.Unit = js.native
  /**
  	 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortOnClick
  ): scala.Boolean = js.native
  /**
  	 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortingChanged
  ): ModalDialogSortingChangedEvent = js.native
  /**
  	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortingChanged,
    optionValue: ModalDialogSortingChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of multiple sorting dialog.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets width of multiple sorting dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines single column sorting or multiple column sorting.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Defines single column sorting or multiple column sorting.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables sorting persistence when the grid is rebound.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables sorting persistence when the grid is rebound.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKey
  ): java.lang.String = js.native
  /**
  	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyAscValue
  ): java.lang.String = js.native
  /**
  	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyAscValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
  	 *
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyDescValue
  ): java.lang.String = js.native
  /**
  	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyDescValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior of multiple sorting dialog.
  	 *
  	 * owner  The multi sorting dialog will be draggable only in the grid area
  	 * window  The multi sorting dialog will be draggable in the whole window area
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortingDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior of multiple sorting dialog.
  	 *
  	 * owner  The multi sorting dialog will be draggable only in the grid area
  	 * window  The multi sorting dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortingDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
  	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unsortedColumnTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
  	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unsortedColumnTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSorting(options: IgGridSorting): JQuery = js.native
  @JSName("igGridSorting")
  def igGridSorting_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_clearSorting(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearSorting): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_closeMultipleSortingDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeMultipleSortingDialog): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_openMultipleSortingDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.openMultipleSortingDialog): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridSorting")
  def igGridSorting_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridSorting")
  def igGridSorting_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridSorting): JQuery = js.native
  @JSName("igGridSorting")
  def igGridSorting_removeDialogClearButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeDialogClearButton): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_renderMultipleSortingDialogContent(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.renderMultipleSortingDialogContent,
    isToCallEvents: js.Object
  ): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_sortColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.sortColumn,
    index: js.Object,
    direction: js.Object,
    header: js.Object
  ): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_sortMultiple(methodName: igniteDashUiLib.igniteDashUiLibStrings.sortMultiple): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_sortMultiple(methodName: igniteDashUiLib.igniteDashUiLibStrings.sortMultiple, exprs: js.Array[_]): scala.Unit = js.native
  @JSName("igGridSorting")
  def igGridSorting_unsortColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unsortColumn,
    index: js.Object,
    header: js.Object
  ): scala.Unit = js.native
  def igGridSummaries(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of summaries calculating.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of summaries calculating.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets when calculations are made.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calculateRenderMode
  ): java.lang.String = js.native
  /**
  	 * Sets when calculations are made.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calculateRenderMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Function reference - it is called when data is retrieved from the data source
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.callee
  ): js.Function = js.native
  /**
  	 * Function reference - it is called when data is retrieved from the data source
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.callee,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies custom summaries options per column basis
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridSummariesColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies custom summaries options per column basis
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridSummariesColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Gets how compact the summaries are rendered.
  	 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
  	 * False ensures that each summary type is occupying a separate line.
  	 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRenderingMode
  ): js.Any = js.native
  /**
  	 * Sets how compact the summaries are rendered.
  	 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
  	 * False ensures that each summary type is occupying a separate line.
  	 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRenderingMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text of the button Cancel in the summaries dropdown
  	 * Use option [locale.dialogButtonCancelText](ui.iggridsummaries#options:locale.dialogButtonCancelText).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text of the button Cancel in the summaries dropdown
  	 * Use option [locale.dialogButtonCancelText](ui.iggridsummaries#options:locale.dialogButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text of the button OK in the summaries dropdown
  	 * Use option [locale.dialogButtonOKText](ui.iggridsummaries#options:locale.dialogButtonOKText).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogButtonOKText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text of the button OK in the summaries dropdown
  	 * Use option [locale.dialogButtonOKText](ui.iggridsummaries#options:locale.dialogButtonOKText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogButtonOKText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event is fired when Cancel button is clicked in drop down.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownCancelClicked
  ): DropDownCancelClickedEvent = js.native
  /**
  	 * Event is fired when Cancel button is clicked in drop down.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownCancelClicked,
    optionValue: DropDownCancelClickedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the dropdown for a summary column is closed
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed
  ): DropDownClosedEvent = js.native
  /**
  	 * Event fired after the dropdown for a summary column is closed
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed,
    optionValue: DropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the dropdown for a summary column starts closing
  	 * Return false in order to cancel closing the drop down.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing
  ): DropDownClosingEvent = js.native
  /**
  	 * Event fired before the dropdown for a summary column starts closing
  	 * Return false in order to cancel closing the drop down.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing,
    optionValue: DropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Dropdown animation duration
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Dropdown animation duration
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Height of the dropdown in pixels
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownHeight
  ): scala.Double = js.native
  /**
  	 * Height of the dropdown in pixels
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event is fired when OK button is clicked in drop down
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOKClicked
  ): DropDownOKClickedEvent = js.native
  /**
  	 * Event is fired when OK button is clicked in drop down
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOKClicked,
    optionValue: DropDownOKClickedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the summaries dropdown is opened for a specific column
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened
  ): DropDownOpenedEvent = js.native
  /**
  	 * Event fired after the summaries dropdown is opened for a specific column
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened,
    optionValue: DropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before drop down is opened for a specific column summary
  	 * Return false in order to cancel opening the drop down.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening
  ): DropDownOpeningEvent = js.native
  /**
  	 * Event fired before drop down is opened for a specific column summary
  	 * Return false in order to cancel opening the drop down.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening,
    optionValue: DropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the dropdown in pixels
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth
  ): scala.Double = js.native
  /**
  	 * Width of the dropdown in pixels
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Empty text template to be shown for empty cells
  	 * Use option [locale.emptyCellText](ui.iggridsummaries#options:locale.emptyCellText).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyCellText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Empty text template to be shown for empty cells
  	 * Use option [locale.emptyCellText](ui.iggridsummaries#options:locale.emptyCellText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyCellText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
  	 * Use option [locale.featureChooserText](ui.iggridsummaries#options:locale.featureChooserText).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
  	 * Use option [locale.featureChooserTextHide](ui.iggridsummaries#options:locale.featureChooserTextHide).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
  	 * Use option [locale.featureChooserTextHide](ui.iggridsummaries#options:locale.featureChooserTextHide).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
  	 * Use option [locale.featureChooserText](ui.iggridsummaries#options:locale.featureChooserText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridSummariesLocale = js.native
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridSummariesLocale
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderSummaryCellFunc
  ): java.lang.String | js.Object = js.native
  /**
  	 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderSummaryCellFunc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderSummaryCellFunc,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Result template for summary result(shown in table cell)
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resultTemplate
  ): java.lang.String = js.native
  /**
  	 * Result template for summary result(shown in table cell)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resultTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Show/hide footer button(on click show/hide dropdown)
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDropDownButton
  ): scala.Boolean = js.native
  /**
  	 * Show/hide footer button(on click show/hide dropdown)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDropDownButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showSummariesButton
  ): scala.Boolean = js.native
  /**
  	 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showSummariesButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after summaries calculation are completely made
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesCalculated
  ): SummariesCalculatedEvent = js.native
  /**
  	 * Event fired after summaries calculation are completely made
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesCalculated,
    optionValue: SummariesCalculatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before summaries calculations are made
  	 * Return false in order to cancel calculation of summaries.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesCalculating
  ): SummariesCalculatingEvent = js.native
  /**
  	 * Event fired before summaries calculations are made
  	 * Return false in order to cancel calculation of summaries.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesCalculating,
    optionValue: SummariesCalculatingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for header cell button
  	 * Use option [locale.summariesHeaderButtonTooltip](ui.iggridsummaries#options:locale.summariesHeaderButtonTooltip).
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesHeaderButtonTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for header cell button
  	 * Use option [locale.summariesHeaderButtonTooltip](ui.iggridsummaries#options:locale.summariesHeaderButtonTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesHeaderButtonTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when user selects/deselects summary method from checkbox
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesMethodSelectionChanged
  ): SummariesMethodSelectionChangedEvent = js.native
  /**
  	 * Event fired when user selects/deselects summary method from checkbox
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesMethodSelectionChanged,
    optionValue: SummariesMethodSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Result key by which we get data from the result returned by remote data source.
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesResponseKey
  ): java.lang.String = js.native
  /**
  	 * Result key by which we get data from the result returned by remote data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesResponseKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event is fired after summary rows are toggled
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesToggled
  ): SummariesToggledEvent = js.native
  /**
  	 * Event is fired after summary rows are toggled
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesToggled,
    optionValue: SummariesToggledEvent
  ): scala.Unit = js.native
  /**
  	 * Event is fired bofore summary rows start toggling
  	 * Return false in order to cancel showing/hiding of summaries.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesToggling
  ): SummariesTogglingEvent = js.native
  /**
  	 * Event is fired bofore summary rows start toggling
  	 * Return false in order to cancel showing/hiding of summaries.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summariesToggling,
    optionValue: SummariesTogglingEvent
  ): scala.Unit = js.native
  /**
  	 * Determines when the summary values are calculated when type is local
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summaryExecution
  ): java.lang.String = js.native
  /**
  	 * Determines when the summary values are calculated when type is local
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summaryExecution,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set key in GET Request for summaries - used only when type is remote
  	 *
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summaryExprUrlKey
  ): java.lang.String = js.native
  /**
  	 * Set key in GET Request for summaries - used only when type is remote
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridSummaries(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.summaryExprUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridSummaries(options: IgGridSummaries): JQuery = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_calculateSummaries(methodName: igniteDashUiLib.igniteDashUiLibStrings.calculateSummaries): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_calculateSummaryColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.calculateSummaryColumn,
    ck: java.lang.String,
    columnMethods: js.Array[_],
    data: js.Object,
    dataType: js.Object
  ): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_clearAllFooterIcons(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearAllFooterIcons): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_isSummariesRowsHidden(methodName: igniteDashUiLib.igniteDashUiLibStrings.isSummariesRowsHidden): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridSummaries): JQuery = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_selectCheckBox(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCheckBox,
    $checkbox: js.Object,
    isToSelect: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_showHideDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.showHideDialog, $dialog: js.Object): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_summariesFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.summariesFor, columnKey: js.Object): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_summaryCollection(methodName: igniteDashUiLib.igniteDashUiLibStrings.summaryCollection): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_toggleCheckstate(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleCheckstate, $checkbox: js.Object): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_toggleDropDown(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleDropDown,
    columnKey: java.lang.String,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igGridSummaries")
  def igGridSummaries_toggleSummariesRows(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleSummariesRows,
    isToShow: scala.Boolean,
    isInternalCall: scala.Boolean
  ): scala.Unit = js.native
  def igGridTooltips(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): IgGridTooltipsColumnSettings = js.native
  /**
  	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: IgGridTooltipsColumnSettings
  ): scala.Unit = js.native
  /**
  	 * The left position of the tooltip relative to the mouse cursor
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorLeftOffset
  ): scala.Double = js.native
  /**
  	 * Sets the left position of the tooltip relative to the mouse cursor
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorLeftOffset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The top position of the tooltip relative to the mouse cursor
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorTopOffset
  ): scala.Double = js.native
  /**
  	 * Sets the top position of the tooltip relative to the mouse cursor
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorTopOffset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The time tooltip fades in and out when showing/hiding
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fadeTimespan
  ): scala.Double = js.native
  /**
  	 * Sets the time tooltip fades in and out when showing/hiding
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fadeTimespan,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
  	 * cursor gets outside of the cell.
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideDelay
  ): scala.Double = js.native
  /**
  	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
  	 * cursor gets outside of the cell.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The time in milliseconds after which tooltip will show when
  	 * mouse cursor is hovered over a cell.
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDelay
  ): scala.Double = js.native
  /**
  	 * The time in milliseconds after which tooltip will show when
  	 * mouse cursor is hovered over a cell.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls the tooltip's style
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.style
  ): java.lang.String = js.native
  /**
  	 * Controls the tooltip's style
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.style,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * Determines the tooltip visibility option
  	 *
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibility
  ): java.lang.String = js.native
  /**
  	 * Determines the tooltip visibility option
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridTooltips(options: IgGridTooltips): JQuery = js.native
  @JSName("igGridTooltips")
  def igGridTooltips_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igGridTooltips")
  def igGridTooltips_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igGridTooltips")
  def igGridTooltips_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridTooltips")
  def igGridTooltips_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridTooltips")
  def igGridTooltips_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridTooltips): JQuery = js.native
  def igGridUpdating(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
  	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
  	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
  	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
  	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
  	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
  	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
  	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
  	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * A list of custom column options that specify editing and validation settings for a specific column.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridUpdatingColumnSetting] = js.native
  /**
  	 * A list of custom column options that specify editing and validation settings for a specific column.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridUpdatingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
  	 * Return false in order to prevent the exception.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataDirty
  ): DataDirtyEvent = js.native
  /**
  	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
  	 * Return false in order to prevent the exception.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataDirty,
    optionValue: DataDirtyEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
  	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
  	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
  	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
  	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
  	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
  	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
  	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
  	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnded
  ): EditCellEndedEvent = js.native
  /**
  	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnded,
    optionValue: EditCellEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
  	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnding
  ): EditCellEndingEvent = js.native
  /**
  	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
  	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnding,
    optionValue: EditCellEndingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarted
  ): EditCellStartedEvent = js.native
  /**
  	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarted,
    optionValue: EditCellStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
  	 * Return false in order to cancel editing.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarting
  ): EditCellStartingEvent = js.native
  /**
  	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
  	 * Return false in order to cancel editing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarting,
    optionValue: EditCellStartingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the edit mode.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editMode
  ): java.lang.String = js.native
  /**
  	 * Sets the edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after row editing ends.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnded
  ): EditRowEndedEvent = js.native
  /**
  	 * Event fired after row editing ends.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnded,
    optionValue: EditRowEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row editing ends.
  	 * Return false in order to prevent the grid from exiting edit mode.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnding
  ): EditRowEndingEvent = js.native
  /**
  	 * Event fired before row editing ends.
  	 * Return false in order to prevent the grid from exiting edit mode.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnding,
    optionValue: EditRowEndingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after row editing begins.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarted
  ): EditRowStartedEvent = js.native
  /**
  	 * Event fired after row editing begins.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarted,
    optionValue: EditRowStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row editing begins.
  	 * Return false in order to cancel editing.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarting
  ): EditRowStartingEvent = js.native
  /**
  	 * Event fired before row editing begins.
  	 * Return false in order to cancel editing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarting,
    optionValue: EditRowStartingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddRow
  ): scala.Boolean = js.native
  /**
  	 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddRow,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDataDirtyException
  ): scala.Boolean = js.native
  /**
  	 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDataDirtyException,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if deleting rows through the UI is enabled.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDeleteRow
  ): scala.Boolean = js.native
  /**
  	 * Sets if deleting rows through the UI is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDeleteRow,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excelNavigationMode
  ): scala.Boolean = js.native
  /**
  	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excelNavigationMode,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.generatePrimaryKeyValue
  ): GeneratePrimaryKeyValueEvent = js.native
  /**
  	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.generatePrimaryKeyValue,
    optionValue: GeneratePrimaryKeyValueEvent
  ): scala.Unit = js.native
  /**
  	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalMoveOnEnter
  ): scala.Boolean = js.native
  /**
  	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalMoveOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridUpdatingLocale = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridUpdatingLocale
  ): scala.Unit = js.native
  /**
  	 * Event fired after adding a new row.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdded
  ): RowAddedEvent = js.native
  /**
  	 * Event fired after adding a new row.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdded,
    optionValue: RowAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before adding a new row.
  	 * Return false in order to cancel the adding of the new row to the data source.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdding
  ): RowAddingEvent = js.native
  /**
  	 * Event fired before adding a new row.
  	 * Return false in order to cancel the adding of the new row to the data source.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdding,
    optionValue: RowAddingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row is deleted.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleted
  ): RowDeletedEvent = js.native
  /**
  	 * Event fired after a row is deleted.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleted,
    optionValue: RowDeletedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before deleting a row.
  	 * Return false in order to cancel the row's deletion.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleting
  ): RowDeletingEvent = js.native
  /**
  	 * Event fired before deleting a row.
  	 * Return false in order to cancel the row's deletion.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleting,
    optionValue: RowDeletingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is closed.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterClose
  ): RowEditDialogAfterCloseEvent = js.native
  /**
  	 * Event fired after the row edit dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterClose,
    optionValue: RowEditDialogAfterCloseEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is opened.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterOpen
  ): RowEditDialogAfterOpenEvent = js.native
  /**
  	 * Event fired after the row edit dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterOpen,
    optionValue: RowEditDialogAfterOpenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the row edit dialog is closed.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeClose
  ): RowEditDialogBeforeCloseEvent = js.native
  /**
  	 * Event fired before the row edit dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeClose,
    optionValue: RowEditDialogBeforeCloseEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the row edit dialog is opened.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeOpen
  ): RowEditDialogBeforeOpenEvent = js.native
  /**
  	 * Event fired before the row edit dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeOpen,
    optionValue: RowEditDialogBeforeOpenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is rendered.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogContentsRendered
  ): RowEditDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the row edit dialog is rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogContentsRendered,
    optionValue: RowEditDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogOptions
  ): IgGridUpdatingRowEditDialogOptions = js.native
  /**
  	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogOptions,
    optionValue: IgGridUpdatingRowEditDialogOptions
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler
  ): js.Function | java.lang.String = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler
  ): js.Function | java.lang.String = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDoneCancelButtons
  ): scala.Boolean = js.native
  /**
  	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDoneCancelButtons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers
  ): java.lang.String | js.Array[_] = js.native
  /**
  	 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance
  ): java.lang.String | scala.Double = js.native
  /**
  	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validation
  ): scala.Boolean = js.native
  /**
  	 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validation,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
  	 *
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround
  ): scala.Boolean = js.native
  /**
  	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igGridUpdating(options: IgGridUpdating): JQuery = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_addRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.addRow, values: js.Object): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_deleteRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.deleteRow, rowId: js.Object): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_editorForCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForCell, cell: java.lang.String): js.Object = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_editorForCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForCell,
    cell: java.lang.String,
    create: scala.Boolean
  ): js.Object = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_editorForKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForKey, key: java.lang.String): js.Object = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_endEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_endEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit, update: scala.Boolean): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_endEdit(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit,
    update: scala.Boolean,
    raiseEvents: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_findInvalid(methodName: igniteDashUiLib.igniteDashUiLibStrings.findInvalid): java.lang.String = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_hideDeleteButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDeleteButton): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_isEditing(methodName: igniteDashUiLib.igniteDashUiLibStrings.isEditing): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGridUpdating): JQuery = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_setCellValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setCellValue,
    rowId: js.Object,
    colKey: java.lang.String,
    value: js.Object
  ): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_showDeleteButtonFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDeleteButtonFor, row: js.Object): scala.Unit = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_startAddRowEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddRowEdit): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_startAddRowEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddRowEdit, raiseEvents: scala.Boolean): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_startEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startEdit, rowId: js.Object, column: js.Object): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_startEdit(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.startEdit,
    rowId: js.Object,
    column: js.Object,
    raiseEvents: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igGridUpdating")
  def igGridUpdating_updateRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateRow, rowId: js.Object, values: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_activeCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeCell): js.Object = js.native
  @JSName("igGrid")
  def igGrid_activeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeRow): js.Object = js.native
  @JSName("igGrid")
  def igGrid_allFixedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.allFixedRows): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_allRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.allRows): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_allTransactions(methodName: igniteDashUiLib.igniteDashUiLibStrings.allTransactions): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_autoSizeColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.autoSizeColumns): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_calculateAutoFitColumnWidth(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.calculateAutoFitColumnWidth,
    columnIndex: scala.Double
  ): scala.Double = js.native
  @JSName("igGrid")
  def igGrid_cellAt(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.cellAt,
    x: scala.Double,
    y: scala.Double,
    isFixed: scala.Boolean
  ): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_cellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.cellById,
    rowId: js.Object,
    columnKey: java.lang.String
  ): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_children(methodName: igniteDashUiLib.igniteDashUiLibStrings.children): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_childrenWidgets(methodName: igniteDashUiLib.igniteDashUiLibStrings.childrenWidgets): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_columnByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.columnByKey, key: java.lang.String): js.Object = js.native
  @JSName("igGrid")
  def igGrid_columnByText(methodName: igniteDashUiLib.igniteDashUiLibStrings.columnByText, text: java.lang.String): js.Object = js.native
  @JSName("igGrid")
  def igGrid_commit(methodName: igniteDashUiLib.igniteDashUiLibStrings.commit): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_commit(methodName: igniteDashUiLib.igniteDashUiLibStrings.commit, rowId: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind, internal: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_dataSourceObject(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceObject, dataSource: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy, notToCallDestroy: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_findRecordByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.findRecordByKey, key: js.Object): js.Object = js.native
  @JSName("igGrid")
  def igGrid_fixedBodyContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedBodyContainer): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_fixedContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedContainer): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_fixedFooterContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooterContainer): js.Object = js.native
  @JSName("igGrid")
  def igGrid_fixedFootersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedFootersTable): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_fixedHeaderContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaderContainer): js.Object = js.native
  @JSName("igGrid")
  def igGrid_fixedHeadersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeadersTable): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_fixedRowAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedRowAt, i: scala.Double): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_fixedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedRows): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_fixedTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedTable): js.Object = js.native
  @JSName("igGrid")
  def igGrid_fixingDirection(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection): java.lang.String = js.native
  @JSName("igGrid")
  def igGrid_footersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.footersTable): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_getCellText(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getCellText,
    rowId: js.Object,
    colKey: java.lang.String
  ): java.lang.String = js.native
  @JSName("igGrid")
  def igGrid_getCellValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getCellValue,
    rowId: js.Object,
    colKey: java.lang.String
  ): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getColumnByTD(methodName: igniteDashUiLib.igniteDashUiLibStrings.getColumnByTD, $td: js.Object): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getDetachedRecord(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDetachedRecord, t: js.Object): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getElementInfo(methodName: igniteDashUiLib.igniteDashUiLibStrings.getElementInfo, elem: stdLib.Element): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getUnboundColumnByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.getUnboundColumnByKey, key: java.lang.String): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getUnboundValues(methodName: igniteDashUiLib.igniteDashUiLibStrings.getUnboundValues, key: java.lang.String): js.Object = js.native
  @JSName("igGrid")
  def igGrid_getVisibleIndexByKey(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getVisibleIndexByKey,
    columnKey: java.lang.String,
    includeDataSkip: scala.Boolean
  ): scala.Double = js.native
  @JSName("igGrid")
  def igGrid_hasFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFixedColumns): scala.Boolean = js.native
  @JSName("igGrid")
  def igGrid_hasFixedDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFixedDataSkippedColumns): scala.Boolean = js.native
  @JSName("igGrid")
  def igGrid_hasVerticalScrollbar(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasVerticalScrollbar): js.Object = js.native
  @JSName("igGrid")
  def igGrid_headersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.headersTable): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_hideColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igGrid")
  def igGrid_immediateChildren(methodName: igniteDashUiLib.igniteDashUiLibStrings.immediateChildren): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_immediateChildrenWidgets(methodName: igniteDashUiLib.igniteDashUiLibStrings.immediateChildrenWidgets): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_isFixedColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.isFixedColumn, colKey: js.Object): scala.Boolean = js.native
  @JSName("igGrid")
  def igGrid_isGroupHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.isGroupHeader, colKey: java.lang.String): js.Object = js.native
  @JSName("igGrid")
  def igGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igGrid")
  def igGrid_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igGrid")
  def igGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgGrid): JQuery = js.native
  @JSName("igGrid")
  def igGrid_pendingTransactions(methodName: igniteDashUiLib.igniteDashUiLibStrings.pendingTransactions): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_renderMultiColumnHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderMultiColumnHeader, cols: js.Array[_]): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_renderNewRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewRow): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_renderNewRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewRow, rec: java.lang.String): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_resizeContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.resizeContainer): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback, rowId: js.Object): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_rollback(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback,
    rowId: js.Object,
    updateUI: scala.Boolean
  ): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_rowAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.rowAt, i: scala.Double): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_rowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.rowById, rowId: js.Object): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_rowById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.rowById,
    rowId: js.Object,
    isFixed: scala.Boolean
  ): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_rows(methodName: igniteDashUiLib.igniteDashUiLibStrings.rows): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_saveChanges(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.saveChanges,
    success: js.Function,
    error: js.Function
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_scrollContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.scrollContainer): stdLib.Element = js.native
  @JSName("igGrid")
  def igGrid_selectedCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCell): js.Object = js.native
  @JSName("igGrid")
  def igGrid_selectedCells(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCells): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_selectedRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRow): js.Object = js.native
  @JSName("igGrid")
  def igGrid_selectedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRows): js.Array[_] = js.native
  @JSName("igGrid")
  def igGrid_setColumnTemplate(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setColumnTemplate,
    col: js.Object,
    tmpl: java.lang.String
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_setColumnTemplate(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setColumnTemplate,
    col: js.Object,
    tmpl: java.lang.String,
    render: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_setUnboundValueByPK(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setUnboundValueByPK,
    col: java.lang.String,
    rowId: java.lang.String,
    `val`: js.Object,
    notToRender: js.Object
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_setUnboundValues(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setUnboundValues,
    key: java.lang.String,
    values: js.Array[_],
    removeOldValues: js.Object
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_showColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_totalRecordsCount(methodName: igniteDashUiLib.igniteDashUiLibStrings.totalRecordsCount): scala.Double = js.native
  @JSName("igGrid")
  def igGrid_transactionsAsString(methodName: igniteDashUiLib.igniteDashUiLibStrings.transactionsAsString): java.lang.String = js.native
  @JSName("igGrid")
  def igGrid_virtualScrollTo(methodName: igniteDashUiLib.igniteDashUiLibStrings.virtualScrollTo, scrollerPosition: js.Object): scala.Unit = js.native
  @JSName("igGrid")
  def igGrid_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igHierarchicalGrid(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.ighierarchicalgrid#options:autoCommit) is set to false.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions
  ): scala.Boolean = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.ighierarchicalgrid#options:autoCommit) is set to false.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The row expanding/collapsing animation duration in ms.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * The row expanding/collapsing animation duration in ms.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.ighierarchicalgrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.ighierarchicalgrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight
  ): scala.Boolean = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.ighierarchicalgrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.ighierarchicalgrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.ighierarchicalgrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit
  ): scala.Boolean = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.ighierarchicalgrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat
  ): java.lang.String | scala.Boolean = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If no [columns](ui.ighierarchicalgrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.ighierarchicalgrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.ighierarchicalgrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.ighierarchicalgrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) as well.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns
  ): scala.Boolean = js.native
  /**
  	 * If no [columns](ui.ighierarchicalgrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.ighierarchicalgrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.ighierarchicalgrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.ighierarchicalgrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.ighierarchicalgrid#options:defaultColumnWidth) as well.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
  	 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateLayouts
  ): scala.Boolean = js.native
  /**
  	 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
  	 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateLayouts,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn
  ): scala.Boolean = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Used for [column virtualization](ui.ighierarchicalgrid#options:columnVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels for a column width.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Used for [column virtualization](ui.ighierarchicalgrid#options:columnVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels for a column width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Used for [row virtualization](ui.ighierarchicalgrid#options:rowVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Used for [row virtualization](ui.ighierarchicalgrid#options:rowVirtualization) in [fixed mode](ui.ighierarchicalgrid#options:virtualizationMode). This is the average value in pixels (default) that will be used to calculate how many rows to render as the end user scrolls. Also all rows' height will be automatically set to this value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption
  ): java.lang.String = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered
  ): CaptionRenderedEvent = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered,
    optionValue: CaptionRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering
  ): CaptionRenderingEvent = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering,
    optionValue: CaptionRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick
  ): CellClickEvent = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick,
    optionValue: CellClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick
  ): CellRightClickEvent = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick,
    optionValue: CellRightClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a child grid is created
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridCreated
  ): ChildGridCreatedEvent = js.native
  /**
  	 * Event fired after a child grid is created
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridCreated,
    optionValue: ChildGridCreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridCreating
  ): ChildGridCreatingEvent = js.native
  /**
  	 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridCreating,
    optionValue: ChildGridCreatingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when child grid is rendered
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridRendered
  ): ChildGridRenderedEvent = js.native
  /**
  	 * Event fired when child grid is rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childGridRendered,
    optionValue: ChildGridRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when children have been populated (Load on demand)
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childrenPopulated
  ): ChildrenPopulatedEvent = js.native
  /**
  	 * Event which is fired when children have been populated (Load on demand)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childrenPopulated,
    optionValue: ChildrenPopulatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when children are about to be populated (Load on demand)
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childrenPopulating
  ): ChildrenPopulatingEvent = js.native
  /**
  	 * Event which is fired when children are about to be populated (Load on demand)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childrenPopulating,
    optionValue: ChildrenPopulatingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the default tooltip applied to an expand column cell, that is currently expanded. Use option [locale.collapseTooltip](ui.ighierarchicalgrid#options:locale.collapseTooltip).
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the default tooltip applied to an expand column cell, that is currently expanded. Use option [locale.collapseTooltip](ui.ighierarchicalgrid#options:locale.collapseTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnLayouts
  ): js.Array[IgHierarchicalGridColumnLayout] = js.native
  /**
  	 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnLayouts,
    optionValue: js.Array[IgHierarchicalGridColumnLayout]
  ): scala.Unit = js.native
  /**
  	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.ighierarchicalgrid#options:virtualization) to true and [virtualizationMode](ui.ighierarchicalgrid#options:virtualizationMode) to "fixed".
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization
  ): scala.Boolean = js.native
  /**
  	 * Enables virtualization for columns only. Column virtualization can work only in combination with fixed row virtalization. Setting columnVirtualization to true will automatically set [virtualization](ui.ighierarchicalgrid#options:virtualization) to true and [virtualizationMode](ui.ighierarchicalgrid#options:virtualizationMode) to "fixed".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns
  ): js.Array[IgHierarchicalGridColumn] = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified
  ): ColumnsCollectionModifiedEvent = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified,
    optionValue: ColumnsCollectionModifiedEvent
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns,
    optionValue: js.Array[IgHierarchicalGridColumn]
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created
  ): CreatedEvent = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created,
    optionValue: CreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after data binding is complete.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event fired after data binding is complete.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered
  ): DataRenderedEvent = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered,
    optionValue: DataRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering
  ): DataRenderingEvent = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering,
    optionValue: DataRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): java.lang.String | js.Array[_] | js.Object = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets the default property in the response where children will be located
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultChildrenDataProperty
  ): java.lang.String = js.native
  /**
  	 * Sets the default property in the response where children will be located
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultChildrenDataProperty,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.ighierarchicalgrid#options:columns.width) defined.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.ighierarchicalgrid#options:columns.width) defined.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is destroyed
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed
  ): DestroyedEvent = js.native
  /**
  	 * Fired when the grid is destroyed
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed,
    optionValue: DestroyedEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.ighierarchicalgrid#options:width) and/or [height](ui.ighierarchicalgrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.ighierarchicalgrid#options:width) and/or [height](ui.ighierarchicalgrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Nables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Nables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the expand column width
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandColWidth
  ): scala.Double = js.native
  /**
  	 * Sets the expand column width
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandColWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Applies a linear animation - either expanding or collapsing depending on the parent row state
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandCollapseAnimations
  ): scala.Boolean = js.native
  /**
  	 * Applies a linear animation - either expanding or collapsing depending on the parent row state
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandCollapseAnimations,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the default tooltip applied to an expand column cell, that is currently collapsed. Use option [locale.columnChooserCaptionText](ui.ighierarchicalgrid#options:locale.expandTooltip).
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the default tooltip applied to an expand column cell, that is currently collapsed. Use option [locale.columnChooserCaptionText](ui.ighierarchicalgrid#options:locale.expandTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay
  ): java.lang.String = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features
  ): js.Array[IgHierarchicalGridFeature] = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features,
    optionValue: js.Array[IgHierarchicalGridFeature]
  ): scala.Unit = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters
  ): scala.Boolean = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders
  ): scala.Boolean = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.ighierarchicalgrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered
  ): FooterRenderedEvent = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered,
    optionValue: FooterRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering
  ): FooterRenderingEvent = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering,
    optionValue: FooterRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered
  ): HeaderCellRenderedEvent = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered,
    optionValue: HeaderCellRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered
  ): HeaderRenderedEvent = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered,
    optionValue: HeaderRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering
  ): HeaderRenderingEvent = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering,
    optionValue: HeaderRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will render the child grids up to the specified level.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialDataBindDepth
  ): scala.Double = js.native
  /**
  	 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will render the child grids up to the specified level.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialDataBindDepth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * No levels will be automatically expanded when the widget is instantiated for the first time
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth
  ): scala.Double = js.native
  /**
  	 * No levels will be automatically expanded when the widget is instantiated for the first time
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest
  ): scala.Boolean = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.ighierarchicalgrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.ighierarchicalgrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.ighierarchicalgrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.ighierarchicalgrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgHierarchicalGridLocale = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgHierarchicalGridLocale
  ): scala.Unit = js.native
  /**
  	 * Gets the limit on the number of levels to bind to
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDataBindDepth
  ): scala.Double = js.native
  /**
  	 * Sets the limit on the number of levels to bind to
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDataBindDepth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns
  ): scala.Boolean = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If true, encodes all requests using OData conventions and the $expand syntax
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.odata
  ): scala.Boolean = js.native
  /**
  	 * If true, encodes all requests using OData conventions and the $expand syntax
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.odata,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the delimiter for constructing paths , for hierarchical lookup of data
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pathSeparator
  ): java.lang.String = js.native
  /**
  	 * Sets the delimiter for constructing paths , for hierarchical lookup of data
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pathSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey
  ): java.lang.String = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.ighierarchicalgrid#options:columns.template).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes
  ): scala.Boolean = js.native
  /**
  	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.ighierarchicalgrid#options:columns.template).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError
  ): RequestErrorEvent = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError,
    optionValue: RequestErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
  	 * the ajax GET calls.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rest
  ): scala.Boolean = js.native
  /**
  	 * Settings related to REST compliant update routines.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings
  ): IgHierarchicalGridRestSettings = js.native
  /**
  	 * Settings related to REST compliant update routines.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings,
    optionValue: IgHierarchicalGridRestSettings
  ): scala.Unit = js.native
  /**
  	 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
  	 * the ajax GET calls.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rest,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a hierarchical row has been collapsed
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsed
  ): RowCollapsedEvent = js.native
  /**
  	 * Event which is fired when a hierarchical row has been collapsed
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsed,
    optionValue: RowCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a hierarchical row is about to be collapsed
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsing
  ): RowCollapsingEvent = js.native
  /**
  	 * Event which is fired when a hierarchical row is about to be collapsed
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsing,
    optionValue: RowCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired after a hierarchical row has been expanded
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanded
  ): RowExpandedEvent = js.native
  /**
  	 * Event which is fired after a hierarchical row has been expanded
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanded,
    optionValue: RowExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a hierarchical row is about to be expanded
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanding
  ): RowExpandingEvent = js.native
  /**
  	 * Event which is fired when a hierarchical row is about to be expanded
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanding,
    optionValue: RowExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization
  ): scala.Boolean = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered
  ): RowsRenderedEvent = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered,
    optionValue: RowsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering
  ): RowsRenderingEvent = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering,
    optionValue: RowsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated
  ): SchemaGeneratedEvent = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated,
    optionValue: SchemaGeneratedEvent
  ): scala.Unit = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings
  ): IgHierarchicalGridScrollSettings = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings,
    optionValue: IgHierarchicalGridScrollSettings
  ): scala.Unit = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog
  ): scala.Boolean = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.ighierarchicalgrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine
  ): java.lang.String = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.ighierarchicalgrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl
  ): java.lang.String = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization
  ): scala.Boolean = js.native
  /**
  	 * Determines row virtualization mode.
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode
  ): java.lang.String = js.native
  /**
  	 * Determines row virtualization mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep
  ): scala.Double = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.ighierarchicalgrid#options:avgRowHeight).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHierarchicalGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igHierarchicalGrid(options: IgHierarchicalGrid): JQuery = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_allChildren(methodName: igniteDashUiLib.igniteDashUiLibStrings.allChildren): js.Object = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_allChildrenWidgets(methodName: igniteDashUiLib.igniteDashUiLibStrings.allChildrenWidgets): js.Object = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse, id: stdLib.Element): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_collapse(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse,
    id: stdLib.Element,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_collapsed(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapsed, element: stdLib.Element): scala.Boolean = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_commit(methodName: igniteDashUiLib.igniteDashUiLibStrings.commit): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand, id: stdLib.Element): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_expand(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expand,
    id: stdLib.Element,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_expanded(methodName: igniteDashUiLib.igniteDashUiLibStrings.expanded, element: stdLib.Element): scala.Boolean = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgHierarchicalGrid): JQuery = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_populated(methodName: igniteDashUiLib.igniteDashUiLibStrings.populated, element: stdLib.Element): scala.Boolean = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback, rebind: scala.Boolean): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_root(methodName: igniteDashUiLib.igniteDashUiLibStrings.root): js.Object = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_rootWidget(methodName: igniteDashUiLib.igniteDashUiLibStrings.rootWidget): js.Object = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_saveChanges(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.saveChanges,
    success: js.Function,
    error: js.Function
  ): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle, element: stdLib.Element): scala.Unit = js.native
  @JSName("igHierarchicalGrid")
  def igHierarchicalGrid_toggle(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle,
    element: stdLib.Element,
    callback: js.Function
  ): scala.Unit = js.native
  def igHtmlEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired after a toolbar item is clicked.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuted
  ): ActionExecutedEvent = js.native
  /**
  	 * Event fired after a toolbar item is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuted,
    optionValue: ActionExecutedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a toolbar item is clicked.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuting
  ): ActionExecutingEvent = js.native
  /**
  	 * Event fired before a toolbar item is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuting,
    optionValue: ActionExecutingEvent
  ): scala.Unit = js.native
  /**
  	 * Event is fired on keyboard copy action.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.copy
  ): CopyEvent = js.native
  /**
  	 * Event is fired on keyboard copy action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.copy,
    optionValue: CopyEvent
  ): scala.Unit = js.native
  /**
  	 * The html editor custom toolbars list.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customToolbars
  ): js.Array[_] = js.native
  /**
  	 * The html editor custom toolbars list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customToolbars,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Event is fired on keyboard cut action.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cut
  ): CutEvent = js.native
  /**
  	 * Event is fired on keyboard cut action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cut,
    optionValue: CutEvent
  ): scala.Unit = js.native
  /**
  	 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The name attribute of the html editor source view.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * The name attribute of the html editor source view.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event is fired on keyboard paste action.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.paste
  ): PasteEvent = js.native
  /**
  	 * Event is fired on keyboard paste action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.paste,
    optionValue: PasteEvent
  ): scala.Unit = js.native
  /**
  	 * Event is fired on keyboard redo action.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.redo
  ): RedoEvent = js.native
  /**
  	 * Event is fired on keyboard redo action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.redo,
    optionValue: RedoEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event fired after the html editor widget has been rendered.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event fired after the html editor widget has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the html editor widget is rendered.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Event fired before the html editor widget is rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Shows/hides the "Copy Paste" toolbar.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCopyPasteToolbar
  ): scala.Boolean = js.native
  /**
  	 * Shows/hides the "Copy Paste" toolbar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCopyPasteToolbar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Shows/hides the "Formatting" toolbar.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFormattingToolbar
  ): scala.Boolean = js.native
  /**
  	 * Shows/hides the "Formatting" toolbar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFormattingToolbar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Shows/hides the "Insert Object" toolbar.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showInsertObjectToolbar
  ): scala.Boolean = js.native
  /**
  	 * Shows/hides the "Insert Object" toolbar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showInsertObjectToolbar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Shows/hides the "Text" toolbar.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showTextToolbar
  ): scala.Boolean = js.native
  /**
  	 * Shows/hides the "Text" toolbar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showTextToolbar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after a toolbar is collapsed.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCollapsed
  ): ToolbarCollapsedEvent = js.native
  /**
  	 * Event fired after a toolbar is collapsed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCollapsed,
    optionValue: ToolbarCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a toolbar is collapsed.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCollapsing
  ): ToolbarCollapsingEvent = js.native
  /**
  	 * Event fired before a toolbar is collapsed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCollapsing,
    optionValue: ToolbarCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a toolbar is expanded.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarExpanded
  ): ToolbarExpandedEvent = js.native
  /**
  	 * Event fired after a toolbar is expanded.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarExpanded,
    optionValue: ToolbarExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a toolbar is expanded.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarExpanding
  ): ToolbarExpandingEvent = js.native
  /**
  	 * Event fired before a toolbar is expanded.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarExpanding,
    optionValue: ToolbarExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * The html editor toolbars list.
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarSettings
  ): js.Array[_] = js.native
  /**
  	 * The html editor toolbars list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarSettings,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Event is fired on keyboard undo action.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.undo
  ): UndoEvent = js.native
  /**
  	 * Event is fired on keyboard undo action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.undo,
    optionValue: UndoEvent
  ): scala.Unit = js.native
  /**
  	 * Used to render inside the html editor as initial content
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): java.lang.String = js.native
  /**
  	 * Used to render inside the html editor as initial content
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event is fired after the workspace has been resized
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workspaceResized
  ): WorkspaceResizedEvent = js.native
  /**
  	 * Event is fired after the workspace has been resized
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igHtmlEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workspaceResized,
    optionValue: WorkspaceResizedEvent
  ): scala.Unit = js.native
  def igHtmlEditor(options: IgHtmlEditor): JQuery = js.native
  def igHtmlEditorPopover(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply
  ): ApplyEvent = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply,
    optionValue: ApplyEvent
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel
  ): CancelEvent = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel,
    optionValue: CancelEvent
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide
  ): HideEvent = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide,
    optionValue: HideEvent
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden
  ): scala.Boolean = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item
  ): js.Any = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show
  ): ShowEvent = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show,
    optionValue: ShowEvent
  ): scala.Unit = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target
  ): js.Any = js.native
  def igHtmlEditorPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igHtmlEditorPopover(options: IgHtmlEditorPopover): JQuery = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgHtmlEditorPopover): JQuery = js.native
  @JSName("igHtmlEditorPopover")
  def igHtmlEditorPopover_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, item: js.Object): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_contentDocument(methodName: igniteDashUiLib.igniteDashUiLibStrings.contentDocument): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_contentEditable(methodName: igniteDashUiLib.igniteDashUiLibStrings.contentEditable): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_contentWindow(methodName: igniteDashUiLib.igniteDashUiLibStrings.contentWindow): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_executeAction(methodName: igniteDashUiLib.igniteDashUiLibStrings.executeAction, actionName: java.lang.String): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_executeAction(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.executeAction,
    actionName: java.lang.String,
    args: js.Object
  ): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_getContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContent, format: java.lang.String): java.lang.String = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_insertAtCaret(methodName: igniteDashUiLib.igniteDashUiLibStrings.insertAtCaret, element: js.Object): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_isDirty(methodName: igniteDashUiLib.igniteDashUiLibStrings.isDirty): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgHtmlEditor): JQuery = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_range(methodName: igniteDashUiLib.igniteDashUiLibStrings.range): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_resizeWorkspace(methodName: igniteDashUiLib.igniteDashUiLibStrings.resizeWorkspace): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_selection(methodName: igniteDashUiLib.igniteDashUiLibStrings.selection): js.Object = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_setContent(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setContent,
    content: java.lang.String,
    format: java.lang.String
  ): scala.Unit = js.native
  @JSName("igHtmlEditor")
  def igHtmlEditor_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igImagePropertiesDialog(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply
  ): ApplyEvent = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply,
    optionValue: ApplyEvent
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel
  ): CancelEvent = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel,
    optionValue: CancelEvent
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide
  ): HideEvent = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide,
    optionValue: HideEvent
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden
  ): scala.Boolean = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item
  ): js.Any = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show
  ): ShowEvent = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show,
    optionValue: ShowEvent
  ): scala.Unit = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target
  ): js.Any = js.native
  def igImagePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igImagePropertiesDialog(options: IgImagePropertiesDialog): JQuery = js.native
  @JSName("igImagePropertiesDialog")
  def igImagePropertiesDialog_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igImagePropertiesDialog")
  def igImagePropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igImagePropertiesDialog")
  def igImagePropertiesDialog_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igImagePropertiesDialog")
  def igImagePropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgImagePropertiesDialog): JQuery = js.native
  @JSName("igImagePropertiesDialog")
  def igImagePropertiesDialog_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, item: js.Object): scala.Unit = js.native
  def igLayoutManager(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Options specific to a border layout
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.borderLayout
  ): IgLayoutManagerBorderLayout = js.native
  /**
  	 * Options specific to a border layout
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.borderLayout,
    optionValue: IgLayoutManagerBorderLayout
  ): scala.Unit = js.native
  /**
  	 * Options specific to grid layout mode
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridLayout
  ): IgLayoutManagerGridLayout = js.native
  /**
  	 * Options specific to grid layout mode
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridLayout,
    optionValue: IgLayoutManagerGridLayout
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets height of the layout container.
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets height of the layout container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after items are resized.
  	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.internalResized
  ): InternalResizedEvent = js.native
  /**
  	 * Event fired after items are resized.
  	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.internalResized,
    optionValue: InternalResizedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before items are resized.
  	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.internalResizing
  ): InternalResizingEvent = js.native
  /**
  	 * Event fired before items are resized.
  	 *                     Use ui.owner to get a reference to the layout manager performing resizing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.internalResizing,
    optionValue: InternalResizingEvent
  ): scala.Unit = js.native
  /**
  	 * Number of items to render, this is only applicable to layouts: vertical and flow
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemCount
  ): scala.Double = js.native
  /**
  	 * Number of items to render, this is only applicable to layouts: vertical and flow
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after an item has been rendered in the container.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
  	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
  	 *                     Use ui.item to get a reference to the rendered item
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRendered
  ): ItemRenderedEvent = js.native
  /**
  	 * Event fired after an item has been rendered in the container.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
  	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
  	 *                     Use ui.item to get a reference to the rendered item
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRendered,
    optionValue: ItemRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before an item is rendered in the container.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
  	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
  	 *                     Use ui.item to get a reference to the rendered item
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRendering
  ): ItemRenderingEvent = js.native
  /**
  	 * Event fired before an item is rendered in the container.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
  	 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
  	 *                     Use ui.item to get a reference to the rendered item
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRendering,
    optionValue: ItemRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * An array of item descriptions
  	 *                     this assumes the container is empty, and every item
  	 *                     is described by rowspan, colspan, etc. - otherwise values of
  	 *                     1 are assumed
  	 *                     items can have various properties some of which may not be applicable
  	 *                     depending on the layoutMode.
  	 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Array[IgLayoutManagerItem] = js.native
  /**
  	 * An array of item descriptions
  	 *                     this assumes the container is empty, and every item
  	 *                     is described by rowspan, colspan, etc. - otherwise values of
  	 *                     1 are assumed
  	 *                     items can have various properties some of which may not be applicable
  	 *                     depending on the layoutMode.
  	 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Array[IgLayoutManagerItem]
  ): scala.Unit = js.native
  /**
  	 * Defines the layout type
  	 *                 grid Column type can be set with grid layout
  	 *                 border Column type can be set with border layout
  	 *                 flow Column type can be set with flow layout
  	 *                 column Column type can be set with column layout
  	 *                 vertical Column type can be set with vertical layout
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutMode
  ): js.Any = js.native
  /**
  	 * Defines the layout type
  	 *                 grid Column type can be set with grid layout
  	 *                 border Column type can be set with border layout
  	 *                 flow Column type can be set with flow layout
  	 *                 column Column type can be set with column layout
  	 *                 vertical Column type can be set with vertical layout
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event fired after all items are rendered.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event fired after all items are rendered.
  	 *                     Function takes arguments evt and ui.
  	 *                     Use ui.owner to get reference to the igLayoutManager.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets width of the layout container.
  	 *
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets width of the layout container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLayoutManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igLayoutManager(options: IgLayoutManager): JQuery = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgLayoutManager): JQuery = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_reflow(methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow): scala.Unit = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_reflow(methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow, forceReflow: scala.Boolean): scala.Unit = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_reflow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow,
    forceReflow: scala.Boolean,
    animationDuration: scala.Double
  ): scala.Unit = js.native
  @JSName("igLayoutManager")
  def igLayoutManager_reflow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow,
    forceReflow: scala.Boolean,
    animationDuration: scala.Double,
    event: js.Object
  ): scala.Unit = js.native
  def igLinearGauge(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is raised when a label of the linear gauge is aligned along the scale.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel
  ): AlignLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the linear gauge is aligned along the scale.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel,
    optionValue: AlignLabelEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the backing of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the backing of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the inner extent of the linear gauge backing.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the inner extent of the linear gauge backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the outer extent of the linear gauge backing.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the outer extent of the linear gauge backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of the backing.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of the backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the backing outline.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the backing outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the font.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font
  ): java.lang.String = js.native
  /**
  	 * Gets  the brush to use for the label font.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the label font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when a label of the the gauge is formatted.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
  	 * Use ui.value to obtain the value on the the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel
  ): FormatLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the the gauge is formatted.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
  	 * Use ui.value to obtain the value on the the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel,
    optionValue: FormatLabelEvent
  ): scala.Unit = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether needle dragging is enabled or not.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether needle dragging is enabled or not.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether the scale is inverted.
  	 * When the scale is inverted the direction in which the scale values increase is right to left.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScaleInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets a value indicating whether the scale is inverted.
  	 * When the scale is inverted the direction in which the scale values increase is right to left.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScaleInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
  	 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
  	 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to start adding labels, added to the scale's MinimumValue.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPostInitial
  ): scala.Double = js.native
  /**
  	 * A value to start adding labels, added to the scale's MinimumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPostInitial,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPreTerminal
  ): scala.Double = js.native
  /**
  	 * A value to stop adding labels, subtracted from the scale's MaximumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPreTerminal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum value of the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the maximum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the minimum value of the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the minimum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the minor tickmarks.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the minor tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of minor tickmarks to place between major tickmarks.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount
  ): scala.Double = js.native
  /**
  	 * Sets the number of minor tickmarks to place between major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering minor ticks.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering minor ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the needle breadth.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBreadth
  ): scala.Double = js.native
  /**
  	 * Sets the needle breadth.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBreadth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for needle element.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for needle element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle's inner base.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerBaseWidth
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle's inner base.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerBaseWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent of the needle's inner point.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerPointExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent of the needle's inner point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerPointExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle's inner point.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerPointWidth
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle's inner point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleInnerPointWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the name used for needle.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleName
  ): java.lang.String = js.native
  /**
  	 * Sets the name used for needle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle's outer base.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterBaseWidth
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle's outer base.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterBaseWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent of the needle's outer point.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterPointExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent of the needle's outer point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterPointExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle's outer point.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterPointWidth
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle's outer point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOuterPointWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of needle element.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of needle element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the shape to use when rendering the needle from a number of options.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleShape
  ): java.lang.String = js.native
  /**
  	 * Sets the shape to use when rendering the needle from a number of options.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleShape,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering single actual value element.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering single actual value element.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the needle's tooltip template.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleToolTipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets the needle's tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleToolTipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the orientation of the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): java.lang.String = js.native
  /**
  	 * Sets the orientation of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for linear gauge ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for linear gauge ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for linear gauge outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for linear gauge outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the ranges' tooltip template.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeToolTipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets the ranges' tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeToolTipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the scale ranges to render on the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges
  ): js.Array[IgLinearGaugeRange] = js.native
  /**
  	 * Sets the scale ranges to render on the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges,
    optionValue: js.Array[IgLinearGaugeRange]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the scale of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the scale of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of the scale.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the scale outline.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the scale outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether tooltips are enabled.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTip
  ): scala.Boolean = js.native
  /**
  	 * Gets  the time in milliseconds that tooltip appearance is delayed with.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTipTimeout
  ): scala.Double = js.native
  /**
  	 * Sets the time in milliseconds that tooltip appearance is delayed with.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTipTimeout,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets a value indicating whether tooltips are enabled.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showToolTip,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the major tickmarks.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering ticks.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to start adding tickmarks, added to the scale's MinimumValue.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPostInitial
  ): scala.Double = js.native
  /**
  	 * A value to start adding tickmarks, added to the scale's MinimumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPostInitial,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPreTerminal
  ): scala.Double = js.native
  /**
  	 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ticksPreTerminal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of milliseconds over which changes to the linear gauge should be animated.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the number of milliseconds over which changes to the linear gauge should be animated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the value at which the needle is positioned.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double = js.native
  /**
  	 * Occurs when the Value property changes.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged
  ): ValueChangedEvent = js.native
  /**
  	 * Occurs when the Value property changes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged,
    optionValue: ValueChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets the value at which the needle is positioned.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLinearGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igLinearGauge(options: IgLinearGauge): JQuery = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_addRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.addRange, value: js.Object): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): js.Object = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_getRangeNames(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRangeNames): java.lang.String = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_getValueForPoint(methodName: igniteDashUiLib.igniteDashUiLibStrings.getValueForPoint, x: js.Object, y: js.Object): scala.Double = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_needleContainsPoint(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.needleContainsPoint,
    x: scala.Double,
    y: scala.Double
  ): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgLinearGauge): JQuery = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_removeRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeRange, value: js.Object): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  @JSName("igLinearGauge")
  def igLinearGauge_updateRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateRange, value: js.Object): scala.Unit = js.native
  def igLinkPropertiesDialog(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply
  ): ApplyEvent = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply,
    optionValue: ApplyEvent
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel
  ): CancelEvent = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel,
    optionValue: CancelEvent
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide
  ): HideEvent = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide,
    optionValue: HideEvent
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden
  ): scala.Boolean = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item
  ): js.Any = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show
  ): ShowEvent = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show,
    optionValue: ShowEvent
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target
  ): js.Any = js.native
  def igLinkPropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igLinkPropertiesDialog(options: IgLinkPropertiesDialog): JQuery = js.native
  @JSName("igLinkPropertiesDialog")
  def igLinkPropertiesDialog_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igLinkPropertiesDialog")
  def igLinkPropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igLinkPropertiesDialog")
  def igLinkPropertiesDialog_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igLinkPropertiesDialog")
  def igLinkPropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgLinkPropertiesDialog): JQuery = js.native
  @JSName("igLinkPropertiesDialog")
  def igLinkPropertiesDialog_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, item: js.Object): scala.Unit = js.native
  def igLoading(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igLoading(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cssClass
  ): js.Any = js.native
  def igLoading(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cssClass,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igLoading(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeVerticalOffset
  ): scala.Boolean = js.native
  def igLoading(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeVerticalOffset,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igLoading(options: IgLoading): JQuery = js.native
  @JSName("igLoading")
  def igLoading_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igLoading")
  def igLoading_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igLoading")
  def igLoading_indicator(methodName: igniteDashUiLib.igniteDashUiLibStrings.indicator): scala.Unit = js.native
  @JSName("igLoading")
  def igLoading_indicatorElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.indicatorElement): scala.Unit = js.native
  @JSName("igLoading")
  def igLoading_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igLoading")
  def igLoading_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igLoading")
  def igLoading_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgLoading): JQuery = js.native
  @JSName("igLoading")
  def igLoading_refreshPos(methodName: igniteDashUiLib.igniteDashUiLibStrings.refreshPos): scala.Unit = js.native
  @JSName("igLoading")
  def igLoading_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, refresh: js.Object): scala.Unit = js.native
  def igMap(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Sets or gets the automatic height to add when automatically adding margins to the map.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginHeight
  ): scala.Double = js.native
  /**
  	 * Sets or gets the automatic height to add when automatically adding margins to the map.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the automatic width to add when automatically adding margins to the map.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginWidth
  ): scala.Double = js.native
  /**
  	 * Sets or gets the automatic width to add when automatically adding margins to the map.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoMarginWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Background content object
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backgroundContent
  ): IgMapBackgroundContent = js.native
  /**
  	 * Background content object
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backgroundContent,
    optionValue: IgMapBackgroundContent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported
  ): BrowserNotSupportedEvent = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported,
    optionValue: BrowserNotSupportedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for circle markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of circle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.circleMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for circle markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of circle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.circleMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the cross hair point (in world coordinates)
  	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
  	 * case the relevant crosshair line is hidden.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairPoint
  ): IgMapCrosshairPoint = js.native
  /**
  	 * Sets the cross hair point (in world coordinates)
  	 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
  	 * case the relevant crosshair line is hidden.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairPoint,
    optionValue: IgMapCrosshairPoint
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Map's crosshair visibility override.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the current Map's crosshair visibility override.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultInteraction
  ): java.lang.String = js.native
  /**
  	 * Sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultInteraction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for diamond markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of diamond.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.diamondMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for diamond markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of diamond.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.diamondMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Map's DragModifier property.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragModifier
  ): java.lang.String = js.native
  /**
  	 * Sets the current Map's DragModifier property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragModifier,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Occurs just after the current Map's grid area rectangle is changed.
  	 * The grid area may change as the result of the Map being resized.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridAreaRectChanged
  ): GridAreaRectChangedEvent = js.native
  /**
  	 * Occurs just after the current Map's grid area rectangle is changed.
  	 * The grid area may change as the result of the Map being resized.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridAreaRectChanged,
    optionValue: GridAreaRectChangedEvent
  ): scala.Unit = js.native
  /**
  	 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for hexagon markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagonMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for hexagon markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagonMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for hexagram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for hexagram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of hexagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hexagramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The background image uri use in the overview detail pane.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overviewPlusDetailPaneBackgroundImageUri
  ): java.lang.String = js.native
  /**
  	 * The background image uri use in the overview detail pane.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.overviewPlusDetailPaneBackgroundImageUri,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Map's PanModifier property.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panModifier
  ): java.lang.String = js.native
  /**
  	 * Sets the current Map's PanModifier property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panModifier,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pentagon markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagonMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pentagon markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagon.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagonMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pentragram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pentragram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pentagram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pentagramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush used as the background for the current Map object's plot area.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.plotAreaBackground
  ): java.lang.String = js.native
  /**
  	 * Sets the brush used as the background for the current Map object's plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.plotAreaBackground,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preferHigherResolutionTiles
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preferHigherResolutionTiles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the preview rectangle.
  	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
  	 * strokePath is hidden.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.previewRect
  ): js.Any = js.native
  /**
  	 * Sets the preview rectangle.
  	 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
  	 * strokePath is hidden.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.previewRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for pyramid markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pyramid.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pyramidMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for pyramid markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of pyramid.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pyramidMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Raised when the map's processing for an update has completed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.refreshCompleted
  ): RefreshCompletedEvent = js.native
  /**
  	 * Raised when the map's processing for an update has completed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.refreshCompleted,
    optionValue: RefreshCompletedEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * An array of series objects
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series
  ): js.Array[IgMapSeries] = js.native
  /**
  	 * Occurs when the cursors are moved over a series in this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesCursorMouseMove
  ): SeriesCursorMouseMoveEvent = js.native
  /**
  	 * Occurs when the cursors are moved over a series in this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesCursorMouseMove,
    optionValue: SeriesCursorMouseMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseEnter
  ): SeriesMouseEnterEvent = js.native
  /**
  	 * Occurs when the left mouse pointer enters an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseEnter,
    optionValue: SeriesMouseEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeave
  ): SeriesMouseLeaveEvent = js.native
  /**
  	 * Occurs when the left mouse pointer leaves an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeave,
    optionValue: SeriesMouseLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonDown
  ): SeriesMouseLeftButtonDownEvent = js.native
  /**
  	 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonDown,
    optionValue: SeriesMouseLeftButtonDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonUp
  ): SeriesMouseLeftButtonUpEvent = js.native
  /**
  	 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseLeftButtonUp,
    optionValue: SeriesMouseLeftButtonUpEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the left mouse pointer moves while over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseMove
  ): SeriesMouseMoveEvent = js.native
  /**
  	 * Occurs when the left mouse pointer moves while over an element of this map.
  	 * Function takes arguments evt and ui.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 * Use ui.positionX to get mouse X position.
  	 * Use ui.positionY to get mouse Y position.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesMouseMove,
    optionValue: SeriesMouseMoveEvent
  ): scala.Unit = js.native
  /**
  	 * An array of series objects
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.series,
    optionValue: js.Array[IgMapSeries]
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for square markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of square.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.squareMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for square markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of square.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.squareMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for tetragram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of tetragram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tetragramMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for tetragram markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of tetragram.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tetragramMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The swatch used to style this widget
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme
  ): java.lang.String = js.native
  /**
  	 * The swatch used to style this widget
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left a series and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on a series and the tooltip is about to show
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current series item object.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.actualItemBrush to get item brush.
  	 * Use ui.actualSeriesBrush to get series brush.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the template to use for triangle markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of triangle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangleMarkerTemplate
  ): js.Any = js.native
  /**
  	 * Sets the template to use for triangle markers on the map.
  	 * Defines the marker template used for
  	 * series with a marker type of triangle.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangleMarkerTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event fired when the status of an ongoing Triangulation has changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.currentStatus to get current status.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangulationStatusChanged
  ): TriangulationStatusChangedEvent = js.native
  /**
  	 * Event fired when the status of an ongoing Triangulation has changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.series to get reference to current series object.
  	 * Use ui.currentStatus to get current status.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangulationStatusChanged,
    optionValue: TriangulationStatusChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useTiledZooming
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useTiledZooming,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the position of the horizontal scroll.
  	 * This property is effectively a shortcut to the X position of the WindowRect property.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionHorizontal
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the position of the horizontal scroll.
  	 * This property is effectively a shortcut to the X position of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionHorizontal,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A number between 0 and 1 determining the position of the vertical scroll.
  	 * This property is effectively a shortcut to the Y position of the WindowRect property.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionVertical
  ): scala.Double = js.native
  /**
  	 * A number between 0 and 1 determining the position of the vertical scroll.
  	 * This property is effectively a shortcut to the Y position of the WindowRect property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPositionVertical,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A rectangle representing the portion of the map currently in view.
  	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Occurs just after the current Map's window rectangle is changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged
  ): WindowRectChangedEvent = js.native
  /**
  	 * Occurs just after the current Map's window rectangle is changed.
  	 * Function takes arguments evt and ui.
  	 * Use ui.map to get reference to map object.
  	 * Use ui.newHeight to get new height value.
  	 * Use ui.newLeft to get new left value.
  	 * Use ui.newTop to get new top value.
  	 * Use ui.newWidth to get new top value.
  	 * Use ui.oldHeight to get old height value.
  	 * Use ui.oldLeft to get old left value.
  	 * Use ui.oldTop to get old top value.
  	 * Use ui.oldWidth to get old top value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged,
    optionValue: WindowRectChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
  	 * Decrease this value if you want to allow for further zooming into the viewer.
  	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectMinWidth
  ): scala.Double = js.native
  /**
  	 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
  	 * Decrease this value if you want to allow for further zooming into the viewer.
  	 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectMinWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A rectangle representing the portion of the map currently in view.
  	 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
  	 *
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResponse
  ): java.lang.String = js.native
  /**
  	 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResponse,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Map's zoom scale.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScale
  ): scala.Double = js.native
  /**
  	 * Sets the current Map's zoom scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowScale,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomTileCacheSize
  ): scala.Double = js.native
  /**
  	 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomTileCacheSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the current Map's zoomability.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomable
  ): scala.Boolean = js.native
  /**
  	 * Sets the current Map's zoomability.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMap(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igMap(options: IgMap): JQuery = js.native
  @JSName("igMap")
  def igMap_addItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem,
    item: js.Object,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igMap")
  def igMap_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igMap")
  def igMap_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igMap")
  def igMap_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igMap")
  def igMap_clearTileZoomCache(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearTileZoomCache): scala.Unit = js.native
  @JSName("igMap")
  def igMap_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igMap")
  def igMap_endTiledZoomingIfRunning(methodName: igniteDashUiLib.igniteDashUiLibStrings.endTiledZoomingIfRunning): scala.Unit = js.native
  @JSName("igMap")
  def igMap_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage): js.Object = js.native
  @JSName("igMap")
  def igMap_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage, width: js.Object): js.Object = js.native
  @JSName("igMap")
  def igMap_exportImage(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage,
    width: js.Object,
    height: js.Object
  ): js.Object = js.native
  @JSName("igMap")
  def igMap_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igMap")
  def igMap_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igMap")
  def igMap_getActualMaximumValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActualMaximumValue, targetName: js.Object): scala.Unit = js.native
  @JSName("igMap")
  def igMap_getActualMinimumValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActualMinimumValue, targetName: js.Object): scala.Unit = js.native
  @JSName("igMap")
  def igMap_getGeographicFromZoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.getGeographicFromZoom, rect: js.Object): js.Object = js.native
  @JSName("igMap")
  def igMap_getZoomFromGeographic(methodName: igniteDashUiLib.igniteDashUiLibStrings.getZoomFromGeographic, rect: js.Object): js.Object = js.native
  @JSName("igMap")
  def igMap_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igMap")
  def igMap_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igMap")
  def igMap_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igMap")
  def igMap_notifyContainerResized(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyContainerResized): scala.Unit = js.native
  @JSName("igMap")
  def igMap_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igMap")
  def igMap_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igMap")
  def igMap_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igMap")
  def igMap_option(methodName: igniteDashUiLib.igniteDashUiLibStrings.option): scala.Unit = js.native
  @JSName("igMap")
  def igMap_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igMap")
  def igMap_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igMap")
  def igMap_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgMap): JQuery = js.native
  @JSName("igMap")
  def igMap_print(methodName: igniteDashUiLib.igniteDashUiLibStrings.print): scala.Unit = js.native
  @JSName("igMap")
  def igMap_removeItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem,
    index: scala.Double,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igMap")
  def igMap_renderSeries(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.renderSeries,
    targetName: java.lang.String,
    animate: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igMap")
  def igMap_resetZoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.resetZoom): js.Object = js.native
  @JSName("igMap")
  def igMap_scaleValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.scaleValue,
    targetName: java.lang.String,
    unscaledValue: scala.Double
  ): scala.Double = js.native
  @JSName("igMap")
  def igMap_scrollIntoView(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.scrollIntoView,
    targetName: java.lang.String,
    item: js.Object
  ): js.Object = js.native
  @JSName("igMap")
  def igMap_setItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem,
    index: scala.Double,
    item: js.Object,
    targetName: java.lang.String
  ): scala.Unit = js.native
  @JSName("igMap")
  def igMap_startTiledZoomingIfNecessary(methodName: igniteDashUiLib.igniteDashUiLibStrings.startTiledZoomingIfNecessary): scala.Unit = js.native
  @JSName("igMap")
  def igMap_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): js.Object = js.native
  @JSName("igMap")
  def igMap_unscaleValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unscaleValue,
    targetName: java.lang.String,
    scaledValue: scala.Double
  ): scala.Double = js.native
  @JSName("igMap")
  def igMap_zoomToGeographic(methodName: igniteDashUiLib.igniteDashUiLibStrings.zoomToGeographic, rect: js.Object): js.Object = js.native
  def igMaskEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the clear button. That option can be set only on initialization.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the clear button. That option can be set only on initialization.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * It affects the value of the control (value method/option and submitted in forms). It defines what the value should contain from text, unfilled prompts and literals. The default is allText and when used value method/option returns the text entered, all prompts (positions) and literals.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * It affects the value of the control (value method/option and submitted in forms). It defines what the value should contain from text, unfilled prompts and literals. The default is allText and when used value method/option returns the text entered, all prompts (positions) and literals.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar
  ): java.lang.String = js.native
  /**
  	 * /Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets input mask. Mask may include filter-flags and literal characters.
  	 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
  	 * Default is "CCCCCCCCCC"
  	 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
  	 * List of filter-flags:
  	 * C: any keyboard character. Entry is optional.
  	 * &: any keyboard character. Entry is required.
  	 * a: letter or digit character. Entry is optional.
  	 * A: letter or digit character. Entry is required.
  	 * ?: letter character. Entry is optional.
  	 * L: letter character. Entry is required.
  	 * 9: digit character. Entry is optional.
  	 * 0: digit character. Entry is required.
  	 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
  	 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
  	 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask
  ): java.lang.String = js.native
  /**
  	 * Input mask. Mask may include filter-flags and literal characters.
  	 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
  	 * Default is "CCCCCCCCCC"
  	 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
  	 * List of filter-flags:
  	 * C: any keyboard character. Entry is optional.
  	 * &: any keyboard character. Entry is required.
  	 * a: letter or digit character. Entry is optional.
  	 * A: letter or digit character. Entry is required.
  	 * ?: letter character. Entry is optional.
  	 * L: letter character. Entry is required.
  	 * 9: digit character. Entry is optional.
  	 * 0: digit character. Entry is required.
  	 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
  	 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
  	 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the hover/unhover animation duration.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * Sets the hover/unhover animation duration.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets list of items which are used for drop-down list.
  	 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Array[_] = js.native
  /**
  	 * Sets gets list of items which are used for drop-down list.
  	 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar
  ): java.lang.String = js.native
  /**
  	 * /Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged
  ): TextChangedEvent = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged,
    optionValue: TextChangedEvent
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets character which is used as prompt in edit mode for available entry position.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt
  ): java.lang.String = js.native
  /**
  	 * Character which is used as prompt in edit mode for available entry position.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * /Sets how many items should be shown at once.
  	 * Notes:
  	 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
  	 * Note! This option can not be set runtime.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igMaskEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igMaskEditor(options: IgMaskEditor): JQuery = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_clearButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearButton): java.lang.String = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_displayValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.displayValue): java.lang.String = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_getSelectedText(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedText): java.lang.String = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_getSelectionEnd(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionEnd): scala.Double = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_getSelectionStart(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionStart): scala.Double = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_insert(methodName: igniteDashUiLib.igniteDashUiLibStrings.insert, string: java.lang.String): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgMaskEditor): JQuery = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, start: scala.Double, end: scala.Double): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): scala.Unit = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): java.lang.String = js.native
  @JSName("igMaskEditor")
  def igMaskEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: java.lang.String): java.lang.String = js.native
  def igNotifier(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Allows setting the respective state CSS on the target element (used to apply border color by default)
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCSSOnTarget
  ): scala.Boolean = js.native
  /**
  	 * Allows setting the respective state CSS on the target element (used to apply border color by default)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCSSOnTarget,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the time in milliseconds the notification fades in and out when showing/hiding
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the time in milliseconds the notification fades in and out when showing/hiding
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the distance in pixels a notification popover slides outwards as it's shown.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationSlideDistance
  ): scala.Double = js.native
  /**
  	 * /Sets the distance in pixels a notification popover slides outwards as it's shown.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationSlideDistance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls where the popover DOM should be attached to (only applies to popovers).
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo
  ): java.lang.String | js.Object = js.native
  /**
  	 * Controls where the popover DOM should be attached to (only applies to popovers).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur
  ): scala.Boolean = js.native
  /**
  	 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The containment for the popover. Accepts a jQuery object
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment
  ): js.Any = js.native
  /**
  	 * Sets the containment for the popover. Accepts a jQuery object
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate
  ): java.lang.String | js.Function = js.native
  /**
  	 * /Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction
  ): java.lang.String = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority
  ): js.Array[_] = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The content for the popover header
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate
  ): IgNotifierHeaderTemplate = js.native
  /**
  	 * Sets the content for the popover header
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate,
    optionValue: IgNotifierHeaderTemplate
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is hidden.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden
  ): HiddenEvent = js.native
  /**
  	 * Event fired after popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden,
    optionValue: HiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is hidden.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding
  ): HidingEvent = js.native
  /**
  	 * Event fired before popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding,
    optionValue: HidingEvent
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight
  ): scala.Double | java.lang.String = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth
  ): scala.Double | java.lang.String = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth
  ): scala.Double | java.lang.String = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.notifyLevel
  ): java.lang.String = js.native
  /**
  	 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.notifyLevel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position
  ): java.lang.String = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Selectors indicating which items should show popovers.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors
  ): java.lang.String = js.native
  /**
  	 * Selectors indicating which items should show popovers.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showIcon
  ): scala.Boolean = js.native
  /**
  	 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showIcon,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn
  ): java.lang.String = js.native
  /**
  	 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is shown.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing
  ): ShowingEvent = js.native
  /**
  	 * Event fired before popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing,
    optionValue: ShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is shown.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown
  ): ShownEvent = js.native
  /**
  	 * Event fired after popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown,
    optionValue: ShownEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.state
  ): java.lang.String = js.native
  /**
  	 * /Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.state,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double | java.lang.String = js.native
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNotifier(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igNotifier(options: IgNotifier): JQuery = js.native
  @JSName("igNotifier")
  def igNotifier_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): js.Object = js.native
  @JSName("igNotifier")
  def igNotifier_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_getContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContent): java.lang.String = js.native
  @JSName("igNotifier")
  def igNotifier_getCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCoordinates): js.Object = js.native
  @JSName("igNotifier")
  def igNotifier_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igNotifier")
  def igNotifier_isVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.isVisible): scala.Boolean = js.native
  @JSName("igNotifier")
  def igNotifier_notify(methodName: igniteDashUiLib.igniteDashUiLibStrings.notify, state: js.Object): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_notify(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notify,
    state: js.Object,
    message: java.lang.String
  ): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igNotifier")
  def igNotifier_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igNotifier")
  def igNotifier_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgNotifier): JQuery = js.native
  @JSName("igNotifier")
  def igNotifier_setContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.setContent, newCnt: java.lang.String): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_setCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.setCoordinates, pos: js.Object): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, trg: stdLib.Element): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_show(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.show,
    trg: stdLib.Element,
    content: java.lang.String
  ): scala.Unit = js.native
  @JSName("igNotifier")
  def igNotifier_target(methodName: igniteDashUiLib.igniteDashUiLibStrings.target): js.Object = js.native
  def igNumericEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is closed.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  /**
  	 * Fired after the drop down is closed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is closing.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  /**
  	 * Fired when the drop down is closing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is opened.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  /**
  	 * Fired after the drop down is opened.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is opening.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  /**
  	 * Fired when the drop down is opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups
  ): js.Array[_] = js.native
  /**
  	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Array[_] = js.native
  /**
  	 * /Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern
  ): java.lang.String = js.native
  /**
  	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): scala.Double = js.native
  /**
  	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged
  ): TextChangedEvent = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged,
    optionValue: TextChangedEvent
  ): scala.Unit = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * The number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igNumericEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igNumericEditor(options: IgNumericEditor): JQuery = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_clearButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearButton): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_displayValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.displayValue): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Boolean = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex, number: scala.Double): scala.Double = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_getRegionalOption(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRegionalOption): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_getSelectedText(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedText): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_getSelectionEnd(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionEnd): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_getSelectionStart(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionStart): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_insert(methodName: igniteDashUiLib.igniteDashUiLibStrings.insert, string: java.lang.String): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgNumericEditor): JQuery = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, start: scala.Double, end: scala.Double): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_selectListIndexDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexDown): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_selectListIndexUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexUp): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Double = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex, index: scala.Double): scala.Double = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): java.lang.String = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): scala.Double = js.native
  @JSName("igNumericEditor")
  def igNumericEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: scala.Double): scala.Double = js.native
  def igPathFinder(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igPathFinder(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Any = js.native
  def igPathFinder(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igPathFinder(options: IgPathFinder): JQuery = js.native
  @JSName("igPathFinder")
  def igPathFinder_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPathFinder")
  def igPathFinder_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPathFinder")
  def igPathFinder_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPathFinder): JQuery = js.native
  def igPercentEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
  	 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
  	 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as decimal separator.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.decimalSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the factor which is used for the get and set of the "value" method.
  	 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
  	 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
  	 * Possible values: 1 or 100.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayFactor
  ): scala.Double = js.native
  /**
  	 * /Sets the factor which is used for the get and set of the "value" method.
  	 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
  	 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
  	 * Possible values: 1 or 100.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayFactor,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as separator for groups (like thousands).
  	 * That option has effect only in display mode(no focus).
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) or [negativeSign](ui.igNumericEditor#options:negativeSign) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups
  ): js.Array[_] = js.native
  /**
  	 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
  	 * The "groupSeparator" is inserted between groups.
  	 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
  	 * Count of groups starts from the decimal point (from right to left).
  	 * That option has effect only in display mode(no focus).
  	 * Note: The numbers in the array must be positive integers.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groups,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should only allow values from the list of items. Enabling this also causes spin actions to cycle through list items instead.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Array[_] = js.native
  /**
  	 * /Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type number.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum number of decimal places supported by the editor.
  	 * Note: this option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum number of decimal places supported by the editor.
  	 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option supports values between 0 and 15, when dataMode is 'double' (default) and values between 0 and 7 in 'float' mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minDecimals,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): scala.Double = js.native
  /**
  	 * /Sets the minimum value which can be entered in the editor by the end user.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern
  ): java.lang.String = js.native
  /**
  	 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativePattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign
  ): java.lang.String = js.native
  /**
  	 * /Sets the character, which is used as negative sign.
  	 * Note: This option has priority over possible regional settings.
  	 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
  	 * Note: This option's value should not be equal to the value of [groupSeparator](ui.igNumericEditor#options:groupSeparator) or [decimalSeparator](ui.igNumericEditor#options:decimalSeparator) options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeSign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the symbol, which is used in display (no focus) state.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.percentSymbol
  ): java.lang.String = js.native
  /**
  	 * /Sets the symbol, which is used in display (no focus) state.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.percentSymbol,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the pattern for positive numeric values, which is used in display (no focus) state.
  	 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.positivePattern
  ): java.lang.String = js.native
  /**
  	 * /Sets the pattern for positive numeric values, which is used in display (no focus) state.
  	 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
  	 * Note: this option has priority over possible regional settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.positivePattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the last decimal place will be rounded, when the maxDecimal option is defined and applied.
  	 * For example if the initial editor value is set to 123.4567, maxDecimals option is set to 3 and roundDecimals is enabled,
  	 * then editor will round the value and will display it as 123.457. If roundDecimals is disabled then editor value will be truncated to 123.456.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundDecimals,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets support for scientific format.
  	 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
  	 * Notes: The "+" character is not supported in edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scientificFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): scala.Double = js.native
  /**
  	 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from numeric editor options
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): js.Any = js.native
  /**
  	 * Removed from numeric editor options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * The number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPercentEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPercentEditor(options: IgPercentEditor): JQuery = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex, number: scala.Double): scala.Double = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_getRegionalOption(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRegionalOption): java.lang.String = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_getSelectedText(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedText): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_getSelectionEnd(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionEnd): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_getSelectionStart(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionStart): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_insert(methodName: igniteDashUiLib.igniteDashUiLibStrings.insert, string: java.lang.String): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPercentEditor): JQuery = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_percentSymbol(methodName: igniteDashUiLib.igniteDashUiLibStrings.percentSymbol): java.lang.String = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_percentSymbol(methodName: igniteDashUiLib.igniteDashUiLibStrings.percentSymbol, symbol: js.Object): java.lang.String = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_selectListIndexDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexDown): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_selectListIndexUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectListIndexUp): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value): scala.Double = js.native
  @JSName("igPercentEditor")
  def igPercentEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: scala.Double): scala.Double = js.native
  def igPieChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  whether the slices can be exploded.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceExplosion
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the slices can be exploded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceExplosion,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the slices can be selected.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the slices can be selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSliceSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported
  ): BrowserNotSupportedEvent = js.native
  /**
  	 * Event fired when the control is displayed on a non HTML5 compliant browser
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported,
    optionValue: BrowserNotSupportedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the Brushes property.
  	 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the Brushes property.
  	 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the property name that contains the labels.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataLabel
  ): java.lang.String = js.native
  /**
  	 * Sets the property name that contains the labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets or Sets the property name that contains the values.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataValue
  ): java.lang.String = js.native
  /**
  	 * Sets the property name that contains the values.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.explodedRadius
  ): scala.Double = js.native
  /**
  	 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.explodedRadius,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the collection of exploded slice indices.
  	 * Should be an array of integers that indicate the indexes of the slices to explode.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.explodedSlices
  ): js.Array[_] = js.native
  /**
  	 * Sets the collection of exploded slice indices.
  	 * Should be an array of integers that indicate the indexes of the slices to explode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.explodedSlices,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets  the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
  	 * Use context.item to get the item associated with the slice, if any.
  	 * Use context.outline to get the outline brush used to paint the slice.
  	 * Use context.itemLabel to get the label object that would be used for the slice.
  	 * Use context.percentValue to see the percentage value that is associated with the slice.
  	 * Use context.isOthersSlice to tell if the associated slice is the others slice.
  	 * Should return a string value that should be used for the label.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel
  ): js.Function = js.native
  /**
  	 * Sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
  	 * Use context.item to get the item associated with the slice, if any.
  	 * Use context.outline to get the outline brush used to paint the slice.
  	 * Use context.itemLabel to get the label object that would be used for the slice.
  	 * Use context.percentValue to see the percentage value that is associated with the slice.
  	 * Use context.isOthersSlice to tell if the associated slice is the others slice.
  	 * Should return a string value that should be used for the label.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Raised when a slice's label is clicked.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.item to get reference to the slice object.
  	 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelClick
  ): LabelClickEvent = js.native
  /**
  	 * Raised when a slice's label is clicked.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.item to get reference to the slice object.
  	 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelClick,
    optionValue: LabelClickEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the pixel amount, by which the labels are offset from the edge of the slices.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent
  ): scala.Double = js.native
  /**
  	 * Sets the pixel amount, by which the labels are offset from the edge of the slices.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color for labels rendered inside of the pie chart.  If no color is provided then
  	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInnerColor
  ): java.lang.String = js.native
  /**
  	 * Sets the color for labels rendered inside of the pie chart.  If no color is provided then
  	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInnerColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color for labels rendered outside of the pie chart.  If no color is provided then
  	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelOuterColor
  ): java.lang.String = js.native
  /**
  	 * Sets the color for labels rendered outside of the pie chart.  If no color is provided then
  	 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelOuterColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position of chart labels.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPosition
  ): java.lang.String = js.native
  /**
  	 * Sets the position of chart labels.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelsPosition,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin between a label and the end of its leader line.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin between a label and the end of its leader line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  what type of leader lines will be used for the outside end labels.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineType
  ): java.lang.String = js.native
  /**
  	 * Sets what type of leader lines will be used for the outside end labels.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the leader lines are visible.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets whether the leader lines are visible.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leaderLineVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): IgPieChartLegend = js.native
  /**
  	 * Gets  the LegendItemBadgeTemplate property.
  	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
  	 * the chart object itself.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemBadgeTemplate
  ): js.Any = js.native
  /**
  	 * Sets the LegendItemBadgeTemplate property.
  	 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
  	 * the chart object itself.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemBadgeTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the LegendItemTemplate property.
  	 * The legend item control content is created according to the LegendItemTemplate on-demand by
  	 * the chart object itself.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemTemplate
  ): js.Any = js.native
  /**
  	 * Sets the LegendItemTemplate property.
  	 * The legend item control content is created according to the LegendItemTemplate on-demand by
  	 * the chart object itself.
  	 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendItemTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the property name that contains the legend labels.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the property name that contains the legend labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legendLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: IgPieChartLegend
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  a style object that can be used to override the style settings on the others category slice.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryStyle
  ): js.Any = js.native
  /**
  	 * Sets a style object that can be used to override the style settings on the others category slice.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the label of the Others slice.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryText
  ): java.lang.String = js.native
  /**
  	 * Sets the label of the Others slice.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the threshold value that determines if slices are grouped into the Others slice.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryThreshold
  ): scala.Double = js.native
  /**
  	 * Sets the threshold value that determines if slices are grouped into the Others slice.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to use numeric or percent-based threshold value.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryType
  ): java.lang.String = js.native
  /**
  	 * Sets whether to use numeric or percent-based threshold value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.othersCategoryType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Outlines property.
  	 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the Outlines property.
  	 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
  	 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling factor of the chart's radius. Value between 0 and 1.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.radiusFactor
  ): scala.Double = js.native
  /**
  	 * Sets the scaling factor of the chart's radius. Value between 0 and 1.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.radiusFactor,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the currently selected data item.  If a different data item is provided the pie chart
  	 *             will select the slice associated with the new item.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItem
  ): js.Any = js.native
  /**
  	 * Event fired when the selectedItem option has changed.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItem to get a reference to the previous selected data item.
  	 *             Use ui.newItem to get a reference to the current selected data item.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemChanged
  ): SelectedItemChangedEvent = js.native
  /**
  	 * Event fired when the selectedItem option has changed.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItem to get a reference to the previous selected data item.
  	 *             Use ui.newItem to get a reference to the current selected data item.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemChanged,
    optionValue: SelectedItemChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the selectedItem option is about to change.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItem to get a reference to the current selected data item.
  	 *             Use ui.newItem to get a reference to the newly selected data item.
  	 *             Use ui.cancel to stop the selected item from changing.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemChanging
  ): SelectedItemChangingEvent = js.native
  /**
  	 * Event fired when the selectedItem option is about to change.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItem to get a reference to the current selected data item.
  	 *             Use ui.newItem to get a reference to the newly selected data item.
  	 *             Use ui.cancel to stop the selected item from changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemChanging,
    optionValue: SelectedItemChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Sets the currently selected data item.  If a different data item is provided the pie chart
  	 *             will select the slice associated with the new item.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItem,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the currently selected data items.  Adding or removing data items from this array will
  	 *             select or deselect the slices associated with those items.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItems
  ): js.Array[_] = js.native
  /**
  	 * Event fired when the selectedItems array has changed.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItems to get a reference to the previous selected data items.
  	 *             Use ui.newItems to get a reference to the current selected data items.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemsChanged
  ): SelectedItemsChangedEvent = js.native
  /**
  	 * Event fired when the selectedItems array has changed.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItems to get a reference to the previous selected data items.
  	 *             Use ui.newItems to get a reference to the current selected data items.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemsChanged,
    optionValue: SelectedItemsChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the selectedItems array is about to change.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItems to get a reference to the current selected data items.
  	 *             Use ui.newItems to get a reference to the newly selected data items.
  	 *             Use ui.cancel to stop the selected items from changing.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemsChanging
  ): SelectedItemsChangingEvent = js.native
  /**
  	 * Event fired when the selectedItems array is about to change.
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.oldItems to get a reference to the current selected data items.
  	 *             Use ui.newItems to get a reference to the newly selected data items.
  	 *             Use ui.cancel to stop the selected items from changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItemsChanging,
    optionValue: SelectedItemsChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Sets the currently selected data items.  Adding or removing data items from this array will
  	 *             select or deselect the slices associated with those items.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Sets the collection of selected slice indices.
  	 *             Should be an array of integers that indicate the indexes of the slices to select.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedSlices
  ): js.Array[_] = js.native
  /**
  	 * Sets the collection of selected slice indices.
  	 *             Should be an array of integers that indicate the indexes of the slices to select.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedSlices,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets  the style used when a slice is selected.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedStyle
  ): js.Any = js.native
  /**
  	 * Sets the style used when a slice is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the type of selection the pie chart allows.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionMode
  ): java.lang.String = js.native
  /**
  	 * Sets the type of selection the pie chart allows.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Whether the chart should render a tooltip.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showTooltip
  ): scala.Boolean = js.native
  /**
  	 * Whether the chart should render a tooltip.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showTooltip,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Raised when the slice is clicked.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.slice to get reference to slice object.
  	 * Use ui.slice.item to get reference to current pie chart item.
  	 * Use ui.slice.isExploded to get is the slice exploded.
  	 * Use ui.slice.isSelected to get is the slice selected.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClick
  ): SliceClickEvent = js.native
  /**
  	 * Raised when the slice is clicked.
  	 * Function takes arguments evt and ui.
  	 * Use ui.chart to get reference to chart object.
  	 * Use ui.slice to get reference to slice object.
  	 * Use ui.slice.item to get reference to current pie chart item.
  	 * Use ui.slice.isExploded to get is the slice exploded.
  	 * Use ui.slice.isSelected to get is the slice selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sliceClick,
    optionValue: SliceClickEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the starting angle of the chart.
  	 * The default zero value is equivalent to 3 o'clock.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startAngle
  ): scala.Double = js.native
  /**
  	 * Sets the starting angle of the chart.
  	 * The default zero value is equivalent to 3 o'clock.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the rotational direction of the chart.
  	 *
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sweepDirection
  ): java.lang.String = js.native
  /**
  	 * Sets the rotational direction of the chart.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sweepDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Overrides the style used for text in the pie chart.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textStyle
  ): java.lang.String = js.native
  /**
  	 * Overrides the style used for text in the pie chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The swatch used to style this widget
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme
  ): java.lang.String = js.native
  /**
  	 * The swatch used to style this widget
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 * Function takes arguments evt and ui.
  	 * Use ui.element to get reference to tooltip DOM element.
  	 * Use ui.item to get reference to current pie chart item.
  	 * Use ui.chart to get reference to chart object.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * The name of template or the template itself that chart tooltip will use to render.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * The name of template or the template itself that chart tooltip will use to render.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets or Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPieChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPieChart(options: IgPieChart): JQuery = js.native
  @JSName("igPieChart")
  def igPieChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage): js.Object = js.native
  @JSName("igPieChart")
  def igPieChart_exportImage(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage, width: js.Object): js.Object = js.native
  @JSName("igPieChart")
  def igPieChart_exportImage(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.exportImage,
    width: js.Object,
    height: js.Object
  ): js.Object = js.native
  @JSName("igPieChart")
  def igPieChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Object = js.native
  @JSName("igPieChart")
  def igPieChart_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igPieChart")
  def igPieChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_option(methodName: igniteDashUiLib.igniteDashUiLibStrings.option): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPieChart")
  def igPieChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPieChart")
  def igPieChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPieChart): JQuery = js.native
  @JSName("igPieChart")
  def igPieChart_print(methodName: igniteDashUiLib.igniteDashUiLibStrings.print): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): scala.Unit = js.native
  @JSName("igPieChart")
  def igPieChart_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igPivotDataSelector(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
  	 *
  	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
  	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
  	 * paramType="string" The unique name of the item.
  	 * returnType="bool"  The function must return true if the item should be accepted.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customMoveValidation
  ): js.Function = js.native
  /**
  	 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
  	 *
  	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
  	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
  	 * paramType="string" The unique name of the item.
  	 * returnType="bool"  The function must return true if the item should be accepted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customMoveValidation,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorRendered
  ): DataSelectorRenderedEvent = js.native
  /**
  	 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorRendered,
    optionValue: DataSelectorRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Fired after the data source has initialized.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceInitialized
  ): DataSourceInitializedEvent = js.native
  /**
  	 * Fired after the data source has initialized.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceInitialized,
    optionValue: DataSourceInitializedEvent
  ): scala.Unit = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions
  ): IgPivotDataSelectorDataSourceOptions = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions,
    optionValue: IgPivotDataSelectorDataSourceOptions
  ): scala.Unit = js.native
  /**
  	 * Fired after the data source has updated.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUpdated
  ): DataSourceUpdatedEvent = js.native
  /**
  	 * Fired after the data source has updated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUpdated,
    optionValue: DataSourceUpdatedEvent
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdate
  ): scala.Boolean = js.native
  /**
  	 * Fired when the defer update checkbox changes.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdateChanged
  ): DeferUpdateChangedEvent = js.native
  /**
  	 * Fired when the defer update checkbox changes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdateChanged,
    optionValue: DeferUpdateChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdate,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableColumnsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableColumnsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableFiltersDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableFiltersDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableMeasuresDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableMeasuresDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableRowsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableRowsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired on drag. Return false to cancel the dragging.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag
  ): DragEvent = js.native
  /**
  	 * Settings for the drag and drop functionality of the igPivotDataSelector.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings
  ): IgPivotDataSelectorDragAndDropSettings = js.native
  /**
  	 * Settings for the drag and drop functionality of the igPivotDataSelector.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings,
    optionValue: IgPivotDataSelectorDragAndDropSettings
  ): scala.Unit = js.native
  /**
  	 * Fired on drag start. Return false to cancel the drag.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart
  ): DragStartEvent = js.native
  /**
  	 * Fired on drag start. Return false to cancel the drag.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart,
    optionValue: DragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on drag stop.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop
  ): DragStopEvent = js.native
  /**
  	 * Fired on drag stop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop,
    optionValue: DragStopEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on drag. Return false to cancel the dragging.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag,
    optionValue: DragEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the parent for the drop downs.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownParent
  ): js.Any = js.native
  /**
  	 * Sets the parent for the drop downs.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownParent,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members drop down closes.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosed
  ): FilterDropDownClosedEvent = js.native
  /**
  	 * Fired after the filter members drop down closes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosed,
    optionValue: FilterDropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the filter members drop down closes. Return false to cancel the closing.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosing
  ): FilterDropDownClosingEvent = js.native
  /**
  	 * Fired before the filter members drop down closes. Return false to cancel the closing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosing,
    optionValue: FilterDropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOk
  ): FilterDropDownOkEvent = js.native
  /**
  	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOk,
    optionValue: FilterDropDownOkEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members drop down opens.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpened
  ): FilterDropDownOpenedEvent = js.native
  /**
  	 * Fired after the filter members drop down opens.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpened,
    optionValue: FilterDropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the filter members drop down opens. Return false to cancel the opening.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpening
  ): FilterDropDownOpeningEvent = js.native
  /**
  	 * Fired before the filter members drop down opens. Return false to cancel the opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpening,
    optionValue: FilterDropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members are loaded.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterMembersLoaded
  ): FilterMembersLoadedEvent = js.native
  /**
  	 * Fired after the filter members are loaded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterMembersLoaded,
    optionValue: FilterMembersLoadedEvent
  ): scala.Unit = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after a metadata item drop.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropped
  ): MetadataDroppedEvent = js.native
  /**
  	 * Fired after a metadata item drop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropped,
    optionValue: MetadataDroppedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a metadata item drop. Return false to cancel the drop.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropping
  ): MetadataDroppingEvent = js.native
  /**
  	 * Fired before a metadata item drop. Return false to cancel the drop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropping,
    optionValue: MetadataDroppingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a metadata item is removed when the user clicks the close icon.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoved
  ): MetadataRemovedEvent = js.native
  /**
  	 * Fired after a metadata item is removed when the user clicks the close icon.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoved,
    optionValue: MetadataRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoving
  ): MetadataRemovingEvent = js.native
  /**
  	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoving,
    optionValue: MetadataRemovingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * *
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotDataSelector(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPivotDataSelector(options: IgPivotDataSelector): JQuery = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPivotDataSelector): JQuery = js.native
  @JSName("igPivotDataSelector")
  def igPivotDataSelector_update(methodName: igniteDashUiLib.igniteDashUiLibStrings.update): scala.Unit = js.native
  def igPivotGrid(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Enables sorting of the header cells in columns.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowHeaderColumnsSorting
  ): scala.Boolean = js.native
  /**
  	 * Enables sorting of the header cells in columns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowHeaderColumnsSorting,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables sorting of the header cells in rows.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowHeaderRowsSorting
  ): scala.Boolean = js.native
  /**
  	 * Enables sorting of the header cells in rows.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowHeaderRowsSorting,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables sorting of the value cells in columns.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSorting
  ): scala.Boolean = js.native
  /**
  	 * Enables sorting of the value cells in columns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowSorting,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The indentation for every level column when the compactColumnHeaders is set to true.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactColumnHeaderIndentation
  ): scala.Double = js.native
  /**
  	 * The indentation for every level column when the compactColumnHeaders is set to true.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactColumnHeaderIndentation,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactColumnHeaders
  ): scala.Boolean = js.native
  /**
  	 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactColumnHeaders,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRowHeaderIndentation
  ): scala.Double = js.native
  /**
  	 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRowHeaderIndentation,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRowHeaders
  ): scala.Boolean = js.native
  /**
  	 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.compactRowHeaders,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
  	 *
  	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
  	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
  	 * paramType="string" The unique name of the item.
  	 * returnType="bool"  The function must return true if the item should be accepted.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customMoveValidation
  ): js.Function = js.native
  /**
  	 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
  	 *
  	 * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
  	 * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
  	 * paramType="string" The unique name of the item.
  	 * returnType="bool"  The function must return true if the item should be accepted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customMoveValidation,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Fired after the data source has initialized.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceInitialized
  ): DataSourceInitializedEvent = js.native
  /**
  	 * Fired after the data source has initialized.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceInitialized,
    optionValue: DataSourceInitializedEvent
  ): scala.Unit = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions
  ): IgPivotGridDataSourceOptions = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions,
    optionValue: IgPivotGridDataSourceOptions
  ): scala.Unit = js.native
  /**
  	 * Fired after the data source has updated.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUpdated
  ): DataSourceUpdatedEvent = js.native
  /**
  	 * Fired after the data source has updated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUpdated,
    optionValue: DataSourceUpdatedEvent
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultLevelSortBehavior
  ): java.lang.String = js.native
  /**
  	 * Sets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultLevelSortBehavior,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the width of the row headers.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultRowHeaderWidth
  ): scala.Double = js.native
  /**
  	 * Sets the width of the row headers.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultRowHeaderWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdate
  ): scala.Boolean = js.native
  /**
  	 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferUpdate,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableColumnsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableColumnsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableFiltersDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableFiltersDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableMeasuresDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableMeasuresDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableRowsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disableRowsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired on drag. Return false to cancel the drag.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag
  ): DragEvent = js.native
  /**
  	 * Settings for the drag and drop functionality of the igPivotGrid.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings
  ): IgPivotGridDragAndDropSettings = js.native
  /**
  	 * Settings for the drag and drop functionality of the igPivotGrid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings,
    optionValue: IgPivotGridDragAndDropSettings
  ): scala.Unit = js.native
  /**
  	 * Fired on drag start. Return false to cancel the dragging.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart
  ): DragStartEvent = js.native
  /**
  	 * Fired on drag start. Return false to cancel the dragging.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart,
    optionValue: DragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on drag stop.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop
  ): DragStopEvent = js.native
  /**
  	 * Fired on drag stop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop,
    optionValue: DragStopEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on drag. Return false to cancel the drag.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag,
    optionValue: DragEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the parent for the drop downs.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownParent
  ): js.Any = js.native
  /**
  	 * Sets the parent for the drop downs.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownParent,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members drop down closes.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosed
  ): FilterDropDownClosedEvent = js.native
  /**
  	 * Fired after the filter members drop down closes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosed,
    optionValue: FilterDropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the filter members drop down closes. Return false to cancel the closing.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosing
  ): FilterDropDownClosingEvent = js.native
  /**
  	 * Fired before the filter members drop down closes. Return false to cancel the closing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownClosing,
    optionValue: FilterDropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOk
  ): FilterDropDownOkEvent = js.native
  /**
  	 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOk,
    optionValue: FilterDropDownOkEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members drop down opens.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpened
  ): FilterDropDownOpenedEvent = js.native
  /**
  	 * Fired after the filter members drop down opens.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpened,
    optionValue: FilterDropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the filter members drop down opens. Return false to cancel the opening.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpening
  ): FilterDropDownOpeningEvent = js.native
  /**
  	 * Fired before the filter members drop down opens. Return false to cancel the opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownOpening,
    optionValue: FilterDropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the filter members are loaded.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterMembersLoaded
  ): FilterMembersLoadedEvent = js.native
  /**
  	 * Fired after the filter members are loaded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterMembersLoaded,
    optionValue: FilterMembersLoadedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstLevelSortDirection
  ): js.Any = js.native
  /**
  	 * Sets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstLevelSortDirection,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the default sort direction for the rows.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection
  ): js.Any = js.native
  /**
  	 * Sets the default sort direction for the rows.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Options specific to the igGrid that will render the pivot grid view.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridOptions
  ): IgPivotGridGridOptions = js.native
  /**
  	 * Options specific to the igGrid that will render the pivot grid view.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.gridOptions,
    optionValue: IgPivotGridGridOptions
  ): scala.Unit = js.native
  /**
  	 * Fired after the sorting of the headers.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headersSorted
  ): HeadersSortedEvent = js.native
  /**
  	 * Fired after the sorting of the headers.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headersSorted,
    optionValue: HeadersSortedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the sorting of the headers. Return false to cancel the sorting.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headersSorting
  ): HeadersSortingEvent = js.native
  /**
  	 * Fired before the sorting of the headers. Return false to cancel the sorting.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headersSorting,
    optionValue: HeadersSortingEvent
  ): scala.Unit = js.native
  /**
  	 * This is the total height of the grid.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * This is the total height of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Hide the columns drop area.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideColumnsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Hide the columns drop area.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideColumnsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Hide the filters drop area.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideFiltersDropArea
  ): scala.Boolean = js.native
  /**
  	 * Hide the filters drop area.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideFiltersDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Hide the measures drop area.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideMeasuresDropArea
  ): scala.Boolean = js.native
  /**
  	 * Hide the measures drop area.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideMeasuresDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Hide the rows drop area.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideRowsDropArea
  ): scala.Boolean = js.native
  /**
  	 * Hide the rows drop area.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideRowsDropArea,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A boolean value indicating whether a parent in the columns is in front of its children.
  	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
  	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isParentInFrontForColumns
  ): scala.Boolean = js.native
  /**
  	 * A boolean value indicating whether a parent in the columns is in front of its children.
  	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
  	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isParentInFrontForColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A boolean value indicating whether a parent in the rows is in front of its children.
  	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
  	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isParentInFrontForRows
  ): scala.Boolean = js.native
  /**
  	 * A boolean value indicating whether a parent in the rows is in front of its children.
  	 * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
  	 * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isParentInFrontForRows,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * An array of level sort direction items, which predefine the sorted header cells.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.levelSortDirections
  ): js.Array[IgPivotGridLevelSortDirection] = js.native
  /**
  	 * An array of level sort direction items, which predefine the sorted header cells.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.levelSortDirections,
    optionValue: js.Array[IgPivotGridLevelSortDirection]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after a metadata item drop.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropped
  ): MetadataDroppedEvent = js.native
  /**
  	 * Fired after a metadata item drop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropped,
    optionValue: MetadataDroppedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a metadata item drop. Return false to cancel the drop.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropping
  ): MetadataDroppingEvent = js.native
  /**
  	 * Fired before a metadata item drop. Return false to cancel the drop.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataDropping,
    optionValue: MetadataDroppingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a metadata item is removed when the user clicks the close icon.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoved
  ): MetadataRemovedEvent = js.native
  /**
  	 * Fired after a metadata item is removed when the user clicks the close icon.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoved,
    optionValue: MetadataRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoving
  ): MetadataRemovingEvent = js.native
  /**
  	 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.metadataRemoving,
    optionValue: MetadataRemovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the headers have been rendered.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridHeadersRendered
  ): PivotGridHeadersRenderedEvent = js.native
  /**
  	 * Event fired after the headers have been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridHeadersRendered,
    optionValue: PivotGridHeadersRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridRendered
  ): PivotGridRenderedEvent = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridRendered,
    optionValue: PivotGridRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowHeaderLinkGroupIndentation
  ): scala.Double = js.native
  /**
  	 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowHeaderLinkGroupIndentation,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * A value indicating whether the layout that row headers should be arranged.standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
  	 * superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
  	 * tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
  	 *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowHeadersLayout
  ): js.Any = js.native
  /**
  	 * A value indicating whether the layout that row headers should be arranged.standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
  	 * superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
  	 * tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowHeadersLayout,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after the sorting of the columns.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sorted
  ): SortedEvent = js.native
  /**
  	 * Fired after the sorting of the columns.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sorted,
    optionValue: SortedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the sorting of the columns. Return false to cancel the sorting.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sorting
  ): SortingEvent = js.native
  /**
  	 * Fired before the sorting of the columns. Return false to cancel the sorting.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sorting,
    optionValue: SortingEvent
  ): scala.Unit = js.native
  /**
  	 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.treeRowHeaderIndentation
  ): scala.Double = js.native
  /**
  	 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.treeRowHeaderIndentation,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired after the collapse of the tuple member.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberCollapsed
  ): TupleMemberCollapsedEvent = js.native
  /**
  	 * Fired after the collapse of the tuple member.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberCollapsed,
    optionValue: TupleMemberCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the collapse of the tuple member. Return false to cancel the collapsing.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberCollapsing
  ): TupleMemberCollapsingEvent = js.native
  /**
  	 * Fired before the collapse of the tuple member. Return false to cancel the collapsing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberCollapsing,
    optionValue: TupleMemberCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the expand of the tuple member.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberExpanded
  ): TupleMemberExpandedEvent = js.native
  /**
  	 * Fired after the expand of the tuple member.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberExpanded,
    optionValue: TupleMemberExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the expand of the tuple member. Return false to cancel the expanding.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberExpanding
  ): TupleMemberExpandingEvent = js.native
  /**
  	 * Fired before the expand of the tuple member. Return false to cancel the expanding.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tupleMemberExpanding,
    optionValue: TupleMemberExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * *
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPivotGrid(options: IgPivotGrid): JQuery = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_appliedColumnSortDirections(methodName: igniteDashUiLib.igniteDashUiLibStrings.appliedColumnSortDirections): js.Array[_] = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_appliedLevelSortDirections(methodName: igniteDashUiLib.igniteDashUiLibStrings.appliedLevelSortDirections): js.Array[_] = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_collapseTupleMember(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseTupleMember,
    tupleLocation: java.lang.String,
    tupleIndex: scala.Double,
    memberIndex: scala.Double
  ): scala.Boolean = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_collapseTupleMember(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseTupleMember,
    tupleLocation: java.lang.String,
    tupleIndex: scala.Double,
    memberIndex: scala.Double,
    shouldUpdate: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_expandTupleMember(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandTupleMember,
    tupleLocation: java.lang.String,
    tupleIndex: scala.Double,
    memberIndex: scala.Double
  ): scala.Boolean = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_expandTupleMember(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandTupleMember,
    tupleLocation: java.lang.String,
    tupleIndex: scala.Double,
    memberIndex: scala.Double,
    shouldUpdate: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_grid(methodName: igniteDashUiLib.igniteDashUiLibStrings.grid): js.Object = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPivotGrid): JQuery = js.native
  @JSName("igPivotGrid")
  def igPivotGrid_updateGrid(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateGrid): scala.Unit = js.native
  def igPivotView(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Configuration settings that will be assigned to the igPivotDataSelector widget.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorOptions
  ): IgPivotViewDataSelectorOptions = js.native
  /**
  	 * Configuration settings that will be assigned to the igPivotDataSelector widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorOptions,
    optionValue: IgPivotViewDataSelectorOptions
  ): scala.Unit = js.native
  /**
  	 * Configuration settings for the panel containing the igPivotDataSelector.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorPanel
  ): IgPivotViewDataSelectorPanel = js.native
  /**
  	 * Configuration settings for the panel containing the igPivotDataSelector.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSelectorPanel,
    optionValue: IgPivotViewDataSelectorPanel
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions
  ): IgPivotViewDataSourceOptions = js.native
  /**
  	 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceOptions,
    optionValue: IgPivotViewDataSourceOptions
  ): scala.Unit = js.native
  /**
  	 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Configuration settings that will be assigned to the igPivotGrid widget.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridOptions
  ): IgPivotViewPivotGridOptions = js.native
  /**
  	 * Configuration settings that will be assigned to the igPivotGrid widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridOptions,
    optionValue: IgPivotViewPivotGridOptions
  ): scala.Unit = js.native
  /**
  	 * Configuration settings for the panel containing the igPivotGrid.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridPanel
  ): IgPivotViewPivotGridPanel = js.native
  /**
  	 * Configuration settings for the panel containing the igPivotGrid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pivotGridPanel,
    optionValue: IgPivotViewPivotGridPanel
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * *
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPivotView(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPivotView(options: IgPivotView): JQuery = js.native
  @JSName("igPivotView")
  def igPivotView_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igPivotView")
  def igPivotView_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igPivotView")
  def igPivotView_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igPivotView")
  def igPivotView_dataSelector(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataSelector): js.Object = js.native
  @JSName("igPivotView")
  def igPivotView_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igPivotView")
  def igPivotView_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPivotView")
  def igPivotView_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPivotView")
  def igPivotView_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPivotView): JQuery = js.native
  @JSName("igPivotView")
  def igPivotView_pivotGrid(methodName: igniteDashUiLib.igniteDashUiLibStrings.pivotGrid): js.Object = js.native
  @JSName("igPivotView")
  def igPivotView_splitter(methodName: igniteDashUiLib.igniteDashUiLibStrings.splitter): js.Object = js.native
  def igPopover(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * The time popover fades in and out when showing/hiding
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * Sets the time popover fades in and out when showing/hiding
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls where the popover DOM should be attached to.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo
  ): java.lang.String | js.Object = js.native
  /**
  	 * Controls where the popover DOM should be attached to.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appendTo,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Controls whether the popover will close on blur or not
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur
  ): scala.Boolean = js.native
  /**
  	 * Controls whether the popover will close on blur or not
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closeOnBlur,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The containment for the popover. Accepts a jQuery object
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment
  ): js.Any = js.native
  /**
  	 * Sets the containment for the popover. Accepts a jQuery object
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.containment,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The content for the popover container. If left null the content will be get from the target.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate
  ): java.lang.String | js.Function = js.native
  /**
  	 * Sets the content for the popover container. If left null the content will be get from the target.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contentTemplate,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction
  ): java.lang.String = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority
  ): js.Array[_] = js.native
  /**
  	 * Controls the priority in which the control searches for space to show relative to the target element.
  	 * This property has effect only if the [direction](ui.%%WidgetNameLowered%%#options:direction) property value is "auto" or unset.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.directionPriority,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Controls the direction in which the control shows relative to the target element
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.direction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The content for the popover header
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate
  ): IgPopoverHeaderTemplate = js.native
  /**
  	 * Sets the content for the popover header
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerTemplate,
    optionValue: IgPopoverHeaderTemplate
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height for the popover. leave null for auto
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is hidden.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden
  ): HiddenEvent = js.native
  /**
  	 * Event fired after popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hidden,
    optionValue: HiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is hidden.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding
  ): HidingEvent = js.native
  /**
  	 * Event fired before popover is hidden.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiding,
    optionValue: HidingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight
  ): scala.Double | java.lang.String = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines height the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth
  ): scala.Double | java.lang.String = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't exceed even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth
  ): scala.Double | java.lang.String = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width the popover won't go under the value even if no specific one is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position
  ): java.lang.String = js.native
  /**
  	 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.position,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors
  ): java.lang.String = js.native
  /**
  	 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectors,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn
  ): java.lang.String = js.native
  /**
  	 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showOn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired before popover is shown.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing
  ): ShowingEvent = js.native
  /**
  	 * Event fired before popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showing,
    optionValue: ShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after popover is shown.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown
  ): ShownEvent = js.native
  /**
  	 * Event fired after popover is shown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shown,
    optionValue: ShownEvent
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double | java.lang.String = js.native
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines width for the popover. leave null for auto.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igPopover(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igPopover(options: IgPopover): JQuery = js.native
  @JSName("igPopover")
  def igPopover_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): js.Object = js.native
  @JSName("igPopover")
  def igPopover_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_getContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContent): java.lang.String = js.native
  @JSName("igPopover")
  def igPopover_getCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCoordinates): js.Object = js.native
  @JSName("igPopover")
  def igPopover_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igPopover")
  def igPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igPopover")
  def igPopover_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igPopover")
  def igPopover_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgPopover): JQuery = js.native
  @JSName("igPopover")
  def igPopover_setContent(methodName: igniteDashUiLib.igniteDashUiLibStrings.setContent, newCnt: java.lang.String): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_setCoordinates(methodName: igniteDashUiLib.igniteDashUiLibStrings.setCoordinates, pos: js.Object): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, trg: stdLib.Element): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_show(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.show,
    trg: stdLib.Element,
    content: java.lang.String
  ): scala.Unit = js.native
  @JSName("igPopover")
  def igPopover_target(methodName: igniteDashUiLib.igniteDashUiLibStrings.target): js.Object = js.native
  def igProgressBar(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animate
  ): scala.Boolean = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateTimeout
  ): scala.Double = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateTimeout,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animate,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.change
  ): ChangeEvent = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.change,
    optionValue: ChangeEvent
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.endValue
  ): scala.Double = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.endValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.max
  ): scala.Double = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.max,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.min
  ): scala.Double = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.min,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): java.lang.String = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
  	 */
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.queue
  ): scala.Boolean = js.native
  /**
  	 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.queue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.range
  ): scala.Boolean = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.range,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String = js.native
  def igProgressBar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igProgressBar(options: IgProgressBar): JQuery = js.native
  @JSName("igProgressBar")
  def igProgressBar_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igProgressBar")
  def igProgressBar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igProgressBar")
  def igProgressBar_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igProgressBar")
  def igProgressBar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgProgressBar): JQuery = js.native
  @JSName("igProgressBar")
  def igProgressBar_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): scala.Unit = js.native
  @JSName("igProgressBar")
  def igProgressBar_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igQRCodeBarcode(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  the Application Indicator assigned to identify the specification concerned by AIM International.
  	 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applicationIndicator
  ): java.lang.String = js.native
  /**
  	 * Sets the Application Indicator assigned to identify the specification concerned by AIM International.
  	 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applicationIndicator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the backing of the barcode.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the backing of the barcode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of the backing.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of the backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the backing outline.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the backing outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the background of the bars.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the background of the bars.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a value which specifies how the grid fills within the barcode control dimensions.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barsFillMode
  ): java.lang.String = js.native
  /**
  	 * Sets a value which specifies how the grid fills within the barcode control dimensions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barsFillMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.data
  ): java.lang.String = js.native
  /**
  	 * Occurs when the data has changed.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the barcode widget.
  	 * Use ui.newData to obtain the new data.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataChanged
  ): DataChangedEvent = js.native
  /**
  	 * Occurs when the data has changed.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the barcode widget.
  	 * Use ui.newData to obtain the new data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataChanged,
    optionValue: DataChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets the data value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.data,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a value indicating whether to show the ECI header.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.eciHeaderDisplayMode
  ): java.lang.String = js.native
  /**
  	 * Sets a value indicating whether to show the ECI header.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.eciHeaderDisplayMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
  	 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.eciNumber
  ): scala.Double = js.native
  /**
  	 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
  	 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.eciNumber,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.encodingMode
  ): java.lang.String = js.native
  /**
  	 * Sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.encodingMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the error correction level of the QR Code symbol.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorCorrectionLevel
  ): java.lang.String = js.native
  /**
  	 * Sets the error correction level of the QR Code symbol.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorCorrectionLevel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Occurs when an error has happened.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the barcode widget.
  	 * Use ui.errorMessage to get or set the error message that is to be shown.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageDisplaying
  ): ErrorMessageDisplayingEvent = js.native
  /**
  	 * Occurs when an error has happened.
  	 * Function takes first argument evt and second argument ui.
  	 * Use ui.owner to obtain reference to the barcode widget.
  	 * Use ui.errorMessage to get or set the error message that is to be shown.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageDisplaying,
    optionValue: ErrorMessageDisplayingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the message text displayed when some error occurs.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageText
  ): java.lang.String = js.native
  /**
  	 * Sets the message text displayed when some error occurs.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specifications.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fnc1Mode
  ): java.lang.String = js.native
  /**
  	 * Sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specifications.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fnc1Mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the font of the text displayed by the control.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font
  ): java.lang.String = js.native
  /**
  	 * Gets  the brush to use for the label font.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the label font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the font of the text displayed by the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  the size version of the QR Code symbol.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sizeVersion
  ): java.lang.String = js.native
  /**
  	 * Sets the size version of the QR Code symbol.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sizeVersion,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stretch.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stretch
  ): java.lang.String = js.native
  /**
  	 * Sets the stretch.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stretch,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Gets  the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widthToHeightRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widthToHeightRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xDimension
  ): scala.Double = js.native
  /**
  	 * Sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igQRCodeBarcode(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xDimension,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igQRCodeBarcode(options: IgQRCodeBarcode): JQuery = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): js.Object = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgQRCodeBarcode): JQuery = js.native
  @JSName("igQRCodeBarcode")
  def igQRCodeBarcode_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  def igRadialGauge(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is raised when a label of the gauge is aligned along the scale.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
  	 * Use ui.startAngle to obtain the starting angle of gauge scale.
  	 * Use ui.endAngle to obtain the ending angle of gauge scale.
  	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel
  ): AlignLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the gauge is aligned along the scale.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
  	 * Use ui.startAngle to obtain the starting angle of gauge scale.
  	 * Use ui.endAngle to obtain the ending angle of gauge scale.
  	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 * Use ui.width to obtain the width of the label.
  	 * Use ui.height to obtain the height of the label.
  	 * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
  	 * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignLabel,
    optionValue: AlignLabelEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the backing of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the backing of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the corner rounding radius to use for the fitted scale backings.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingCornerRadius
  ): scala.Double = js.native
  /**
  	 * Sets the corner rounding radius to use for the fitted scale backings.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingCornerRadius,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the inner extent of the gauge backing.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent
  ): scala.Double = js.native
  /**
  	 * Sets the inner extent of the gauge backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingInnerExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the outer extent of the gauge backing.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent
  ): scala.Double = js.native
  /**
  	 * Sets the outer extent of the gauge backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOuterExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outline of the backing.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outline of the backing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOversweep
  ): scala.Double = js.native
  /**
  	 * Sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingOversweep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the type of shape to use for the backing of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingShape
  ): java.lang.String = js.native
  /**
  	 * Sets the type of shape to use for the backing of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingShape,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the backing outline.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the backing outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.backingStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the x position of the center of the gauge with the value ranging from 0 to 1.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerX
  ): scala.Double = js.native
  /**
  	 * Sets the x position of the center of the gauge with the value ranging from 0 to 1.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerX,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the y position of the center of the gauge with the value ranging from 0 to 1.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerY
  ): scala.Double = js.native
  /**
  	 * Sets the y position of the center of the gauge with the value ranging from 0 to 1.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerY,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the strategy to use for omitting labels if the first and last label have the same value.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.duplicateLabelOmissionStrategy
  ): java.lang.String = js.native
  /**
  	 * Sets the strategy to use for omitting labels if the first and last label have the same value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.duplicateLabelOmissionStrategy,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the font.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font
  ): java.lang.String = js.native
  /**
  	 * Gets  the brush to use for the label font.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the label font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fontBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the font.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when a label of the gauge is formatted.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
  	 * Use ui.startAngle to obtain the starting angle of gauge scale.
  	 * Use ui.endAngle to obtain the ending angle of gauge scale.
  	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel
  ): FormatLabelEvent = js.native
  /**
  	 * Event which is raised when a label of the gauge is formatted.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to gauge widget.
  	 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
  	 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
  	 * Use ui.startAngle to obtain the starting angle of gauge scale.
  	 * Use ui.endAngle to obtain the ending angle of gauge scale.
  	 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
  	 * Use ui.value to obtain the value on the gauge scale associated with the label.
  	 * Use ui.label to obtain the string value of the label.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel,
    optionValue: FormatLabelEvent
  ): scala.Unit = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.interval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the needle is constrained within the minimum and maximum value range during dragging.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingConstrained
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the needle is constrained within the minimum and maximum value range during dragging.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingConstrained,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether needle dragging is enabled or not.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether needle dragging is enabled or not.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isNeedleDraggingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval
  ): scala.Double = js.native
  /**
  	 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum value of the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the maximum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the minimum value of the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the minimum value of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the minor tickmarks.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the minor tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of minor tickmarks to place between major tickmarks.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount
  ): scala.Double = js.native
  /**
  	 * Sets the number of minor tickmarks to place between major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering minor ticks.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering minor ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minorTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBaseFeatureExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBaseFeatureExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBaseFeatureWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBaseFeatureWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use when rendering the fill of the needle.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use when rendering the fill of the needle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleEndWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleEndWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use when rendering the outline of the needle.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use when rendering the outline of the needle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotInnerWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotInnerWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the outlines of the needle cap.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotOutline
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the outlines of the needle cap.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotOutline,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the shape to use for the needle cap.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotShape
  ): java.lang.String = js.native
  /**
  	 * Sets the shape to use for the needle cap.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotShape,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use for the outline of the needle cap.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use for the outline of the needle cap.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePivotWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePointFeatureExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePointFeatureExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePointFeatureWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needlePointFeatureWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the shape to use when rendering the needle from a number of options.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleShape
  ): java.lang.String = js.native
  /**
  	 * Sets the shape to use when rendering the needle from a number of options.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleShape,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStartWidthRatio
  ): scala.Double = js.native
  /**
  	 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStartWidthRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness of the needle outline.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness of the needle outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.needleStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the multiplying factor to apply to the normal radius of the gauge.
  	 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
  	 * This introduces a multiplicative factor to that value.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.radiusMultiplier
  ): scala.Double = js.native
  /**
  	 * Sets the multiplying factor to apply to the normal radius of the gauge.
  	 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
  	 * This introduces a multiplicative factor to that value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.radiusMultiplier,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for gauge ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for gauge ranges.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of brushes to be used as the palette for gauge outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines
  ): js.Any = js.native
  /**
  	 * Sets a collection of brushes to be used as the palette for gauge outlines.
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scale ranges to render on the linear gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges
  ): js.Array[IgRadialGaugeRange] = js.native
  /**
  	 * Sets the scale ranges to render on the linear gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ranges,
    optionValue: js.Array[IgRadialGaugeRange]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use to fill the background of the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use to fill the background of the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the end angle for the scale in degrees.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndAngle
  ): scala.Double = js.native
  /**
  	 * Sets the end angle for the scale in degrees.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOversweep
  ): scala.Double = js.native
  /**
  	 * Gets  the oversweep shape to use for the excess fill area for the scale.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOversweepShape
  ): java.lang.String = js.native
  /**
  	 * Sets the oversweep shape to use for the excess fill area for the scale.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOversweepShape,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleOversweep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the start angle for the scale in degrees.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartAngle
  ): scala.Double = js.native
  /**
  	 * Sets the start angle for the scale in degrees.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the direction in which the scale sweeps around the center from the start angle to end angle.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleSweepDirection
  ): java.lang.String = js.native
  /**
  	 * Sets the direction in which the scale sweeps around the center from the start angle to end angle.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scaleSweepDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the brush to use for the major tickmarks.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the brush to use for the major tickmarks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickEndExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent
  ): scala.Double = js.native
  /**
  	 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
  	 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStartExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the stroke thickness to use when rendering ticks.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the stroke thickness to use when rendering ticks.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the number of milliseconds over which changes to the gauge should be animated.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the number of milliseconds over which changes to the gauge should be animated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the easing function used to morph the current series.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction
  ): js.Any = js.native
  /**
  	 * Sets the easing function used to morph the current series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the transition progress of the animation when the control is animating.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionProgress
  ): scala.Double = js.native
  /**
  	 * The transition progress of the animation when the control is animating.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionProgress,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the value at which to point the needle of the gauge.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double = js.native
  /**
  	 * Occurs when the Value property changes.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged
  ): ValueChangedEvent = js.native
  /**
  	 * Occurs when the Value property changes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged,
    optionValue: ValueChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets the value at which to point the needle of the gauge.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igRadialGauge(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igRadialGauge(options: IgRadialGauge): JQuery = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_addRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.addRange, value: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_clearRanges(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearRanges): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_getPointForValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getPointForValue,
    value: js.Object,
    extent: js.Object
  ): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_getRangeNames(methodName: igniteDashUiLib.igniteDashUiLibStrings.getRangeNames): java.lang.String = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_getValueForPoint(methodName: igniteDashUiLib.igniteDashUiLibStrings.getValueForPoint, x: js.Object, y: js.Object): scala.Double = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_needleContainsPoint(methodName: igniteDashUiLib.igniteDashUiLibStrings.needleContainsPoint, x: js.Object, y: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgRadialGauge): JQuery = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_removeRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeRange, value: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_scaleValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.scaleValue, value: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_unscaleValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.unscaleValue, value: js.Object): scala.Unit = js.native
  @JSName("igRadialGauge")
  def igRadialGauge_updateRange(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateRange, value: js.Object): scala.Unit = js.native
  def igRadialMenu(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Returns  the background of the center button of the menu when the IsOpen property is false.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonClosedFill
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the background of the center button of the menu when the IsOpen property is false.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonClosedFill,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the brush used for the outline of the ring of the center button when the IsOpen property is false.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonClosedStroke
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonClosedStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the height of the center button content.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonContentHeight
  ): scala.Double = js.native
  /**
  	 * Returns or sets the height of the center button content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonContentHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the width of the center button content.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonContentWidth
  ): scala.Double = js.native
  /**
  	 * Returns or sets the width of the center button content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonContentWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the background of the center button of the menu when the IsOpen property is true.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonFill
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the background of the center button of the menu when the IsOpen property is true.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonFill,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the background of the center button of the menu when under the pointer.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHotTrackFill
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the background of the center button of the menu when under the pointer.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHotTrackFill,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the brush used for the outline of the ring of the center button when under the pointer.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHotTrackStroke
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHotTrackStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the brush used for the outline of the ring of the center button when the IsOpen is true.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonStroke
  ): java.lang.String = js.native
  /**
  	 * Returns  the width of the outline of the inner rings of the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Returns or sets the width of the outline of the inner rings of the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Invoked when the IsOpen property is changed to false.
  	 * Function takes a first argument ui.
  	 * Use ui.owner to obtain reference to menu widget.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closed
  ): ClosedEvent = js.native
  /**
  	 * Invoked when the IsOpen property is changed to false.
  	 * Function takes a first argument ui.
  	 * Use ui.owner to obtain reference to menu widget.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.closed,
    optionValue: ClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the name of the item within the menu whose children are currently displayed.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentOpenMenuItemName
  ): java.lang.String = js.native
  /**
  	 * Sets the name of the item within the menu whose children are currently displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentOpenMenuItemName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The font for the control
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font
  ): java.lang.String = js.native
  /**
  	 * The font for the control
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.font,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isOpen
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isOpen,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the items in the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Array[IgRadialMenuItem] = js.native
  /**
  	 * Sets the items in the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Array[IgRadialMenuItem]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  the brush for the backing of the radial menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuBackground
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the brush for the backing of the radial menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuBackground,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the duration of the animation performed when the IsOpen property is changed.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuItemOpenCloseAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuItemOpenCloseAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuItemOpenCloseAnimationEasingFunction
  ): js.Any = js.native
  /**
  	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuItemOpenCloseAnimationEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  the duration of the animation performed when the IsOpen property is changed.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuOpenCloseAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuOpenCloseAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuOpenCloseAnimationEasingFunction
  ): js.Any = js.native
  /**
  	 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.menuOpenCloseAnimationEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  the minimum number of wedges displayed by the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWedgeCount
  ): scala.Double = js.native
  /**
  	 * Returns or sets the minimum number of wedges displayed by the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minWedgeCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Invoked when the IsOpen property is changed to true.
  	 * Function takes a first argument ui.
  	 * Use ui.owner to obtain reference to menu widget.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.opened
  ): OpenedEvent = js.native
  /**
  	 * Invoked when the IsOpen property is changed to true.
  	 * Function takes a first argument ui.
  	 * Use ui.owner to obtain reference to menu widget.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.opened,
    optionValue: OpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  the background of the outer ring of the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingFill
  ): java.lang.String = js.native
  /**
  	 * Returns or sets the background of the outer ring of the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingFill,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the brush used for the outline of the outer ring.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingStroke
  ): java.lang.String = js.native
  /**
  	 * Returns  the width of the outline of the outer ring of the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Returns or sets the width of the outline of the outer ring of the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns or sets the brush used for the outline of the outer ring.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the thickness of the outer ring of the menu.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingThickness
  ): scala.Double = js.native
  /**
  	 * Returns or sets the thickness of the outer ring of the menu.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outerRingThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Returns  the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rotationAsPercentageOfWedge
  ): scala.Double = js.native
  /**
  	 * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rotationAsPercentageOfWedge,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the starting angle of the items in degrees.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rotationInDegrees
  ): scala.Double = js.native
  /**
  	 * Returns or sets the starting angle of the items in degrees.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rotationInDegrees,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the amount of padding around each wedge in degrees.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wedgePaddingInDegrees
  ): scala.Double = js.native
  /**
  	 * Returns or sets the amount of padding around each wedge in degrees.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRadialMenu(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wedgePaddingInDegrees,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igRadialMenu(options: IgRadialMenu): JQuery = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_itemOption(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.itemOption,
    itemKey: java.lang.String,
    key: java.lang.String,
    value: js.Object
  ): js.Object = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgRadialMenu): JQuery = js.native
  @JSName("igRadialMenu")
  def igRadialMenu_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  def igRating(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets custom css votes.
  	 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
  	 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
  	 * Item at index [0] on second level is used for css class of vote in normal state.
  	 * Item at index [1] on second level is used for css class of vote in selected state.
  	 * Item at index [2] on second level is used for css class of vote in hover state.
  	 * Examples:
  	 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
  	 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
  	 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
  	 * will customize selected and hover states for first 3 votes with classes h# and s#.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cssVotes
  ): js.Any = js.native
  /**
  	 * /Sets custom css votes.
  	 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
  	 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
  	 * Item at index [0] on second level is used for css class of vote in normal state.
  	 * Item at index [1] on second level is used for css class of vote in selected state.
  	 * Item at index [2] on second level is used for css class of vote in hover state.
  	 * Examples:
  	 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
  	 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
  	 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
  	 * will customize selected and hover states for first 3 votes with classes h# and s#.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cssVotes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets if igRating can have focus. Change of that option is not supported after igRating was created.
  	 * Value true: can get focus and process key events.
  	 * Value false: cannot get focus.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focusable
  ): scala.Boolean = js.native
  /**
  	 * If igRating can have focus. Change of that option is not supported after igRating was created.
  	 * Value true: can get focus and process key events.
  	 * Value false: cannot get focus.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focusable,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired before hover value is changed.
  	 * If the application returns false, then the action is canceled and the value remains unchanged.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hoverChange
  ): HoverChangeEvent = js.native
  /**
  	 * Fired before hover value is changed.
  	 * If the application returns false, then the action is canceled and the value remains unchanged.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hoverChange,
    optionValue: HoverChangeEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets precision. Precision of value and valueHover.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.precision
  ): java.lang.String = js.native
  /**
  	 * Gets/Sets part of vote-size, which is considered as zero value.
  	 * It has effect only when precision is set to "half" or "whole".
  	 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
  	 * Same is applied for mouseover as well.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.precisionZeroVote
  ): scala.Double = js.native
  /**
  	 * /Sets part of vote-size, which is considered as zero value.
  	 * It has effect only when precision is set to "half" or "whole".
  	 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
  	 * Same is applied for mouseover as well.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.precisionZeroVote,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * /Sets precision. Precision of value and valueHover.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.precision,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets number of decimal places used to round value and value-hover.
  	 * Negative value will disable that option and value will not be rounded.
  	 * Notes:
  	 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
  	 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
  	 * If it is larger than 15, then 15 is used.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundedDecimalPlaces
  ): scala.Double = js.native
  /**
  	 * /Sets number of decimal places used to round value and value-hover.
  	 * Negative value will disable that option and value will not be rounded.
  	 * Notes:
  	 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
  	 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
  	 * If it is larger than 15, then 15 is used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.roundedDecimalPlaces,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the direction of selected and hovered votes. Change of that option is not supported after igRating was created.
  	 * Value true: from left to right or from top to bottom.
  	 * Value false: from right to left or from bottom to left.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDirection
  ): scala.Boolean = js.native
  /**
  	 * The direction of selected and hovered votes. Change of that option is not supported after igRating was created.
  	 * Value true: from left to right or from top to bottom.
  	 * Value false: from right to left or from bottom to left.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDirection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets selector for css classes.
  	 * That option allows replacing all default css styles by custom values.
  	 * Application should provide css classes for all members defined in the css options with "theme" selector.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme
  ): java.lang.String = js.native
  /**
  	 * /Sets selector for css classes.
  	 * That option allows replacing all default css styles by custom values.
  	 * Application should provide css classes for all members defined in the css options with "theme" selector.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.theme,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets object which contains options supported by igValidator.
  	 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets object which contains options supported by igValidator.
  	 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double | java.lang.String = js.native
  /**
  	 * Gets/Sets percent or vote number to measure value and value-hover.
  	 * Value true: value is measured as percent (from 0 to 1).
  	 * Value false: value is measured in number of voted (from 0 to voteCount)
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueAsPercent
  ): scala.Boolean = js.native
  /**
  	 * /Sets percent or vote number to measure value and value-hover.
  	 * Value true: value is measured as percent (from 0 to 1).
  	 * Value false: value is measured in number of voted (from 0 to voteCount)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueAsPercent,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired before (selected) value is changed.
  	 * If the application returns false, then the action is canceled and the value remains unchanged.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChange
  ): ValueChangeEvent = js.native
  /**
  	 * Fired before (selected) value is changed.
  	 * If the application returns false, then the action is canceled and the value remains unchanged.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChange,
    optionValue: ValueChangeEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueHover
  ): scala.Double | java.lang.String = js.native
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueHover,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueHover,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets a vertical or horizontal orientation for the votes.
  	 * Change of that option is not supported after igRating was created.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.vertical
  ): scala.Boolean = js.native
  /**
  	 * A vertical or horizontal orientation for the votes.
  	 * Change of that option is not supported after igRating was created.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.vertical,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets number of votes.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteCount
  ): scala.Double = js.native
  /**
  	 * /Sets number of votes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteHeight
  ): scala.Double = js.native
  /**
  	 * /Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
  	 *
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igRating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.voteWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igRating(options: IgRating): JQuery = js.native
  @JSName("igRating")
  def igRating_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igRating")
  def igRating_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igRating")
  def igRating_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igRating")
  def igRating_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igRating")
  def igRating_focus(methodName: igniteDashUiLib.igniteDashUiLibStrings.focus): js.Object = js.native
  @JSName("igRating")
  def igRating_hasFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFocus): scala.Boolean = js.native
  @JSName("igRating")
  def igRating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igRating")
  def igRating_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igRating")
  def igRating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgRating): JQuery = js.native
  @JSName("igRating")
  def igRating_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igRating")
  def igRating_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): js.Object = js.native
  @JSName("igRating")
  def igRating_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator, destroy: scala.Boolean): js.Object = js.native
  @JSName("igRating")
  def igRating_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, `val`: scala.Double): scala.Double | js.Object = js.native
  @JSName("igRating")
  def igRating_valueHover(methodName: igniteDashUiLib.igniteDashUiLibStrings.valueHover): scala.Double | js.Object = js.native
  @JSName("igRating")
  def igRating_valueHover(methodName: igniteDashUiLib.igniteDashUiLibStrings.valueHover, `val`: scala.Double): scala.Double | js.Object = js.native
  def igResponsiveContainer(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * The time between two resize checks in milliseconds.
  	 */
  def igResponsiveContainer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pollingInterval
  ): scala.Double = js.native
  /**
  	 * The time between two resize checks in milliseconds.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igResponsiveContainer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pollingInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igResponsiveContainer(options: IgResponsiveContainer): JQuery = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_addCallback(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addCallback,
    callback: js.Function,
    owner: js.Object,
    reactionStep: scala.Double,
    reactionDirection: js.Object
  ): scala.Unit = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgResponsiveContainer): JQuery = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_removeCallback(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeCallback, callbackId: scala.Double): scala.Unit = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_startPoller(methodName: igniteDashUiLib.igniteDashUiLibStrings.startPoller): scala.Unit = js.native
  @JSName("igResponsiveContainer")
  def igResponsiveContainer_stopPoller(methodName: igniteDashUiLib.igniteDashUiLibStrings.stopPoller): scala.Unit = js.native
  def igScheduler(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Fired after agenda view range is changed when using previous and next buttons (fired only in Agenda View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaRangeChanged
  ): AgendaRangeChangedEvent = js.native
  /**
  	 * Fired after agenda view range is changed when using previous and next buttons (fired only in Agenda View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaRangeChanged,
    optionValue: AgendaRangeChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before agenda view range is changed when using previous and next buttons (fired only in Agenda View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaRangeChanging
  ): AgendaRangeChangingEvent = js.native
  /**
  	 * Fired before agenda view range is changed when using previous and next buttons (fired only in Agenda View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaRangeChanging,
    optionValue: AgendaRangeChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets AgendaView settings.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaViewSettings
  ): IgSchedulerAgendaViewSettings = js.native
  /**
  	 * /Sets AgendaView settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.agendaViewSettings,
    optionValue: IgSchedulerAgendaViewSettings
  ): scala.Unit = js.native
  /**
  	 * Fired after an appointment is created.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentCreated
  ): AppointmentCreatedEvent = js.native
  /**
  	 * Fired after an appointment is created.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentCreated,
    optionValue: AppointmentCreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before an appointment is created.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentCreating
  ): AppointmentCreatingEvent = js.native
  /**
  	 * Fired before an appointment is created.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentCreating,
    optionValue: AppointmentCreatingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after an appointment is deleted.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDeleted
  ): AppointmentDeletedEvent = js.native
  /**
  	 * Fired after an appointment is deleted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDeleted,
    optionValue: AppointmentDeletedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before an appointment is deleted.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDeleting
  ): AppointmentDeletingEvent = js.native
  /**
  	 * Fired before an appointment is deleted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDeleting,
    optionValue: AppointmentDeletingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after closing the dialog window for adding/editing appointment.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogClosed
  ): AppointmentDialogClosedEvent = js.native
  /**
  	 * Fired after closing the dialog window for adding/editing appointment.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogClosed,
    optionValue: AppointmentDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before closing the dialog for adding/editing appointment.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogClosing
  ): AppointmentDialogClosingEvent = js.native
  /**
  	 * Fired before closing the dialog for adding/editing appointment.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogClosing,
    optionValue: AppointmentDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after opening the dialog for creating/editing appointment.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogOpened
  ): AppointmentDialogOpenedEvent = js.native
  /**
  	 * Fired after opening the dialog for creating/editing appointment.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogOpened,
    optionValue: AppointmentDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before opening the dialog for creating/editing appointment.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogOpening
  ): AppointmentDialogOpeningEvent = js.native
  /**
  	 * Fired before opening the dialog for creating/editing appointment.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogOpening,
    optionValue: AppointmentDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the appointment dialog and the related day and appointment popups should be shown.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogSuppress
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the appointment dialog and the related day and appointment popups should be shown.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentDialogSuppress,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired after an appointment is edited.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentEdited
  ): AppointmentEditedEvent = js.native
  /**
  	 * Fired after an appointment is edited.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentEdited,
    optionValue: AppointmentEditedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before an appointment is edited.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentEditing
  ): AppointmentEditingEvent = js.native
  /**
  	 * Fired before an appointment is edited.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.appointmentEditing,
    optionValue: AppointmentEditingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets dataSource of type $.ig.scheduler.ScheduleListDataSource.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * /Sets dataSource of type $.ig.scheduler.ScheduleListDataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after day is changed when using previous and next buttons (fired only in Day View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayChanged
  ): DayChangedEvent = js.native
  /**
  	 * Fired after day is changed when using previous and next buttons (fired only in Day View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayChanged,
    optionValue: DayChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the day begins, when using previous and next buttons (fired only in Day View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayChanging
  ): DayChangingEvent = js.native
  /**
  	 * Fired before changing the day begins, when using previous and next buttons (fired only in Day View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayChanging,
    optionValue: DayChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when a day is selected from the datepicker calendar.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.daySelected
  ): DaySelectedEvent = js.native
  /**
  	 * Fired when a day is selected from the datepicker calendar.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.daySelected,
    optionValue: DaySelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets DayView settings.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayViewSettings
  ): IgSchedulerDayViewSettings = js.native
  /**
  	 * /Sets DayView settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dayViewSettings,
    optionValue: IgSchedulerDayViewSettings
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables today button.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableTodayButton
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables today button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableTodayButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after month is changed when using previous and next buttons (fired only in Month View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthChanged
  ): MonthChangedEvent = js.native
  /**
  	 * Fired after month is changed when using previous and next buttons (fired only in Month View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthChanged,
    optionValue: MonthChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the month begins, when using previous and next buttons (fired only in Month View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthChanging
  ): MonthChangingEvent = js.native
  /**
  	 * Fired before changing the month begins, when using previous and next buttons (fired only in Month View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthChanging,
    optionValue: MonthChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets MonthView settings.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthViewSettings
  ): IgSchedulerMonthViewSettings = js.native
  /**
  	 * /Sets MonthView settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.monthViewSettings,
    optionValue: IgSchedulerMonthViewSettings
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the scheduler has finished.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the scheduler has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the scheduler begins.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the scheduler begins.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the resources collection that holds the activities` owners
  	 *
  	 * //Initialize
  	 * var resources = [
  	 * { id: 1, displayName: "Trina Friesen" },
  	 * { id: 2, displayName: "Mack Koch" }];
  	 * $(".selector").%%WidgetName%%({
  	 * resources: resources
  	 * });
  	 *
  	 * // Get
  	 * var resources = $(".selector").%%WidgetName%%("option", "resources");
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resources
  ): js.Any = js.native
  /**
  	 * The resources collection that holds the activities` owners
  	 *
  	 * //Initialize
  	 * var resources = [
  	 * { id: 1, displayName: "Trina Friesen" },
  	 * { id: 2, displayName: "Mack Koch" }];
  	 * $(".selector").%%WidgetName%%({
  	 * resources: resources
  	 * });
  	 *
  	 * // Get
  	 * var resources = $(".selector").%%WidgetName%%("option", "resources");
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resources,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets selected date in the Scheduler.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedDate
  ): stdLib.Date = js.native
  /**
  	 * /Sets selected date in the Scheduler.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedDate,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Fired after the view is changed, when using the menu buttons.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewChanged
  ): ViewChangedEvent = js.native
  /**
  	 * Fired after the view is changed, when using the menu buttons.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewChanged,
    optionValue: ViewChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the view is changed, when using the menu buttons.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewChanging
  ): ViewChangingEvent = js.native
  /**
  	 * Fired before the view is changed, when using the menu buttons.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewChanging,
    optionValue: ViewChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets current view mode in the Scheduler. If this options is not defined, then the first defined view in the views property is taken.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewMode
  ): java.lang.String = js.native
  /**
  	 * /Sets current view mode in the Scheduler. If this options is not defined, then the first defined view in the views property is taken.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.viewMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Lists of all the views, rendered in the Scheduler.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.views
  ): js.Array[_] = js.native
  /**
  	 * Lists of all the views, rendered in the Scheduler.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.views,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Fired after week is changed when using previous and next buttons (fired only in Week View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekChanged
  ): WeekChangedEvent = js.native
  /**
  	 * Fired after week is changed when using previous and next buttons (fired only in Week View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekChanged,
    optionValue: WeekChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the week begins, when using previous and next buttons (fired only in Week View)
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekChanging
  ): WeekChangingEvent = js.native
  /**
  	 * Fired before changing the week begins, when using previous and next buttons (fired only in Week View)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekChanging,
    optionValue: WeekChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets WeekView settings.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekViewSettings
  ): IgSchedulerWeekViewSettings = js.native
  /**
  	 * /Sets WeekView settings.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.weekViewSettings,
    optionValue: IgSchedulerWeekViewSettings
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igScheduler(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igScheduler(options: IgScheduler): JQuery = js.native
  @JSName("igScheduler")
  def igScheduler_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igScheduler")
  def igScheduler_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igScheduler")
  def igScheduler_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igScheduler")
  def igScheduler_createAppointment(methodName: igniteDashUiLib.igniteDashUiLibStrings.createAppointment, appointment: js.Object): js.Object = js.native
  @JSName("igScheduler")
  def igScheduler_dateRangeButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dateRangeButton): java.lang.String = js.native
  @JSName("igScheduler")
  def igScheduler_deleteAppointment(methodName: igniteDashUiLib.igniteDashUiLibStrings.deleteAppointment, appointment: js.Object): js.Object = js.native
  @JSName("igScheduler")
  def igScheduler_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igScheduler")
  def igScheduler_editAppointment(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.editAppointment,
    appointment: js.Object,
    updateAppoinment: js.Object
  ): js.Object = js.native
  @JSName("igScheduler")
  def igScheduler_getAppointmentsInRange(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getAppointmentsInRange,
    start: stdLib.Date,
    end: stdLib.Date
  ): js.Object = js.native
  @JSName("igScheduler")
  def igScheduler_getCalendar(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCalendar): java.lang.String = js.native
  @JSName("igScheduler")
  def igScheduler_nextButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.nextButton): java.lang.String = js.native
  @JSName("igScheduler")
  def igScheduler_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igScheduler")
  def igScheduler_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igScheduler")
  def igScheduler_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgScheduler): JQuery = js.native
  @JSName("igScheduler")
  def igScheduler_previousButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.previousButton): java.lang.String = js.native
  @JSName("igScheduler")
  def igScheduler_todayButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.todayButton): java.lang.String = js.native
  def igScroll(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alwaysVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alwaysVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bigIncrementStep
  ): scala.Double = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bigIncrementStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDeltaX
  ): scala.Double = js.native
  /**
  	 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDeltaX,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDeltaY
  ): scala.Double = js.native
  /**
  	 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDeltaY,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets the modifier for how long the inertia last on mobile devices
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDuration
  ): scala.Double = js.native
  /**
  	 * Sets gets the modifier for how long the inertia last on mobile devices
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets the modifier for how much the inertia scrolls on mobile devices
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaStep
  ): scala.Double = js.native
  /**
  	 * Sets gets the modifier for how much the inertia scrolls on mobile devices
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inertiaStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the minimum size of the thumb drag in pixels. For the vertical thumb it means its minimum height, for the horizontal thumb it means its minimum width. This affects only the custom scrollblar when scrollbarType is set to "custom".
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minThumbSize
  ): scala.Double | java.lang.String = js.native
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minThumbSize,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the minimum size of the thumb drag in pixels. For the vertical thumb it means its minimum height, for the horizontal thumb it means its minimum width. This affects only the custom scrollblar when scrollbarType is set to "custom".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minThumbSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modifyDOM
  ): scala.Boolean = js.native
  /**
  	 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modifyDOM,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after the scroller has been rendered fully
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event which is raised after the scroller has been rendered fully
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after the igScroll has finished resizing.
  	 * Function takes arguments evt and args.
  	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
  	 * Use args.owner to obtain reference to igScroll.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resized
  ): ResizedEvent = js.native
  /**
  	 * Event which is raised after the igScroll has finished resizing.
  	 * Function takes arguments evt and args.
  	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
  	 * Use args.owner to obtain reference to igScroll.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resized,
    optionValue: ResizedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when the igScroll detects that the element is reizing.
  	 * Function takes arguments evt and args.
  	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
  	 * Use args.owner to obtain reference to igScroll.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizing
  ): ResizingEvent = js.native
  /**
  	 * Event which is raised when the igScroll detects that the element is reizing.
  	 * Function takes arguments evt and args.
  	 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
  	 * Use args.owner to obtain reference to igScroll.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizing,
    optionValue: ResizingEvent
  ): scala.Unit = js.native
  /**
  	 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollHeight
  ): scala.Double = js.native
  /**
  	 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets current horizontal position of the content.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollLeft
  ): scala.Double = js.native
  /**
  	 * Sets gets current horizontal position of the content.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollLeft,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollOnlyHBar
  ): scala.Boolean = js.native
  /**
  	 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollOnlyHBar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollOnlyVBar
  ): scala.Boolean = js.native
  /**
  	 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollOnlyVBar,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets current vertical position of the content.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollTop
  ): scala.Double = js.native
  /**
  	 * Sets gets current vertical position of the content.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollTop,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollWidth
  ): scala.Double = js.native
  /**
  	 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets html or jQuery element which is used for horizontal scrolling.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarH
  ): java.lang.String = js.native
  /**
  	 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarHParent
  ): java.lang.String = js.native
  /**
  	 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarHParent,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets gets html or jQuery element which is used for horizontal scrolling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarH,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarType
  ): java.lang.String = js.native
  /**
  	 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets gets html or jQuery element which is used for vertical scrolling.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarV
  ): java.lang.String = js.native
  /**
  	 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarVParent
  ): java.lang.String = js.native
  /**
  	 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarVParent,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets gets html or jQuery element which is used for vertical scrolling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollbarV,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after scrolling has stopped.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrolled
  ): ScrolledEvent = js.native
  /**
  	 * Event which is raised after scrolling has stopped.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrolled,
    optionValue: ScrolledEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before scrolling or before each step when having inertia.
  	 * Return false in order to cancel action.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrolling
  ): ScrollingEvent = js.native
  /**
  	 * Event which is raised before scrolling or before each step when having inertia.
  	 * Return false in order to cancel action.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrolling,
    optionValue: ScrollingEvent
  ): scala.Unit = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smallIncrementStep
  ): scala.Double = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smallIncrementStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothing
  ): scala.Boolean = js.native
  /**
  	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothingDuration
  ): scala.Double = js.native
  /**
  	 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothingDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothingStep
  ): scala.Double = js.native
  /**
  	 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothingStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.smoothing,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeToleranceX
  ): scala.Double = js.native
  /**
  	 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeToleranceX,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncedElemsH
  ): js.Array[_] = js.native
  /**
  	 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncedElemsH,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncedElemsV
  ): js.Array[_] = js.native
  /**
  	 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncedElemsV,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Event which is raised on mouse up from the scrollbar's thumb drag.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragEnd
  ): ThumbDragEndEvent = js.native
  /**
  	 * Event which is raised on mouse up from the scrollbar's thumb drag.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragEnd,
    optionValue: ThumbDragEndEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when the thumb drag is being moved.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragMove
  ): ThumbDragMoveEvent = js.native
  /**
  	 * Event which is raised when the thumb drag is being moved.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragMove,
    optionValue: ThumbDragMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragStart
  ): ThumbDragStartEvent = js.native
  /**
  	 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbDragStart,
    optionValue: ThumbDragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using mouse wheel
  	 *
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wheelStep
  ): scala.Double = js.native
  /**
  	 * Sets gets the step of the default scrolling behavior when using mouse wheel
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igScroll(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wheelStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igScroll(options: IgScroll): JQuery = js.native
  @JSName("igScroll")
  def igScroll_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igScroll")
  def igScroll_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igScroll")
  def igScroll_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igScroll")
  def igScroll_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igScroll")
  def igScroll_option(methodName: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: js.Object, value: js.Object): scala.Unit = js.native
  @JSName("igScroll")
  def igScroll_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igScroll")
  def igScroll_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igScroll")
  def igScroll_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgScroll): JQuery = js.native
  @JSName("igScroll")
  def igScroll_refresh(methodName: igniteDashUiLib.igniteDashUiLibStrings.refresh): scala.Unit = js.native
  def igShapeChart(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels
  ): scala.Boolean = js.native
  /**
  	 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alignsGridLinesToPixels,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the series animations should be allowed when a range change has been detected on an axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the series animations should be allowed when a range change has been detected on an axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animateSeriesWhenAxisRangeChanges,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin around the chart content.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin around the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for coloring the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating
  ): CalloutStyleUpdatingEvent = js.native
  /**
  	 * Gets  if event annotations should be displayed.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets if event annotations should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdatingEventEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the style of a callout is updated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutStyleUpdating,
    optionValue: CalloutStyleUpdatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the content data for the callouts.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the content data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsContentMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the collection of callout data to be annotated.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource
  ): js.Any = js.native
  /**
  	 * Sets the collection of callout data to be annotated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsItemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the label data for the callouts.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the label data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsLabelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  if callouts should be displayed.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets if callouts should be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the X data for the callouts.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the X data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsXMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the member path of the Y data for the callouts.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the member path of the Y data for the callouts.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.calloutsYMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the type of chart series to generate from the data.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType
  ): java.lang.String = js.native
  /**
  	 * Sets the type of chart series to generate from the data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.chartType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a function for creating wrapped tooltip
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip
  ): js.Any = js.native
  /**
  	 * Sets a function for creating wrapped tooltip
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.createWrappedTooltip,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations are shown along the axis for crosshair values
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations are shown along the axis for crosshair values
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsAnnotationEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the crosshairs to be displayed.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode
  ): java.lang.String = js.native
  /**
  	 * Sets the crosshairs to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsDisplayMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether crosshairs will snap to the nearest data point.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData
  ): scala.Boolean = js.native
  /**
  	 * Sets whether crosshairs will snap to the nearest data point.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.crosshairsSnapToData,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Return false in order to cancel data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * String The database source URI.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.databaseSource
  ): java.lang.String = js.native
  /**
  	 * String The database source URI.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.databaseSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be excluded from consideration by the category chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be excluded from consideration by the category chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether annotations for the final value of each series is displayed on the axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible
  ): scala.Boolean = js.native
  /**
  	 * Sets whether annotations for the final value of each series is displayed on the axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.finalValueAnnotationsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The height of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double = js.native
  /**
  	 * The height of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties
  ): js.Any = js.native
  /**
  	 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includedProperties,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be horizontally zoomed through user interactions.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be horizontally zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHorizontalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can highlight series through user interactions.
  	 * This property applies to Category Chart and Financial Chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSeriesHighlightingEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the chart can be vertically zoomed through user interactions.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the chart can be vertically zoomed through user interactions.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isVerticalZoomEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource
  ): js.Any = js.native
  /**
  	 * Sets a collection of data items used to generate the chart.
  	 * The ItemsSource of this chart can be a list of objects containing one or more numeric properties.
  	 * Additionally, if the objects in the list implement the IEnumerable interface,
  	 * the Chart will attempt to delve into the sub-collections when reading through the data source.
  	 * Databinding can be further configured by attributing the data item classes
  	 * with the DataSeriesMemberIntentAttribute.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of the chart content.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend
  ): js.Any = js.native
  /**
  	 * Sets the legend to connect this chart to.
  	 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.legend,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering fill area of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  collision avoidance between markers on series that support this behaviour.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerCollision
  ): java.lang.String = js.native
  /**
  	 * Sets collision avoidance between markers on series that support this behaviour.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerCollision,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum number of markers displyed in the plot area of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount
  ): scala.Double = js.native
  /**
  	 * Sets the maximum number of markers displyed in the plot area of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerMaxCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes used for rendering outlines of data point markers.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerOutlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes
  ): js.Any = js.native
  /**
  	 * Sets the marker shapes used for indicating location of data points in this chart.
  	 * This property applies only to these chart types: point, line, spline, bubble, and polygon
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerTypes,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to use for outlines on the chart series.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.outlines,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged
  ): PropertyChangedEvent = js.native
  /**
  	 * Event raised when a property value is changed on this chart
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged,
    optionValue: PropertyChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution
  ): scala.Double = js.native
  /**
  	 * Sets the rendering resolution for all series in this chart.
  	 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolution,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of the chart content.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded
  ): SeriesAddedEvent = js.native
  /**
  	 * Event raised when a series is initialized and added to this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesAdded,
    optionValue: SeriesAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown
  ): SeriesPointerDownEvent = js.native
  /**
  	 * Occurs when the pointer is pressed down over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerDown,
    optionValue: SeriesPointerDownEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter
  ): SeriesPointerEnterEvent = js.native
  /**
  	 * Occurs when the pointer enters a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerEnter,
    optionValue: SeriesPointerEnterEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave
  ): SeriesPointerLeaveEvent = js.native
  /**
  	 * Occurs when the pointer leaves a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerLeave,
    optionValue: SeriesPointerLeaveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove
  ): SeriesPointerMoveEvent = js.native
  /**
  	 * Occurs when the pointer moves over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerMove,
    optionValue: SeriesPointerMoveEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp
  ): SeriesPointerUpEvent = js.native
  /**
  	 * Occurs when the pointer is released over a Series.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesPointerUp,
    optionValue: SeriesPointerUpEvent
  ): scala.Unit = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved
  ): SeriesRemovedEvent = js.native
  /**
  	 * Event raised when a series is removed from this chart.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.seriesRemoved,
    optionValue: SeriesRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shapeDataSource
  ): java.lang.String = js.native
  /**
  	 * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.shapeDataSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display below the Title, above the plot area.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart subtitle
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart subtitle
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display below the Title, above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.subtitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  text to display above the plot area.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): java.lang.String = js.native
  /**
  	 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for the chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for the chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of chart title
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of chart title
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.titleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets text to display above the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the style of tooltip to be displayed.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType
  ): java.lang.String = js.native
  /**
  	 * Sets the style of tooltip to be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolTipType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): js.Any = js.native
  /**
  	 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the names of tooltip templates
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates
  ): js.Any = js.native
  /**
  	 * Sets the names of tooltip templates
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplates,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of the chart content.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of the chart content.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.topMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the duration used for animating series plots when the data is changing
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration
  ): scala.Double = js.native
  /**
  	 * Sets the duration used for animating series plots when the data is changing
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction
  ): js.Any = js.native
  /**
  	 * Sets the easing function used for animating series plots when the data is changing.
  	 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.transitionEasingFunction,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes
  ): js.Any = js.native
  /**
  	 * Sets the palette of brushes to used for coloring trend lines in this chart.
  	 * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
  	 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrushes,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod
  ): scala.Double = js.native
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness of the trend lines in this chart.
  	 * This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType
  ): java.lang.String = js.native
  /**
  	 * Sets the formula used for calculating trend lines in this chart.This property applies only to these chart types: point, line, spline, and bubble
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangulationDataSource
  ): java.lang.String = js.native
  /**
  	 * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.triangulationDataSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting
  ): java.lang.String = js.native
  /**
  	 * Sets the behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the widget of this control
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget
  ): js.Any = js.native
  /**
  	 * Sets the widget of this control
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.widget,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The width of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double = js.native
  /**
  	 * The width of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Sets the rectangle representing the current scroll and zoom state of the chart.
  	 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
  	 * The provided object should have numeric properties called left, top, width and height.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the large numbers on the X-axis labels are abbreviated.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisAbbreviateLargeNumbers
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the large numbers on the X-axis labels are abbreviated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisAbbreviateLargeNumbers,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the X-axis and the bottom of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the X-axis and the bottom of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes an context object and returns a formatted label for the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes an context object and returns a formatted label for the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed labels along the X-axis.
  	 * Gets  the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed labels along the X-axis.
  	 *  sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the X-axis will use a logarithmic scale, instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the X-axis minimum is greater than zero.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisIsLogarithmic
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the X-axis will use a logarithmic scale, instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the X-axis minimum is greater than zero.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisIsLogarithmic,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the format for labels along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of X-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of X-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of X-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of X-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the format for labels along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the base value to use in the log function when mapping the position of data items along the X-axis.
  	 * This property is effective only when y-axis is logarithmic
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLogarithmBase
  ): scala.Double = js.native
  /**
  	 * Sets the base value to use in the log function when mapping the position of data items along the X-axis.
  	 * This property is effective only when y-axis is logarithmic
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisLogarithmBase,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the maximum value on the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMaximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the maximum value on the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMaximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the minimum value on the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the minimum value on the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed minor lines along the X-axis.
  	 * Gets  the set value is a factor that determines how the minor lines will be displayed.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed minor lines along the X-axis.
  	 *  sets the set value is a factor that determines how the minor lines will be displayed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the X-axis line.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the X-axis line.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the X-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display below the X-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Horizontal alignment of the X-axis title.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the X-axis title.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the X-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the X-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the X-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display below the X-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.xAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the large numbers on the Y-axis labels are abbreviated.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the large numbers on the Y-axis labels are abbreviated.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisAbbreviateLargeNumbers,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between the Y-axis and the left edge of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent
  ): scala.Double = js.native
  /**
  	 * Sets the distance between the Y-axis and the left edge of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel
  ): js.Any = js.native
  /**
  	 * Sets function which takes a context object and returns a formatted label for the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisFormatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the distance between each label and grid line along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval
  ): scala.Double = js.native
  /**
  	 * Sets the distance between each label and grid line along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisInverted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
  	 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisIsLogarithmic,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the property or string from which the labels are derived.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel
  ): js.Any = js.native
  /**
  	 * Gets  the angle of rotation for labels along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for labels along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of labels on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Horizontal alignment of Y-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Horizontal alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelHorizontalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of labels on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation
  ): java.lang.String = js.native
  /**
  	 * The location of Y-axis labels, relative to the plot area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of labels on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of labels on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for labels on Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for labels on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of labels on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of labels on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  Vertical alignment of Y-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVerticalAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  Visibility of Y-axis labels.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets Visibility of Y-axis labels.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabelVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the property or string from which the labels are derived.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase
  ): scala.Double = js.native
  /**
  	 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
  	 * This property is effective only when YAxisIsLogarithmic is true.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisLogarithmBase,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to major gridlines along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to major gridlines along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to major gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMajorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the maximum value of the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the maximum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMaximumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the data value corresponding to the minimum value of the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue
  ): scala.Double = js.native
  /**
  	 * Sets the data value corresponding to the minimum value of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinimumValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the frequency of displayed minor lines along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval
  ): scala.Double = js.native
  /**
  	 * Sets the frequency of displayed minor lines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorInterval,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to minor gridlines along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to minor gridlines along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to minor gridlines along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisMinorStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to stripes along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip
  ): java.lang.String = js.native
  /**
  	 * Sets the color to apply to stripes along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to the Y-axis line.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to the Y-axis line.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to the Y-axis line.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the length of tickmarks along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength
  ): scala.Double = js.native
  /**
  	 * Sets the length of tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the color to apply to tickmarks along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke
  ): java.lang.String = js.native
  /**
  	 * Gets  the thickness to apply to tickmarks along the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the color to apply to tickmarks along the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTickStroke,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the Text to display to the left of the Y-axis.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle
  ): java.lang.String = js.native
  /**
  	 * Gets  Vertical alignment of the Y-axis title.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment
  ): java.lang.String = js.native
  /**
  	 * Sets Vertical alignment of the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAlignment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the angle of rotation for the Y-axis title.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle
  ): scala.Double = js.native
  /**
  	 * Sets the angle of rotation for the Y-axis title.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleAngle,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the bottom margin of a title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin
  ): scala.Double = js.native
  /**
  	 * Sets the bottom margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleBottomMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the left margin of a title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin
  ): scala.Double = js.native
  /**
  	 * Sets the left margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleLeftMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the margin around a title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin
  ): scala.Double = js.native
  /**
  	 * Sets the margin around a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the right margin of a title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin
  ): scala.Double = js.native
  /**
  	 * Sets the right margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleRightMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  color of title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor
  ): java.lang.String = js.native
  /**
  	 * Sets color of title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextColor,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  CSS font property for title on Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle
  ): java.lang.String = js.native
  /**
  	 * Sets CSS font property for title on Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTextStyle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the top margin of a title on the Y-axis
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin
  ): scala.Double = js.native
  /**
  	 * Sets the top margin of a title on the Y-axis
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitleTopMargin,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Sets the Text to display to the left of the Y-axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igShapeChart(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yAxisTitle,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igShapeChart(options: IgShapeChart): JQuery = js.native
  @JSName("igShapeChart")
  def igShapeChart_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igShapeChart")
  def igShapeChart_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igShapeChart")
  def igShapeChart_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igShapeChart")
  def igShapeChart_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igShapeChart")
  def igShapeChart_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igShapeChart")
  def igShapeChart_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igShapeChart")
  def igShapeChart_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): scala.Unit = js.native
  @JSName("igShapeChart")
  def igShapeChart_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igShapeChart")
  def igShapeChart_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igShapeChart")
  def igShapeChart_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgShapeChart): JQuery = js.native
  @JSName("igShapeChart")
  def igShapeChart_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igShapeChart")
  def igShapeChart_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  def igSlider(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Get or set whether the slide handle will animate when it is moved.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animate
  ): scala.Boolean = js.native
  /**
  	 * Get or set whether the slide handle will animate when it is moved.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animate,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkClick
  ): BookmarkClickEvent = js.native
  /**
  	 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkClick,
    optionValue: BookmarkClickEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkHit
  ): BookmarkHitEvent = js.native
  /**
  	 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkHit,
    optionValue: BookmarkHitEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set the bookmarks array.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarks
  ): IgSliderBookmarks = js.native
  /**
  	 * Get or set the bookmarks array.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarks,
    optionValue: IgSliderBookmarks
  ): scala.Unit = js.native
  /**
  	 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.change
  ): ChangeEvent = js.native
  /**
  	 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.change,
    optionValue: ChangeEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set the slider range maximum value.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.max
  ): scala.Double = js.native
  /**
  	 * Get or set the slider range maximum value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.max,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Get or set the slider range minimum value.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.min
  ): scala.Double = js.native
  /**
  	 * Get or set the slider range minimum value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.min,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Get or set the slider orientation.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): js.Any = js.native
  /**
  	 * Get or set the slider orientation.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Get or set the whether to show bookmarks title on bookmark hover or not.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showBookmarkTitle
  ): scala.Boolean = js.native
  /**
  	 * Get or set the whether to show bookmarks title on bookmark hover or not.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showBookmarkTitle,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the slide event. Fired when the user is sliding with mouse.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.slide
  ): SlideEvent = js.native
  /**
  	 * Defines the slide event. Fired when the user is sliding with mouse.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.slide,
    optionValue: SlideEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the slide start event.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.start
  ): StartEvent = js.native
  /**
  	 * Defines the slide start event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.start,
    optionValue: StartEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set the step with which the value is increased.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.step
  ): scala.Double = js.native
  /**
  	 * Get or set the step with which the value is increased.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.step,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines the slide stop event. Fired to mark the end of a sliding action.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stop
  ): StopEvent = js.native
  /**
  	 * Defines the slide stop event. Fired to mark the end of a sliding action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stop,
    optionValue: StopEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncHandleWithBookmark
  ): scala.Boolean = js.native
  /**
  	 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncHandleWithBookmark,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Get or set the slider value.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): scala.Double = js.native
  /**
  	 * Get or set the slider value.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igSlider(options: IgSlider): JQuery = js.native
  @JSName("igSlider")
  def igSlider_clearBookmarks(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearBookmarks): scala.Unit = js.native
  @JSName("igSlider")
  def igSlider_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igSlider")
  def igSlider_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igSlider")
  def igSlider_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igSlider")
  def igSlider_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgSlider): JQuery = js.native
  @JSName("igSlider")
  def igSlider_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): scala.Unit = js.native
  @JSName("igSlider")
  def igSlider_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igSparkline(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets  the sparkline brush.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brush
  ): java.lang.String = js.native
  /**
  	 * Sets the sparkline brush.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igSparkline.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event which is raised before data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igSparkline.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igSparkline.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event which is raised after data binding.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to igSparkline.
  	 * Use ui.data to obtain reference to array actual data which is displayed by chart.
  	 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  url which is used for sending JSON on request for remote data.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets url which is used for sending JSON on request for remote data.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a valid data source.
  	 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
  	 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the position of the normal range on the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayNormalRangeInFront
  ): scala.Boolean = js.native
  /**
  	 * Sets the position of the normal range on the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayNormalRangeInFront,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets  the display type of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayType
  ): java.lang.String = js.native
  /**
  	 * Sets the display type of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the first marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the first marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the first marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerSize
  ): scala.Double = js.native
  /**
  	 * Sets the first marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the first marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the first marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstMarkerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel
  ): js.Any = js.native
  /**
  	 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formatLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip
  ): HideTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is hidden.
  	 * Return false in order to cancel hiding and keep tooltip visible.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.item to obtain reference to item.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideTooltip,
    optionValue: HideTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the high marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the high marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the high marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerSize
  ): scala.Double = js.native
  /**
  	 * Sets the high marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the high marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the high marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.highMarkerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the horizontal axis line brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the horizontal axis line brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The value or content to display on the horizontal axis.
  	 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisLabel
  ): js.Any = js.native
  /**
  	 * The value or content to display on the horizontal axis.
  	 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the display state of the horizontal axis.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the display state of the horizontal axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalAxisVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelMemberPath
  ): java.lang.String = js.native
  /**
  	 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the last marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the last marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the last marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerSize
  ): scala.Double = js.native
  /**
  	 * Sets the last marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the last marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the last marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastMarkerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the line thickness of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the line thickness of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the low marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the low marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the low marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerSize
  ): scala.Double = js.native
  /**
  	 * Sets the low marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the low marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the low marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowMarkerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerSize
  ): scala.Double = js.native
  /**
  	 * Sets the marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.markerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  maximum number of displayed records in chart.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount
  ): scala.Double = js.native
  /**
  	 * Sets maximum number of displayed records in chart.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxRecCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the negative brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the negative brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the negative marker brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the negative marker brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the negative marker size of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerSize
  ): scala.Double = js.native
  /**
  	 * Sets the negative marker size of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the negative marker visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the negative marker visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.negativeMarkerVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the normal range brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeFill
  ): java.lang.String = js.native
  /**
  	 * Sets the normal range brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeFill,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the maximum value of the normal range.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeMaximum
  ): scala.Double = js.native
  /**
  	 * Sets the maximum value of the normal range.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeMaximum,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the minimum value of the normal range.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeMinimum
  ): scala.Double = js.native
  /**
  	 * Sets the minimum value of the normal range.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeMinimum,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the normal range visibility of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the normal range visibility of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.normalRangeVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * Sets template for tooltip associated with chart item.
  	 * Example: "Value: $(ValueMemberPathInDataSource)"
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the trendline brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the trendline brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the trendline period used by the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod
  ): scala.Double = js.native
  /**
  	 * Sets the trendline period used by the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLinePeriod,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the thickness of the sparkline's trendline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness
  ): scala.Double = js.native
  /**
  	 * Sets the thickness of the sparkline's trendline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the type of trendline used by the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType
  ): java.lang.String = js.native
  /**
  	 * Sets the type of trendline used by the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trendLineType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the way null values are interpreted.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting
  ): java.lang.String = js.native
  /**
  	 * Sets the way null values are interpreted.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unknownValuePlotting,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip
  ): UpdateTooltipEvent = js.native
  /**
  	 * Event which is raised before tooltip is updated.
  	 * Return false in order to cancel updating and hide tooltip.
  	 * Function takes first argument null and second argument ui.
  	 * Use ui.owner to obtain reference to chart widget.
  	 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
  	 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
  	 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
  	 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateTooltip,
    optionValue: UpdateTooltipEvent
  ): scala.Unit = js.native
  /**
  	 * Gets  the string path to the value column.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath
  ): java.lang.String = js.native
  /**
  	 * Sets the string path to the value column.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueMemberPath,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  the vertical axis line brush of the sparkline.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisBrush
  ): java.lang.String = js.native
  /**
  	 * Sets the vertical axis line brush of the sparkline.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisBrush,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The value or content to display on the vertical axis.
  	 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisLabel
  ): js.Any = js.native
  /**
  	 * The value or content to display on the vertical axis.
  	 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisLabel,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets  the display state of the vertical axis.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisVisibility
  ): java.lang.String = js.native
  /**
  	 * Sets the display state of the vertical axis.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.verticalAxisVisibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSparkline(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igSparkline(options: IgSparkline): JQuery = js.native
  @JSName("igSparkline")
  def igSparkline_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_chart(methodName: igniteDashUiLib.igniteDashUiLibStrings.chart): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igSparkline")
  def igSparkline_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igSparkline")
  def igSparkline_findIndexOfItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.findIndexOfItem, item: js.Object): scala.Double = js.native
  @JSName("igSparkline")
  def igSparkline_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igSparkline")
  def igSparkline_getData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getData): js.Array[_] = js.native
  @JSName("igSparkline")
  def igSparkline_getDataItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDataItem, index: js.Object): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_insertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.insertItem,
    item: js.Object,
    index: scala.Double
  ): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_notifyClearItems(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyClearItems, dataSource: js.Object): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_notifyInsertItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyInsertItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object
  ): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_notifyRemoveItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifyRemoveItem,
    dataSource: js.Object,
    index: scala.Double,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_notifySetItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySetItem,
    dataSource: js.Object,
    index: scala.Double,
    newItem: js.Object,
    oldItem: js.Object
  ): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igSparkline")
  def igSparkline_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igSparkline")
  def igSparkline_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgSparkline): JQuery = js.native
  @JSName("igSparkline")
  def igSparkline_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: scala.Double): js.Object = js.native
  @JSName("igSparkline")
  def igSparkline_setItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.setItem, index: scala.Double, item: js.Object): js.Object = js.native
  def igSplitButton(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired when the button is clicked.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.item to get a reference the igSplitButton element.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.click
  ): ClickEvent = js.native
  /**
  	 * Event fired when the button is clicked.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.item to get a reference the igSplitButton element.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.click,
    optionValue: ClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the button is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed
  ): CollapsedEvent = js.native
  /**
  	 * Event fired after the button is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed,
    optionValue: CollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a button item is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing
  ): CollapsingEvent = js.native
  /**
  	 * Event fired before a button item is collapsed.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing,
    optionValue: CollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Default button item name.
  	 *
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultItemName
  ): java.lang.String = js.native
  /**
  	 * Default button item name.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultItemName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the button is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded
  ): ExpandedEvent = js.native
  /**
  	 * Event fired after the button is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded,
    optionValue: ExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a button item is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding
  ): ExpandingEvent = js.native
  /**
  	 * Event fired before a button item is expanded.
  	 *
  	 *             Function takes arguments evt and ui.
  	 * Use ui.owner to get a reference the igSplitButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding,
    optionValue: ExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Button items.
  	 *
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Array[IgSplitButtonItem] = js.native
  /**
  	 * Button items.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Array[IgSplitButtonItem]
  ): scala.Unit = js.native
  /**
  	 * Gets whether the default button will be switched when another button is selected.
  	 *
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDefaultEnabled
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the default button will be switched when another button is selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swapDefaultEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igSplitButton(options: IgSplitButton): JQuery = js.native
  @JSName("igSplitButton")
  def igSplitButton_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse): js.Object = js.native
  @JSName("igSplitButton")
  def igSplitButton_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse, e: js.Object): js.Object = js.native
  @JSName("igSplitButton")
  def igSplitButton_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igSplitButton")
  def igSplitButton_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand): js.Object = js.native
  @JSName("igSplitButton")
  def igSplitButton_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand, e: js.Object): js.Object = js.native
  @JSName("igSplitButton")
  def igSplitButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igSplitButton")
  def igSplitButton_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igSplitButton")
  def igSplitButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgSplitButton): JQuery = js.native
  @JSName("igSplitButton")
  def igSplitButton_switchToButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.switchToButton, button: js.Object): scala.Unit = js.native
  @JSName("igSplitButton")
  def igSplitButton_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle, e: js.Object): js.Object = js.native
  @JSName("igSplitButton")
  def igSplitButton_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igSplitter(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Fired after collapsing is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *                 Use ui.index to get an index of collapsed panel.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed
  ): CollapsedEvent = js.native
  /**
  	 * Fired after collapsing is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *                 Use ui.index to get an index of collapsed panel.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed,
    optionValue: CollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragDelta
  ): scala.Double = js.native
  /**
  	 * Sets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired after expanding is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *                 Use ui.index to get an index of expanded panel.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded
  ): ExpandedEvent = js.native
  /**
  	 * Fired after expanding is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *                 Use ui.index to get an index of expanded panel.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded,
    optionValue: ExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the container.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired after the panels are refreshed because of browser"s resizing.
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutRefreshed
  ): LayoutRefreshedEvent = js.native
  /**
  	 * Fired after the panels are refreshed because of browser"s resizing.
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutRefreshed,
    optionValue: LayoutRefreshedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the panels are refreshed because of browser"s resizing.
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutRefreshing
  ): LayoutRefreshingEvent = js.native
  /**
  	 * Fired before the panels are refreshed because of browser"s resizing.
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.layoutRefreshing,
    optionValue: LayoutRefreshingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the orientation of the splitter.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): java.lang.String = js.native
  /**
  	 * Sets the orientation of the splitter.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panels
  ): js.Array[IgSplitterPanel] = js.native
  /**
  	 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panels,
    optionValue: js.Array[IgSplitterPanel]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeEnded
  ): ResizeEndedEvent = js.native
  /**
  	 * Fired after split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeEnded,
    optionValue: ResizeEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets whether the other splitters on the page will be resized as this splitter resizes.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeOtherSplitters
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the other splitters on the page will be resized as this splitter resizes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeOtherSplitters,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired before split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeStarted
  ): ResizeStartedEvent = js.native
  /**
  	 * Fired before split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizeStarted,
    optionValue: ResizeStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired while split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizing
  ): ResizingEvent = js.native
  /**
  	 * Fired while split bar move is performed
  	 *
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get a reference to the splitter instance.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resizing,
    optionValue: ResizingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the container.
  	 *
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSplitter(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igSplitter(options: IgSplitter): JQuery = js.native
  @JSName("igSplitter")
  def igSplitter_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_collapseAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseAt, index: js.Object): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_expandAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.expandAt, index: js.Object): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_firstPanel(methodName: igniteDashUiLib.igniteDashUiLibStrings.firstPanel): js.Object = js.native
  @JSName("igSplitter")
  def igSplitter_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igSplitter")
  def igSplitter_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igSplitter")
  def igSplitter_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgSplitter): JQuery = js.native
  @JSName("igSplitter")
  def igSplitter_refreshLayout(methodName: igniteDashUiLib.igniteDashUiLibStrings.refreshLayout): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_secondPanel(methodName: igniteDashUiLib.igniteDashUiLibStrings.secondPanel): js.Object = js.native
  @JSName("igSplitter")
  def igSplitter_setFirstPanelSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFirstPanelSize, size: js.Object): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_setSecondPanelSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.setSecondPanelSize, size: js.Object): scala.Unit = js.native
  @JSName("igSplitter")
  def igSplitter_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): js.Object = js.native
  def igSpreadsheet(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Invoked when an action is executed on the Spreadsheet.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuted
  ): ActionExecutedEvent = js.native
  /**
  	 * Invoked when an action is executed on the Spreadsheet.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuted,
    optionValue: ActionExecutedEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when an action is about to be executed by the Spreadsheet.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuting
  ): ActionExecutingEvent = js.native
  /**
  	 * Invoked when an action is about to be executed by the Spreadsheet.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actionExecuting,
    optionValue: ActionExecutingEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  the A1 format address of the current active cell within the selected worksheet.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCell
  ): java.lang.String = js.native
  /**
  	 * Invoked when the activeCell of the Spreadsheet has changed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged
  ): ActiveCellChangedEvent = js.native
  /**
  	 * Invoked when the activeCell of the Spreadsheet has changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged,
    optionValue: ActiveCellChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns or sets the A1 format address of the current active cell within the selected worksheet.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCell,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Invoked when the activePane of the Spreadsheet has changed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activePaneChanged
  ): ActivePaneChangedEvent = js.native
  /**
  	 * Invoked when the activePane of the Spreadsheet has changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activePaneChanged,
    optionValue: ActivePaneChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the activeTable of the Spreadsheet has changed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeTableChanged
  ): ActiveTableChangedEvent = js.native
  /**
  	 * Invoked when the activeTable of the Spreadsheet has changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeTableChanged,
    optionValue: ActiveTableChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  the Worksheet from the workbook whose content should be displayed within the control.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeWorksheet
  ): js.Any = js.native
  /**
  	 * Invoked when the activeWorksheet of the Spreadsheet has changed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeWorksheetChanged
  ): ActiveWorksheetChangedEvent = js.native
  /**
  	 * Invoked when the activeWorksheet of the Spreadsheet has changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeWorksheetChanged,
    optionValue: ActiveWorksheetChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns or sets the Worksheet from the workbook whose content should be displayed within the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeWorksheet,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the spreadsheet allows adding worksheets.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowAddWorksheet
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the spreadsheet allows adding worksheets.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowAddWorksheet,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the spreadsheet allows deleting worksheets.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDeleteWorksheet
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the spreadsheet allows deleting worksheets.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDeleteWorksheet,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating if the grid lines are displayed in the selected worksheets.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areGridlinesVisible
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating if the grid lines are displayed in the selected worksheets.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areGridlinesVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating if the row and column headers are displayed for the selected worksheets.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areHeadersVisible
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating if the row and column headers are displayed for the selected worksheets.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areHeadersVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  an object with brushes for areas of the spreadsheet. The property name should be an item in the [SpreadsheetResourceId enumeration](ig.spreadsheet.SpreadsheetResourceId) and the property value a string representing a brush. These brushes override any css styling for the associated object.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes
  ): IgSpreadsheetBrushes = js.native
  /**
  	 * Returns or sets an object with brushes for areas of the spreadsheet. The property name should be an item in the [SpreadsheetResourceId enumeration](ig.spreadsheet.SpreadsheetResourceId) and the property value a string representing a brush. These brushes override any css styling for the associated object.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.brushes,
    optionValue: IgSpreadsheetBrushes
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet has started in-place editing of the activeCell.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeEntered
  ): EditModeEnteredEvent = js.native
  /**
  	 * Invoked when the Spreadsheet has started in-place editing of the activeCell.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeEntered,
    optionValue: EditModeEnteredEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet is about to start in-place editing of the activeCell.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeEntering
  ): EditModeEnteringEvent = js.native
  /**
  	 * Invoked when the Spreadsheet is about to start in-place editing of the activeCell.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeEntering,
    optionValue: EditModeEnteringEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet has ended the in-place editing of the activeCell.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeExited
  ): EditModeExitedEvent = js.native
  /**
  	 * Invoked when the Spreadsheet has ended the in-place editing of the activeCell.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeExited,
    optionValue: EditModeExitedEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet is about to end the in-place editing of the activeCell.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeExiting
  ): EditModeExitingEvent = js.native
  /**
  	 * Invoked when the Spreadsheet is about to end the in-place editing of the activeCell.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeExiting,
    optionValue: EditModeExitingEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet is exiting edit mode and the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
  	 * The EditModeValidationError is raised while exiting edit mode if the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
  	 * Since the rule needs to evaluate the value of the cell and potentially other cell's in the Worksheet, the value is first applied to the cell(s) and then is validated. By default if the event is not handled and the
  	 * showErrorMessageForInvalidValue is true, a message box will be displayed to the end user to determine what action to take. One can handle this event and specify the action that should
  	 * be taken using the action.Note: The validation rule will not be evaluated if edit mode is being cancelled such as when the user presses Escape to cancel edit.Note: The action will default to AcceptChange if the ShowErrorMessageForInvalidValue of the validationRule is false; otherwise it will default to ShowPrompt.Note: Like Microsoft Excel, only the validation rule of the active cell is considered even if the update is affecting other cells in the selection.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeValidationError
  ): EditModeValidationErrorEvent = js.native
  /**
  	 * Invoked when the Spreadsheet is exiting edit mode and the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
  	 * The EditModeValidationError is raised while exiting edit mode if the new value for the activeCell is not valid based on the criteria of that cell's ig.excel.DataValidationRule.
  	 * Since the rule needs to evaluate the value of the cell and potentially other cell's in the Worksheet, the value is first applied to the cell(s) and then is validated. By default if the event is not handled and the
  	 * showErrorMessageForInvalidValue is true, a message box will be displayed to the end user to determine what action to take. One can handle this event and specify the action that should
  	 * be taken using the action.Note: The validation rule will not be evaluated if edit mode is being cancelled such as when the user presses Escape to cancel edit.Note: The action will default to AcceptChange if the ShowErrorMessageForInvalidValue of the validationRule is false; otherwise it will default to ShowPrompt.Note: Like Microsoft Excel, only the validation rule of the active cell is considered even if the update is affecting other cells in the selection.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editModeValidationError,
    optionValue: EditModeValidationErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Invoked when the Spreadsheet is performing an operation on a protected Worksheet and there is a single range that may be unlocked to allow the operation to be performed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRangePasswordNeeded
  ): EditRangePasswordNeededEvent = js.native
  /**
  	 * Invoked when the Spreadsheet is performing an operation on a protected Worksheet and there is a single range that may be unlocked to allow the operation to be performed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRangePasswordNeeded,
    optionValue: EditRangePasswordNeededEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  an enumeration indicating the direction of the cell adjacent to the activeCell that should be activated when the enter key is pressed.This property is only used if the isEnterKeyNavigationEnabled is set to true. Also, the reverse direction is
  	 * navigated when Shift + Enter are pressed.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enterKeyNavigationDirection
  ): java.lang.String = js.native
  /**
  	 * Returns or sets an enumeration indicating the direction of the cell adjacent to the activeCell that should be activated when the enter key is pressed.This property is only used if the isEnterKeyNavigationEnabled is set to true. Also, the reverse direction is
  	 * navigated when Shift + Enter are pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enterKeyNavigationDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Returns  the number of decimal places by which a whole number typed in during edit mode should be adjusted when isFixedDecimalEnabled is true
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedDecimalPlaceCount
  ): scala.Double = js.native
  /**
  	 * Returns or sets the number of decimal places by which a whole number typed in during edit mode should be adjusted when isFixedDecimalEnabled is true
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedDecimalPlaceCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The height of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Invoked when a hyperlink is being followed in the Spreadsheet.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hyperlinkExecuting
  ): HyperlinkExecutingEvent = js.native
  /**
  	 * Invoked when a hyperlink is being followed in the Spreadsheet.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hyperlinkExecuting,
    optionValue: HyperlinkExecutingEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the adjacent cell indicated by the enterKeyNavigationDirection should be navigated to when the enter key is pressed.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isEnterKeyNavigationEnabled
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the adjacent cell indicated by the enterKeyNavigationDirection should be navigated to when the enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isEnterKeyNavigationEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether a fixed decimal place is automatically added when a whole number is entered while in edit mode.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isFixedDecimalEnabled
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether a fixed decimal place is automatically added when a whole number is entered while in edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isFixedDecimalEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating if the formula bar is displayed within the Spreadsheet.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isFormulaBarVisible
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating if the formula bar is displayed within the Spreadsheet.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isFormulaBarVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the control is in "End mode".
  	 * End mode is a mode that affects certain keyboard navigation such as navigating with the arrow keys. For example when in
  	 * end mode and one presses the right arrow, the activeCell will be changed to be the first cell to the right of the current ActiveCell
  	 * that has a value (even if the value is ""). If there were no cells to the right with a value then it would activate the right most cell in that row. End
  	 * mode will end automatically such as when one presses an arrow key.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isInEndMode
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the control is in "End mode".
  	 * End mode is a mode that affects certain keyboard navigation such as navigating with the arrow keys. For example when in
  	 * end mode and one presses the right arrow, the activeCell will be changed to be the first cell to the right of the current ActiveCell
  	 * that has a value (even if the value is ""). If there were no cells to the right with a value then it would activate the right most cell in that row. End
  	 * mode will end automatically such as when one presses an arrow key.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isInEndMode,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether the scroll lock key is toggled.
  	 * This property is used when certain keys are pressed while the control has focus. For example
  	 * if an arrow key is pressed while the scroll lock is enabled the cell area will be scrolled rather than changing
  	 * the active cell. Note: This property is not maintained/changed by the control. It is just queried when
  	 * performing actions that consider whether the scroll lock is enabled.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScrollLocked
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether the scroll lock key is toggled.
  	 * This property is used when certain keys are pressed while the control has focus. For example
  	 * if an arrow key is pressed while the scroll lock is enabled the cell area will be scrolled rather than changing
  	 * the active cell. Note: This property is not maintained/changed by the control. It is just queried when
  	 * performing actions that consider whether the scroll lock is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isScrollLocked,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Returns  a boolean indicating whether undo is enabled for the control.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isUndoEnabled
  ): scala.Boolean = js.native
  /**
  	 * Returns or sets a boolean indicating whether undo is enabled for the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isUndoEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  the width of the name box within the formula bar.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nameBoxWidth
  ): scala.Double = js.native
  /**
  	 * Returns or sets the width of the name box within the formula bar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nameBoxWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Type="ig.excel.Worksheet[]" Returns  an array of the Worksheets whose tabs are selected.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedWorksheets
  ): js.Any = js.native
  /**
  	 * Type="ig.excel.Worksheet[]" Returns or sets an array of the Worksheets whose tabs are selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectedWorksheets,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Invoked when the selection for a ig.spreadsheet.SpreadsheetPane of the Spreadsheet is changed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged
  ): IgSpreadsheetSelectionChangedEvent = js.native
  /**
  	 * Invoked when the selection for a ig.spreadsheet.SpreadsheetPane of the Spreadsheet is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged,
    optionValue: IgSpreadsheetSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  a value indicating how the selection is updated when interacting with the cells via the mouse or keyboard.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionMode
  ): java.lang.String = js.native
  /**
  	 * Returns or sets a value indicating how the selection is updated when interacting with the cells via the mouse or keyboard.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Invoked when the user will be prompted with a message regarding an operation that is being performed.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.userPromptDisplaying
  ): UserPromptDisplayingEvent = js.native
  /**
  	 * Invoked when the user will be prompted with a message regarding an operation that is being performed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.userPromptDisplaying,
    optionValue: UserPromptDisplayingEvent
  ): scala.Unit = js.native
  /**
  	 * Returns  the position of the screen tip used to display the input message for the data validation rule associated with the active cell.
  	 *
  	 * The provided object should have numeric properties called x and y.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validationInputMessagePosition
  ): js.Any = js.native
  /**
  	 * Returns or sets the position of the screen tip used to display the input message for the data validation rule associated with the active cell.
  	 *
  	 * The provided object should have numeric properties called x and y.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validationInputMessagePosition,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * The width of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the spreadsheet. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Returns  the workbook whose information is displayed in the control.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workbook
  ): js.Any = js.native
  /**
  	 * Invoked when a change has been made to the workbook that might require a save.
  	 * Note: This event is invoked asynchronously with regards to the change(s) that
  	 * have occurred. Also some changes alone are not considered to dirty the Workbook even though it
  	 * does change state on the Workbook or one of its subobjects. An example of that would be a zoom
  	 * type operation (e.g. changing the magnificationInNormalView).
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workbookDirtied
  ): WorkbookDirtiedEvent = js.native
  /**
  	 * Invoked when a change has been made to the workbook that might require a save.
  	 * Note: This event is invoked asynchronously with regards to the change(s) that
  	 * have occurred. Also some changes alone are not considered to dirty the Workbook even though it
  	 * does change state on the Workbook or one of its subobjects. An example of that would be a zoom
  	 * type operation (e.g. changing the magnificationInNormalView).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workbookDirtied,
    optionValue: WorkbookDirtiedEvent
  ): scala.Unit = js.native
  /**
  	 * Returns or sets the workbook whose information is displayed in the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.workbook,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Returns  the magnification of the selected worksheets.
  	 *
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomLevel
  ): scala.Double = js.native
  /**
  	 * Returns or sets the magnification of the selected worksheets.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igSpreadsheet(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igSpreadsheet(options: IgSpreadsheet): JQuery = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_executeAction(methodName: igniteDashUiLib.igniteDashUiLibStrings.executeAction, action: js.Object): scala.Boolean = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_exportVisualData(methodName: igniteDashUiLib.igniteDashUiLibStrings.exportVisualData): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getActivePane(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActivePane): js.Object = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getActiveSelection(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActiveSelection): js.Object = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getActiveSelectionCellRangeFormat(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActiveSelectionCellRangeFormat): js.Object = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getActiveTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.getActiveTable): js.Object = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getCellEditMode(methodName: igniteDashUiLib.igniteDashUiLibStrings.getCellEditMode): js.Object = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getIsInEditMode(methodName: igniteDashUiLib.igniteDashUiLibStrings.getIsInEditMode): scala.Boolean = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getIsRenamingWorksheet(methodName: igniteDashUiLib.igniteDashUiLibStrings.getIsRenamingWorksheet): scala.Boolean = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_getPanes(methodName: igniteDashUiLib.igniteDashUiLibStrings.getPanes): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgSpreadsheet): JQuery = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_showFilterDialogForTable(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showFilterDialogForTable,
    worksheetTableColumn: js.Object,
    spreadsheetFilterDialogOption: js.Object
  ): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_showFilterDialogForWorksheet(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showFilterDialogForWorksheet,
    relativeColumnIndex: scala.Double,
    spreadsheetFilterDialogOption: js.Object
  ): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_showTopOrBottomDialogForTable(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showTopOrBottomDialogForTable,
    worksheetTableColumn: js.Object
  ): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_showTopOrBottomDialogForWorksheet(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showTopOrBottomDialogForWorksheet,
    relativeColumnIndex: scala.Double
  ): scala.Unit = js.native
  @JSName("igSpreadsheet")
  def igSpreadsheet_styleUpdated(methodName: igniteDashUiLib.igniteDashUiLibStrings.styleUpdated): scala.Unit = js.native
  def igTablePropertiesDialog(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply
  ): ApplyEvent = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.apply,
    optionValue: ApplyEvent
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel
  ): CancelEvent = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel,
    optionValue: CancelEvent
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide
  ): HideEvent = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hide,
    optionValue: HideEvent
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden
  ): scala.Boolean = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isHidden,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item
  ): js.Any = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.item,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show
  ): ShowEvent = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.show,
    optionValue: ShowEvent
  ): scala.Unit = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target
  ): js.Any = js.native
  def igTablePropertiesDialog(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igTablePropertiesDialog(options: IgTablePropertiesDialog): JQuery = js.native
  @JSName("igTablePropertiesDialog")
  def igTablePropertiesDialog_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igTablePropertiesDialog")
  def igTablePropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTablePropertiesDialog")
  def igTablePropertiesDialog_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTablePropertiesDialog")
  def igTablePropertiesDialog_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTablePropertiesDialog): JQuery = js.native
  @JSName("igTablePropertiesDialog")
  def igTablePropertiesDialog_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show, item: js.Object): scala.Unit = js.native
  def igTextEditor(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur
  ): BlurEvent = js.native
  /**
  	 * Fired when the input field of the editor loses focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.blur,
    optionValue: BlurEvent
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
  	 * If the option is set to false the editor will attach the drop-down list element to the editor container
  	 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is closed.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  /**
  	 * Fired after the drop down is closed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is closing.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  /**
  	 * Fired when the drop down is closing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is opened.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  /**
  	 * Fired after the drop down is opened.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is opening.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  /**
  	 * Fired when the drop down is opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
  	 * Note! In case there are no list items - the editor will reamin readonly
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
  	 * Notes:
  	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
  	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): java.lang.String = js.native
  /**
  	 * /Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
  	 * Notes:
  	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
  	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus
  ): IgFocusEvent = js.native
  /**
  	 * Fired when the input field of the editor gets focus.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.focus,
    optionValue: IgFocusEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
  	 * Notes:
  	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
  	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): java.lang.String = js.native
  /**
  	 * /Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
  	 * Notes:
  	 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
  	 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown
  ): KeydownEvent = js.native
  /**
  	 * Fired on keydown event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keydown,
    optionValue: KeydownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress
  ): KeypressEvent = js.native
  /**
  	 * Fired on keypress event.
  	 * Return false in order to cancel key action.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keypress,
    optionValue: KeypressEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on keyup event.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup
  ): KeyupEvent = js.native
  /**
  	 * Fired on keyup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.keyup,
    optionValue: KeyupEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type string.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Array[_] = js.native
  /**
  	 * /Sets list of items which are used as a source for the drop-down list.
  	 * Items in the list can be of type string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the maximum length of a text which can be entered by the user.
  	 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): scala.Double = js.native
  /**
  	 * /Sets the maximum length of a text which can be entered by the user.
  	 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired on mousedown event.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown
  ): MousedownEvent = js.native
  /**
  	 * Fired on mousedown event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousedown,
    optionValue: MousedownEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove
  ): MousemoveEvent = js.native
  /**
  	 * Fired on mousemove at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mousemove,
    optionValue: MousemoveEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout
  ): MouseoutEvent = js.native
  /**
  	 * Fired on mouseleave at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseout,
    optionValue: MouseoutEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover
  ): MouseoverEvent = js.native
  /**
  	 * Fired on mouseover at any part of editor including the drop-down list.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseover,
    optionValue: MouseoverEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on mouseup event.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup
  ): MouseupEvent = js.native
  /**
  	 * Fired on mouseup event.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseup,
    optionValue: MouseupEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the editor has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability of the editor to automatically move the dropdown list selection item from one end to the opposite side. When the last item is reached and spin down is performed, the first item gets selected and vice versa. This option has no effect there is no drop-down list.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability of the editor to automatically move the dropdown list selection item from one end to the opposite side. When the last item is reached and spin down is performed, the first item gets selected and vice versa. This option has no effect there is no drop-down list.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged
  ): TextChangedEvent = js.native
  /**
  	 * Fired after the editor's text has been changed. It can be raised when keyUp event occurs,
  	 * when the clear button is clicked or when an item from a list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textChanged,
    optionValue: TextChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): java.lang.String = js.native
  /**
  	 * The text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): scala.Boolean = js.native
  /**
  	 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
  	 * Note! When the option is set at runtime the editor is not changing the current value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): js.Any = js.native
  /**
  	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged
  ): ValueChangedEvent = js.native
  /**
  	 * Fired after the editor value is changed. It can be raised after loosing focus or on spin events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanged,
    optionValue: ValueChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 * It can be raised after loosing focus or on spin events.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging
  ): ValueChangingEvent = js.native
  /**
  	 * Fired before changing the editor's value.
  	 * Return false in order to cancel change.
  	 * It can be raised after loosing focus or on spin events.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueChanging,
    optionValue: ValueChangingEvent
  ): scala.Unit = js.native
  /**
  	 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * The number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTextEditor(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTextEditor(options: IgTextEditor): JQuery = js.native
  @JSName("igTextEditor")
  def igTextEditor_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_clearButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearButton): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_displayValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.displayValue): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Boolean = js.native
  @JSName("igTextEditor")
  def igTextEditor_editorContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorContainer): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_field(methodName: igniteDashUiLib.igniteDashUiLibStrings.field): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex, text: java.lang.String): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_findListItemIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex,
    text: java.lang.String,
    matchType: js.Object
  ): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_getSelectedText(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedText): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_getSelectionEnd(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionEnd): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_getSelectionStart(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectionStart): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_hasFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFocus): scala.Boolean = js.native
  @JSName("igTextEditor")
  def igTextEditor_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_hideDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDropDown): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_inputName(methodName: igniteDashUiLib.igniteDashUiLibStrings.inputName, newValue: java.lang.String): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_insert(methodName: igniteDashUiLib.igniteDashUiLibStrings.insert, string: java.lang.String): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igTextEditor")
  def igTextEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTextEditor")
  def igTextEditor_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTextEditor")
  def igTextEditor_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTextEditor): JQuery = js.native
  @JSName("igTextEditor")
  def igTextEditor_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, start: scala.Double, end: scala.Double): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex, index: scala.Double): scala.Double = js.native
  @JSName("igTextEditor")
  def igTextEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_setFocus(methodName: igniteDashUiLib.igniteDashUiLibStrings.setFocus, delay: scala.Double): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_show(methodName: igniteDashUiLib.igniteDashUiLibStrings.show): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_showDropDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDropDown): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igTextEditor")
  def igTextEditor_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): java.lang.String = js.native
  @JSName("igTextEditor")
  def igTextEditor_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igTextEditor")
  def igTextEditor_validator(methodName: igniteDashUiLib.igniteDashUiLibStrings.validator): js.Object = js.native
  @JSName("igTextEditor")
  def igTextEditor_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): scala.Unit = js.native
  def igTileManager(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets the duration of the animations in the tile manager.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the duration of the animations in the tile manager.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the columns count in the container.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cols
  ): scala.Double = js.native
  /**
  	 * /Sets the columns count in the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cols,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of each column in the container.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHeight
  ): java.lang.String | scala.Double | js.Array[_] = js.native
  /**
  	 * /Sets the height of each column in the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHeight,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of each column in the container.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnWidth
  ): java.lang.String | scala.Double | js.Array[_] = js.native
  /**
  	 * /Sets the width of each column in the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnWidth,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired before databinding is performed
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing databinding.
  	 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Fired before databinding is performed
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing databinding.
  	 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after databinding is complete
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing databinding.
  	 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
  	 *             Use ui.success to get see if the databinding was performed correctly.
  	 *             Use ui.errorMessage to get the error message if the databinding failed.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Fired after databinding is complete
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing databinding.
  	 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
  	 *             Use ui.success to get see if the databinding was performed correctly.
  	 *             Use ui.errorMessage to get the error message if the databinding failed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the container.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Object = js.native
  /**
  	 * /Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal spacing between tiles.
  	 *
  	 *                 number  The horizontal spacing between tiles can be set as a number.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.marginLeft
  ): scala.Double = js.native
  /**
  	 * /Sets the horizontal spacing between tiles.
  	 *
  	 *                 number  The horizontal spacing between tiles can be set as a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.marginLeft,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the vertical spacing between tiles.
  	 *
  	 *                 number  The vertical spacing between tiles can be set as a number.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.marginTop
  ): scala.Double = js.native
  /**
  	 * /Sets the vertical spacing between tiles.
  	 *
  	 *                 number  The vertical spacing between tiles can be set as a number.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.marginTop,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the content of the tiles in maximized state.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizedState
  ): java.lang.String = js.native
  /**
  	 * /Sets the content of the tiles in maximized state.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizedState,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizedTileIndex
  ): scala.Double = js.native
  /**
  	 * /Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maximizedTileIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the content of the tiles in minimized state.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimizedState
  ): java.lang.String = js.native
  /**
  	 * /Sets the content of the tiles in minimized state.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimizedState,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventMaximizingSelector
  ): java.lang.String = js.native
  /**
  	 * /Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventMaximizingSelector,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the items will rearrange when the container is resized.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rearrangeItems
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the items will rearrange when the container is resized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rearrangeItems,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the tile manager completes.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the tile manager completes.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the tile manager begins.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
  	 *             Use ui.items to get a reference to the item configurations the tile manager has.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the tile manager begins.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
  	 *             Use ui.items to get a reference to the item configurations the tile manager has.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the HTTP request method.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * Sets the HTTP request method.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * /Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how many columns to be displayed in the right panel when the tiles are minimized.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelCols
  ): scala.Double = js.native
  /**
  	 * /Sets how many columns to be displayed in the right panel when the tiles are minimized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelCols,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the minimized tiles in the right panel.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelTilesHeight
  ): scala.Double = js.native
  /**
  	 * /Sets the height of the minimized tiles in the right panel.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelTilesHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the minimized tiles in the right panel.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelTilesWidth
  ): scala.Double = js.native
  /**
  	 * /Sets the width of the minimized tiles in the right panel.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rightPanelTilesWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the rows count in the container.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rows
  ): scala.Double = js.native
  /**
  	 * /Sets the rows count in the container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rows,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the right panel should show scrollbar when tiles are overflowing.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showRightPanelScroll
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the right panel should show scrollbar when tiles are overflowing.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showRightPanelScroll,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Configure the container variable representation, which defines splitter functionality.
  	 *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.splitterOptions
  ): IgTileManagerSplitterOptions = js.native
  /**
  	 * Configure the container variable representation, which defines splitter functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.splitterOptions,
    optionValue: IgTileManagerSplitterOptions
  ): scala.Unit = js.native
  /**
  	 * Fired after a tile in the tile manager is maximized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the maximized tile
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMaximized
  ): TileMaximizedEvent = js.native
  /**
  	 * Fired after a tile in the tile manager is maximized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the maximized tile
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMaximized,
    optionValue: TileMaximizedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a tile in the tile manager is maximized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the tile being maximized
  	 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMaximizing
  ): TileMaximizingEvent = js.native
  /**
  	 * Fired before a tile in the tile manager is maximized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the tile being maximized
  	 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMaximizing,
    optionValue: TileMaximizingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a tile in the tile manager is minimized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the minimized tile
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMinimized
  ): TileMinimizedEvent = js.native
  /**
  	 * Fired after a tile in the tile manager is minimized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the minimized tile
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMinimized,
    optionValue: TileMinimizedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a tile in the tile manager is minimized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the tile being minimized
  	 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMinimizing
  ): TileMinimizingEvent = js.native
  /**
  	 * Fired before a tile in the tile manager is minimized.
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
  	 *             Use ui.tile to get the jQuery element of the tile being minimized
  	 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileMinimizing,
    optionValue: TileMinimizingEvent
  ): scala.Unit = js.native
  /**
  	 * Event Fired after a tile has been rendered in the container
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tile to get a reference to the rendered tile
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileRendered
  ): TileRenderedEvent = js.native
  /**
  	 * Event Fired after a tile has been rendered in the container
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tile to get a reference to the rendered tile
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileRendered,
    optionValue: TileRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a tile is rendered in the container
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tile to get a reference to the tile being rendered
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileRendering
  ): TileRenderingEvent = js.native
  /**
  	 * Event fired before a tile is rendered in the container
  	 *
  	 *             Function takes arguments evt and ui.
  	 *             Use ui.owner to get a reference to the tile manager performing rendering.
  	 *             Use ui.tile to get a reference to the tile being rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tileRendering,
    optionValue: TileRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * *
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTileManager(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTileManager(options: IgTileManager): JQuery = js.native
  @JSName("igTileManager")
  def igTileManager_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igTileManager")
  def igTileManager_layoutManager(methodName: igniteDashUiLib.igniteDashUiLibStrings.layoutManager): js.Object = js.native
  @JSName("igTileManager")
  def igTileManager_maximize(methodName: igniteDashUiLib.igniteDashUiLibStrings.maximize, $tileToMaximize: js.Object): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_maximize(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.maximize,
    $tileToMaximize: js.Object,
    animDuration: scala.Double
  ): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_maximize(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.maximize,
    $tileToMaximize: js.Object,
    animDuration: scala.Double,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_maximizedTile(methodName: igniteDashUiLib.igniteDashUiLibStrings.maximizedTile): js.Object = js.native
  @JSName("igTileManager")
  def igTileManager_minimize(methodName: igniteDashUiLib.igniteDashUiLibStrings.minimize): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_minimize(methodName: igniteDashUiLib.igniteDashUiLibStrings.minimize, animDuration: scala.Double): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_minimize(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.minimize,
    animDuration: scala.Double,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_minimizedTiles(methodName: igniteDashUiLib.igniteDashUiLibStrings.minimizedTiles): js.Object = js.native
  @JSName("igTileManager")
  def igTileManager_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTileManager")
  def igTileManager_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTileManager")
  def igTileManager_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTileManager): JQuery = js.native
  @JSName("igTileManager")
  def igTileManager_reflow(methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_reflow(methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow, forceReflow: js.Object): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_reflow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow,
    forceReflow: js.Object,
    animationDuration: scala.Double
  ): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_reflow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.reflow,
    forceReflow: js.Object,
    animationDuration: scala.Double,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTileManager")
  def igTileManager_splitter(methodName: igniteDashUiLib.igniteDashUiLibStrings.splitter): js.Object = js.native
  @JSName("igTileManager")
  def igTileManager_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): js.Object = js.native
  def igTimePicker(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the editor value can become null.
  	 * If that option is false, and editor has no value, then value is set to an empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowNullValue,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown, clear' or 'spin, clear' are supported too.Note! This option can not be set runtime.
  	 * Note! A combination like 'dropdown, spin' is not allowed.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType
  ): java.lang.String = js.native
  /**
  	 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown, clear' or 'spin, clear' are supported too.Note! This option can not be set runtime.
  	 * Note! A combination like 'dropdown, spin' is not allowed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buttonType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold
  ): scala.Double = js.native
  /**
  	 * /Sets year for auto detection of 20th and 21st centuries.
  	 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
  	 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centuryThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode
  ): java.lang.String = js.native
  /**
  	 * The value type returned by the get of value() method and option. Also affects how the value is stored for form submit.
  	 * The [enableUTCDates](ui.%%WidgetNameLowered%%#options:enableUTCDates) option can be used to output an UTC ISO string instead.
  	 * For example 10:00 AM from a client with local offset of 5 hours ahead of GMT will be serialized as:
  	 * "2016-11-11T10:00:00+05:00"
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Removed from timepicker options
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat
  ): js.Any = js.native
  /**
  	 * Removed from timepicker options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateDisplayFormat,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Removed from timepicker options
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat
  ): js.Any = js.native
  /**
  	 * Removed from timepicker options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dateInputFormat,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled
  ): scala.Boolean = js.native
  /**
  	 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.disabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Removed from timepicker options
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset
  ): js.Any = js.native
  /**
  	 * Removed from timepicker options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayTimeOffset,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets show/hide drop-down list animation duration in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets wheather the drop-down list element is attached to the body of the document, or to the timepicker container element.
  	 * If the option is set to false the timepicker will attach the drop-down list element to the timepicker container
  	 * If the option is set to true the timepicker will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody
  ): scala.Boolean = js.native
  /**
  	 * Wheather the drop-down list element is attached to the body of the document, or to the timepicker container element.
  	 * If the option is set to false the timepicker will attach the drop-down list element to the timepicker container
  	 * If the option is set to true the timepicker will attach its drop-down list to as a child of the body.
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAttachedToBody,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected
  ): DropDownItemSelectedEvent = js.native
  /**
  	 * Fired after an item in the drop down list is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelected,
    optionValue: DropDownItemSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting
  ): DropDownItemSelectingEvent = js.native
  /**
  	 * Fired when an item in the drop down list is being selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownItemSelecting,
    optionValue: DropDownItemSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is closed.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed
  ): DropDownListClosedEvent = js.native
  /**
  	 * Fired after the drop down is closed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosed,
    optionValue: DropDownListClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is closing.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing
  ): DropDownListClosingEvent = js.native
  /**
  	 * Fired when the drop down is closing.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListClosing,
    optionValue: DropDownListClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the drop down is opened.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened
  ): DropDownListOpenedEvent = js.native
  /**
  	 * Fired after the drop down is opened.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpened,
    optionValue: DropDownListOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when the drop down is opening.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening
  ): DropDownListOpeningEvent = js.native
  /**
  	 * Fired when the drop down is opening.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownListOpening,
    optionValue: DropDownListOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOnReadOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation
  ): java.lang.String = js.native
  /**
  	 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the timepicker has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOrientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.emptyChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 * The option is only applied in "date" [dataMode](ui.%%WidgetNameLowered%%#options:dataMode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to prevent entering specific characters from keyboard or on paste.
  	 * Notes:
  	 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excludeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys
  ): java.lang.String = js.native
  /**
  	 * Ability to enter only specific characters in input-field from keyboard and on paste.
  	 * Notes:
  	 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
  	 * Note! This option can not be se runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.includeKeys,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputMask,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName
  ): java.lang.String = js.native
  /**
  	 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inputName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should only allow values from the list of items. Matching is case-insensitive.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isLimitedToListValues,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets delta-value which is used to generate the drop-down items for the time picker.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 *
  	 * object  A configuration object, which defines specific values for each time period. The option can accept the following format:
  	 * itemsDelta: {
  	 * hours: 0,
  	 * minutes: 30,
  	 * }
  	 * Time periods that don't have values use 0 as default for hours and 30 for minutes.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsDelta
  ): IgTimePickerItemsDelta = js.native
  /**
  	 * Delta-value which is used to generate the drop-down items for the time picker.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 *
  	 * object  A configuration object, which defines specific values for each time period. The option can accept the following format:
  	 * itemsDelta: {
  	 * hours: 0,
  	 * minutes: 30,
  	 * }
  	 * Time periods that don't have values use 0 as default for hours and 30 for minutes.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemsDelta,
    optionValue: IgTimePickerItemsDelta
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField
  ): scala.Boolean = js.native
  /**
  	 * /Sets ability to modify only 1 date field on spin events.
  	 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
  	 * Value true modifies only value of one field.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.limitSpinToCurrentField,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the hover/unhover animation duration of a drop-down list item.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItemHoverDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listItems,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of timepicker is set as a drop-down width.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth
  ): scala.Double = js.native
  /**
  	 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of timepicker is set as a drop-down width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.listWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxLength,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue
  ): stdLib.Date = js.native
  /**
  	 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue
  ): stdLib.Date = js.native
  /**
  	 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue
  ): java.lang.String | scala.Double | stdLib.Date = js.native
  /**
  	 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullValue,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.padChar,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder
  ): java.lang.String = js.native
  /**
  	 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.placeHolder,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should prevent form submition when enter key is pressed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preventSubmitOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly
  ): scala.Boolean = js.native
  /**
  	 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.readOnly,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid
  ): scala.Boolean = js.native
  /**
  	 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.revertIfNotValid,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus
  ): java.lang.String = js.native
  /**
  	 * /Sets the action when the editor gets focused. The default value is selectAll.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionOnFocus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets delta-value which is used to increment or decrement the editor time on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * hours: 12,
  	 * minutes: 15
  	 * }
  	 * Default value is {hours: 1, minutes: 30}.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta
  ): js.Any = js.native
  /**
  	 * /Sets delta-value which is used to increment or decrement the editor time on spin actions.When not editing (focused) the delta is applied on the day if available in the input mask or the lowest available period.
  	 * When in edit mode the time period, where the cursor is positioned, is incremented or decremented with the defined delta value.
  	 * Accepted values for deltas are positive integer numbers, and the fractional portion of floating point numbers is ignored.
  	 * spinDelta: {
  	 * hours: 12,
  	 * minutes: 15
  	 * }
  	 * Default value is {hours: 1, minutes: 30}.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinDelta,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround
  ): scala.Boolean = js.native
  /**
  	 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
  	 * This applies to [minValue](ui.%%WidgetNameLowered%%#options:minValue) and [maxValue](ui.%%WidgetNameLowered%%#options:maxValue) or cycling through list items if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.spinWrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the onscreen keyboard (if available on device) should be shown when the dropdown button is clicked/tapped. This option prevents initial focus or removes it when the drop button is clicked/tapped.
  	 * Note: The option does not perform device detection so its behavior is always active if enabled.
  	 * Note: When drop down is opened the only way to close it will be using the drop down button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressKeyboard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications
  ): scala.Boolean = js.native
  /**
  	 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.suppressNotifications,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets tabIndex attribute for the editor input.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * /Sets tabIndex attribute for the editor input.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the horizontal alignment of the text in the editor.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign
  ): java.lang.String = js.native
  /**
  	 * /Sets the horizontal alignment of the text in the editor.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textAlign,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode
  ): js.Any = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.textMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets format of time while timepicker has no focus.
  	 * Value of that option can be set to a specific time pattern or to a flag defined by regional settings.
  	 * If value is not set, then the timeInputFormat is used automatically.
  	 * If value is set to explicit time pattern and pattern besides time-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "time": the timePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of time-flags when explicit time pattern is used:
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.timeDisplayFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets format of time while timepicker has no focus.
  	 * Value of that option can be set to a specific time pattern or to a flag defined by regional settings.
  	 * If value is not set, then the timeInputFormat is used automatically.
  	 * If value is set to explicit time pattern and pattern besides time-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * List of predefined regional flags:
  	 * "time": the timePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them:
  	 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of time-flags when explicit time pattern is used:
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "h": hours field in 12-hours format without leading zero
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "H": hours field in 24-hours format without leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "m": minutes field without leading zero
  	 * "mm": minutes field with leading zero
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.timeDisplayFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets format of time while timepicker has focus.
  	 * Value of that option can be set to explicit time pattern or to a flag defined by regional settings.
  	 * If value is set to explicit time pattern and pattern besides date-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "time" is used automatically.
  	 * List of predefined regional flags:
  	 * "time": the timePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of time-flags when explicit time pattern is used:
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * Note! This option can not be set runtime.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.timeInputFormat
  ): java.lang.String = js.native
  /**
  	 * Format of time while timepicker has focus.
  	 * Value of that option can be set to explicit time pattern or to a flag defined by regional settings.
  	 * If value is set to explicit time pattern and pattern besides date-flags has explicit characters which match with time-flags or mask-flags, then the "escape" character should be used in front of them.
  	 * If option is not set, then the "time" is used automatically.
  	 * List of predefined regional flags:
  	 * "time": the timePattern member of regional option is used
  	 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
  	 * List of time-flags when explicit time pattern is used:
  	 * "t": first character of string which represents AM/PM field
  	 * "tt": 2 characters of string which represents AM/PM field
  	 * "hh": hours field in 12-hours format with leading zero
  	 * "HH": hours field in 24-hours format with leading zero
  	 * "mm": minutes field with leading zero
  	 * Note! This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.timeInputFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLower,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toUpper,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt
  ): java.lang.String = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for igDateEditor
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unfilledCharsPrompt,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions
  ): js.Any = js.native
  /**
  	 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
  	 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
  	 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validatorOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value
  ): stdLib.Date = js.native
  /**
  	 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
  	 * Note! This option doesn't use the dateInputFormat to extract the date.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.value,
    optionValue: stdLib.Date
  ): scala.Unit = js.native
  /**
  	 * Gets the number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount
  ): scala.Double = js.native
  /**
  	 * The number of the items to be shown at once when the drop-down list get opened.
  	 * Notes:
  	 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
  	 * This option can not be set runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibleItemsCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control.
  	 *
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Removed from timepicker options
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift
  ): js.Any = js.native
  /**
  	 * Removed from timepicker options
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTimePicker(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.yearShift,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igTimePicker(options: IgTimePicker): JQuery = js.native
  @JSName("igTimePicker")
  def igTimePicker_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_dropDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownButton): java.lang.String = js.native
  @JSName("igTimePicker")
  def igTimePicker_dropDownContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownContainer): java.lang.String = js.native
  @JSName("igTimePicker")
  def igTimePicker_dropDownVisible(methodName: igniteDashUiLib.igniteDashUiLibStrings.dropDownVisible): scala.Boolean = js.native
  @JSName("igTimePicker")
  def igTimePicker_findListItemIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex, text: java.lang.String): scala.Double = js.native
  @JSName("igTimePicker")
  def igTimePicker_findListItemIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.findListItemIndex,
    text: java.lang.String,
    matchType: js.Object
  ): scala.Double = js.native
  @JSName("igTimePicker")
  def igTimePicker_getSelectedDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedDate): stdLib.Date = js.native
  @JSName("igTimePicker")
  def igTimePicker_getSelectedListItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getSelectedListItem): java.lang.String = js.native
  @JSName("igTimePicker")
  def igTimePicker_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igTimePicker")
  def igTimePicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTimePicker")
  def igTimePicker_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTimePicker")
  def igTimePicker_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTimePicker): JQuery = js.native
  @JSName("igTimePicker")
  def igTimePicker_selectDate(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectDate): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex): scala.Double = js.native
  @JSName("igTimePicker")
  def igTimePicker_selectedListIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedListIndex, index: scala.Double): scala.Double = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinDown(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDown, delta: scala.Double): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinDownButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinDownButton): java.lang.String = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinUp(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUp, delta: scala.Double): scala.Unit = js.native
  @JSName("igTimePicker")
  def igTimePicker_spinUpButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.spinUpButton): java.lang.String = js.native
  @JSName("igTimePicker")
  def igTimePicker_value(methodName: igniteDashUiLib.igniteDashUiLibStrings.value, newValue: js.Object): scala.Unit = js.native
  def igToolbar(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Get/Set whether the toolbar can be collapsed.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCollapsing
  ): scala.Boolean = js.native
  /**
  	 * Get/Set whether the toolbar can be collapsed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowCollapsing,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The css class that will be applied to collapseButtonIcon.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseButtonIcon
  ): java.lang.String = js.native
  /**
  	 * The css class that will be applied to collapseButtonIcon.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseButtonIcon,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after item is collapsed
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed
  ): CollapsedEvent = js.native
  /**
  	 * Event fired after item is collapsed
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsed,
    optionValue: CollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event is fired before item is collapsed.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing
  ): CollapsingEvent = js.native
  /**
  	 * Event is fired before item is collapsed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapsing,
    optionValue: CollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Display Name of the widget.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayName
  ): java.lang.String = js.native
  /**
  	 * Display Name of the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayName,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The css class that will be applied to the expand/collapse button icon.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandButtonIcon
  ): java.lang.String = js.native
  /**
  	 * The css class that will be applied to the expand/collapse button icon.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandButtonIcon,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after item is expanded
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded
  ): ExpandedEvent = js.native
  /**
  	 * Event fired after item is expanded
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanded,
    optionValue: ExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before item is expanded
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding
  ): ExpandingEvent = js.native
  /**
  	 * Event fired before item is expanded
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expanding,
    optionValue: ExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the widget height.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): js.Any = js.native
  /**
  	 * Set/Get the widget height.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Get/Set whether the widget is expanded initially.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isExpanded
  ): scala.Boolean = js.native
  /**
  	 * Get/Set whether the widget is expanded initially.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isExpanded,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after item is added
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemAdded
  ): ItemAddedEvent = js.native
  /**
  	 * Event fired after item is added
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemAdded,
    optionValue: ItemAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after item is dissabled
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemDisable
  ): ItemDisableEvent = js.native
  /**
  	 * Fired after item is dissabled
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemDisable,
    optionValue: ItemDisableEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after item is enabled
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemEnabled
  ): ItemEnabledEvent = js.native
  /**
  	 * Fired after item is enabled
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemEnabled,
    optionValue: ItemEnabledEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after item is removed
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRemoved
  ): ItemRemovedEvent = js.native
  /**
  	 * Event fired after item is removed
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.itemRemoved,
    optionValue: ItemRemovedEvent
  ): scala.Unit = js.native
  /**
  	 * Get/Set Toolbar's items.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items
  ): js.Array[_] = js.native
  /**
  	 * Get/Set Toolbar's items.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.items,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgToolbarLocale = js.native
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgToolbarLocale
  ): scala.Unit = js.native
  /**
  	 * Formal name of the widget.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.name
  ): java.lang.String = js.native
  /**
  	 * Formal name of the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.name,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event fired after a click on any toolbar button
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarButtonClick
  ): ToolbarButtonClickEvent = js.native
  /**
  	 * Event fired after a click on any toolbar button
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarButtonClick,
    optionValue: ToolbarButtonClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event is fired before the toolbar is opened.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarComboOpening
  ): ToolbarComboOpeningEvent = js.native
  /**
  	 * Event is fired before the toolbar is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarComboOpening,
    optionValue: ToolbarComboOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after toolbar combo is selected
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarComboSelected
  ): ToolbarComboSelectedEvent = js.native
  /**
  	 * Event fired after toolbar combo is selected
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarComboSelected,
    optionValue: ToolbarComboSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a click on custom item
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCustomItemClick
  ): ToolbarCustomItemClickEvent = js.native
  /**
  	 * Event fired after a click on custom item
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toolbarCustomItemClick,
    optionValue: ToolbarCustomItemClickEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the widget width.
  	 *
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): js.Any = js.native
  /**
  	 * Set/Get the widget width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after the window is resized
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResized
  ): WindowResizedEvent = js.native
  /**
  	 * Fired after the window is resized
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResized,
    optionValue: WindowResizedEvent
  ): scala.Unit = js.native
  def igToolbar(options: IgToolbar): JQuery = js.native
  def igToolbarButton(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired after the toolbar button is activated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activated
  ): ActivatedEvent = js.native
  /**
  	 * Event fired after the toolbar button is activated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activated,
    optionValue: ActivatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the toolbar button is activated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activating
  ): ActivatingEvent = js.native
  /**
  	 * Event fired before the toolbar button is activated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activating,
    optionValue: ActivatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the "Toggling" of a button.
  	 *
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowToggling
  ): scala.Boolean = js.native
  /**
  	 * Enable/Disable the "Toggling" of a button.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowToggling,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the toolbar button is deactivated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deactivated
  ): DeactivatedEvent = js.native
  /**
  	 * Event fired after the toolbar button is deactivated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deactivated,
    optionValue: DeactivatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the toolbar button is deactivated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deactivating
  ): DeactivatingEvent = js.native
  /**
  	 * Event fired before the toolbar button is deactivated.
  	 *                 Function takes arguments evt and ui.
  	 *                 Use ui.owner to get reference to this igToolbarButton.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deactivating,
    optionValue: DeactivatingEvent
  ): scala.Unit = js.native
  /**
  	 * Get/Set whether the toolbar button is selected.
  	 *
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSelected
  ): scala.Boolean = js.native
  /**
  	 * Get/Set whether the toolbar button is selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igToolbarButton(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.isSelected,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igToolbarButton(options: IgToolbarButton): JQuery = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_activate(methodName: igniteDashUiLib.igniteDashUiLibStrings.activate, event: js.Object): scala.Unit = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_deactivate(methodName: igniteDashUiLib.igniteDashUiLibStrings.deactivate, event: js.Object): scala.Unit = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgToolbarButton): JQuery = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle): scala.Unit = js.native
  @JSName("igToolbarButton")
  def igToolbarButton_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): js.Object = js.native
  @JSName("igToolbar")
  def igToolbar_activateItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.activateItem,
    index: js.Object,
    activated: js.Object
  ): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_addItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.addItem, item: js.Object): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_deactivateAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.deactivateAll): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_disableItem(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.disableItem,
    index: js.Object,
    disabled: js.Object
  ): scala.Unit = js.native
  @JSName("igToolbar")
  def igToolbar_getItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.getItem, index: js.Object): js.Object = js.native
  @JSName("igToolbar")
  def igToolbar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igToolbar")
  def igToolbar_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igToolbar")
  def igToolbar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgToolbar): JQuery = js.native
  @JSName("igToolbar")
  def igToolbar_removeItem(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeItem, index: js.Object): js.Object = js.native
  @JSName("igToolbar")
  def igToolbar_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igTooltip(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igTooltip(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.arrowLocation
  ): java.lang.String = js.native
  def igTooltip(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.arrowLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTooltip(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.text
  ): java.lang.String = js.native
  def igTooltip(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.text,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTooltip(options: IgTooltip): JQuery = js.native
  @JSName("igTooltip")
  def igTooltip_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTooltip")
  def igTooltip_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTooltip")
  def igTooltip_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTooltip")
  def igTooltip_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTooltip): JQuery = js.native
  def igTree(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets the duration of each animation such as the expand/collapse.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration
  ): scala.Double = js.native
  /**
  	 * /Sets the duration of each animation such as the expand/collapse.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.animationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the data binding properties and keys. The igTree uses these to extract the corresponding data from the dataSource.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bindings
  ): IgTreeBindings = js.native
  /**
  	 * The data binding properties and keys. The igTree uses these to extract the corresponding data from the dataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bindings,
    optionValue: IgTreeBindings
  ): scala.Unit = js.native
  /**
  	 * Gets the behavior and type of the checkboxes rendered for the tree nodes. Can be set only at initialization.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkboxMode
  ): java.lang.String = js.native
  /**
  	 * The behavior and type of the checkboxes rendered for the tree nodes. Can be set only at initialization.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkboxMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired before databinding is performed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Fired before databinding is performed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after databinding is finished.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Fired after databinding is finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the igTree data source. Accepts any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
  	 * Once the data source is initialized, this option becomes an instance of the $.ig.HierarchicalDataSource.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Any = js.native
  /**
  	 * Gets the type of the data source. Delegates the value to [$.ig.DataSource.settings.type](ig.datasource#options:settings.type). Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource.settings.type.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * The type of the data source. Delegates the value to [$.ig.DataSource.settings.type](ig.datasource#options:settings.type). Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource.settings.type.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * /Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets the igTree data source. Accepts any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
  	 * Once the data source is initialized, this option becomes an instance of the $.ig.HierarchicalDataSource.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets the default target attribute value for the node anchors.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultNodeTarget
  ): java.lang.String = js.native
  /**
  	 * The default target attribute value for the node anchors.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultNodeTarget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired on node drag.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag
  ): DragEvent = js.native
  /**
  	 * Gets/Sets whether drag and drop functionality is enabled.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDrop
  ): scala.Boolean = js.native
  /**
  	 * Gets/Sets specific settings for the drag and drop functionality.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings
  ): IgTreeDragAndDropSettings = js.native
  /**
  	 * /Sets specific settings for the drag and drop functionality.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDropSettings,
    optionValue: IgTreeDragAndDropSettings
  ): scala.Unit = js.native
  /**
  	 * /Sets whether drag and drop functionality is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragAndDrop,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Fired on node drag start.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart
  ): DragStartEvent = js.native
  /**
  	 * Fired on node drag start.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStart,
    optionValue: DragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a drag operation has completed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop
  ): DragStopEvent = js.native
  /**
  	 * Fired after a drag operation has completed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragStop,
    optionValue: DragStopEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on node drag.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag,
    optionValue: DragEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets how the height of of the control container.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets how the height of of the control container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether nodes are hoverable. Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hotTracking
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether nodes are hoverable. Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hotTracking,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the initial depth the igTree is going to be expanded to upon initial render.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth
  ): scala.Double = js.native
  /**
  	 * The initial depth the igTree is going to be expanded to upon initial render.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the CSS class applied to all leaf nodes.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageClass
  ): java.lang.String = js.native
  /**
  	 * /Sets the CSS class applied to all leaf nodes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageClass,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the tooltip applied to all leaf node images.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageTooltip
  ): java.lang.String = js.native
  /**
  	 * /Sets the tooltip applied to all leaf node images.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the image url applied to all leaf nodes.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageUrl
  ): java.lang.String = js.native
  /**
  	 * /Sets the image url applied to all leaf nodes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.leafNodeImageUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets whether all the data would be bound initially or each child collection would be bound upon expand.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadOnDemand
  ): scala.Boolean = js.native
  /**
  	 * Whether all the data would be bound initially or each child collection would be bound upon expand.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loadOnDemand,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Fired after the checkstate of a node is changed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCheckstateChanged
  ): NodeCheckstateChangedEvent = js.native
  /**
  	 * Fired after the checkstate of a node is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCheckstateChanged,
    optionValue: NodeCheckstateChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the checkbox state of a node is changed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCheckstateChanging
  ): NodeCheckstateChangingEvent = js.native
  /**
  	 * Fired before the checkbox state of a node is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCheckstateChanging,
    optionValue: NodeCheckstateChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on node click.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeClick
  ): NodeClickEvent = js.native
  /**
  	 * Fired on node click.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeClick,
    optionValue: NodeClickEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a node is collapsed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCollapsed
  ): NodeCollapsedEvent = js.native
  /**
  	 * Fired after a node is collapsed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCollapsed,
    optionValue: NodeCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a node is collapsed.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCollapsing
  ): NodeCollapsingEvent = js.native
  /**
  	 * Fired before a node is collapsed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeCollapsing,
    optionValue: NodeCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired on node double click.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDoubleClick
  ): NodeDoubleClickEvent = js.native
  /**
  	 * Fired on node double click.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDoubleClick,
    optionValue: NodeDoubleClickEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a node is dropped.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDropped
  ): NodeDroppedEvent = js.native
  /**
  	 * Fired after a node is dropped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDropped,
    optionValue: NodeDroppedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a node is dropped.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDropping
  ): NodeDroppingEvent = js.native
  /**
  	 * Fired before a node is dropped.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeDropping,
    optionValue: NodeDroppingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after a node is expanded.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeExpanded
  ): NodeExpandedEvent = js.native
  /**
  	 * Fired after a node is expanded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeExpanded,
    optionValue: NodeExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a node is expanded.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeExpanding
  ): NodeExpandingEvent = js.native
  /**
  	 * Fired before a node is expanded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodeExpanding,
    optionValue: NodeExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired after the children of a node are populated in the case of load on demand.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodePopulated
  ): NodePopulatedEvent = js.native
  /**
  	 * Fired after the children of a node are populated in the case of load on demand.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodePopulated,
    optionValue: NodePopulatedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before the children of a node are populated in the case of load on demand.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodePopulating
  ): NodePopulatingEvent = js.native
  /**
  	 * Fired before the children of a node are populated in the case of load on demand.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nodePopulating,
    optionValue: NodePopulatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the CSS class applied to all parent nodes.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageClass
  ): java.lang.String = js.native
  /**
  	 * /Sets the CSS class applied to all parent nodes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageClass,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the tooltip applied to all parent node images.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageTooltip
  ): java.lang.String = js.native
  /**
  	 * /Sets the tooltip applied to all parent node images.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the image url applied to all parent nodes.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageUrl
  ): java.lang.String = js.native
  /**
  	 * /Sets the image url applied to all parent nodes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.parentNodeImageUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the node data-path attribute separator character.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pathSeparator
  ): java.lang.String = js.native
  /**
  	 * The node data-path attribute separator character.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pathSeparator,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Fired after rendering of the tree has finished.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Fired after rendering of the tree has finished.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before rendering of the tree begins.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Fired before rendering of the tree begins.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the HTTP verb used for remote requests. Gets the HTTP verb to be used to issue the requests to the [dataSourceUrl](ui.igtree#options:dataSourceUrl).
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * The HTTP verb used for remote requests. Sets the HTTP verb to be used to issue the requests to the [dataSourceUrl](ui.igtree#options:dataSourceUrl).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the type of the content in a remote data source response. Content type of the response from the [dataSourceUrl](ui.igtree#options:dataSourceUrl). See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * The type of the content in a remote data source response. Content type of the response from the [dataSourceUrl](ui.igtree#options:dataSourceUrl). See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the JSON key at which a remote data source will write the data. Delegates the value to [$.ig.DataSource.settings.responseDataKey](ig.datasource#options:settings.responseDataKey). Please refer to the documentation of $.ig.DataSource.settings.responseDataKey.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * The JSON key at which a remote data source will write the data. Delegates the value to [$.ig.DataSource.settings.responseDataKey](ig.datasource#options:settings.responseDataKey). Please refer to the documentation of $.ig.DataSource.settings.responseDataKey.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the data type of the remote data source response. Delegates the value to [$.ig.DataSource.settings.responseDataType](ig.datasource#options:settings.responseDataType). Please refer to the documentation of $.ig.DataSource.settings.responseDataType.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType
  ): java.lang.String = js.native
  /**
  	 * The data type of the remote data source response. Delegates the value to [$.ig.DataSource.settings.responseDataType](ig.datasource#options:settings.responseDataType). Please refer to the documentation of $.ig.DataSource.settings.responseDataType.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Fired after a new node is selected.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged
  ): IgTreeSelectionChangedEvent = js.native
  /**
  	 * Fired after a new node is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanged,
    optionValue: IgTreeSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired before a new node is selected.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanging
  ): SelectionChangingEvent = js.native
  /**
  	 * Fired before a new node is selected.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectionChanging,
    optionValue: SelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets one or more branches to be expanded at a time. If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.singleBranchExpand
  ): scala.Boolean = js.native
  /**
  	 * /Sets one or more branches to be expanded at a time. If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.singleBranchExpand,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets the URL to which updating requests will be made.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl
  ): java.lang.String = js.native
  /**
  	 * The URL to which updating requests will be made.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control container.
  	 *
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control container.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTree(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTree(options: IgTree): JQuery = js.native
  def igTreeGrid(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to true, the height of the grid row will be calculated automatically based on the [avgRowHeight](ui.iggrid#options:avgRowHeight) and the visible virtual records. If no [avgRowHeight](ui.iggrid#options:avgRowHeight) is specified, it will be calculated automatically at runtime.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.adjustVirtualHeights,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions
  ): scala.Boolean = js.native
  /**
  	 * If set to true, the following behavior will take place:
  	 * If a new row is added, and then deleted, there will be no transaction added to the log.
  	 * If a new row is added, edited, then deleted, there will be no transaction added to the log.
  	 * If several edits are made to a row or an individual cell, this should result in a single transaction.
  	 * Note: This option takes effect only when [autoCommit](ui.iggrid#options:autoCommit) is set to false.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.aggregateTransactions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of alternating row styles (odd and even rows receive different styling).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.alternateRowStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight
  ): scala.Boolean = js.native
  /**
  	 * If autoAdjustHeight is set to false, the [height](ui.iggrid#options:height) will be set only on the scrolling container, and all other UI elements such as paging footer / filter row / headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no [virtualization](ui.iggrid#options:virtualization) enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoAdjustHeight,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit
  ): scala.Boolean = js.native
  /**
  	 * Automatically commits the transactions as rows/cells are being edited to the client data source. A [saveChanges](ui.iggrid#methods:saveChanges) call still needs to be performed in order to commit the transactions to a server-side data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoCommit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat
  ): java.lang.String | scala.Boolean = js.native
  /**
  	 * Sets gets ability to automatically format text in cells for numeric, date and time columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. [Here column formatting is explained in details](http://www.igniteui.com/help/iggrid-columns-and-layout#column-formatting)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoFormat,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns
  ): scala.Boolean = js.native
  /**
  	 * If no [columns](ui.iggrid#options:columns) collection is defined, and autoGenerateColumns is set to true, [columns](ui.iggrid#options:columns) will be inferred from the data source before the [dataRendering](ui.iggrid#events:dataRendering) event is fired. The inferred [columns](ui.iggrid#options:columns) collection will be available to the developer for modification at [dataRendering](ui.iggrid#events:dataRendering). If autoGenerateColumns is not explicitly set and [columns](ui.iggrid#options:columns) has at least one column defined then autoGenerateColumns is automatically set to false.
  	 * If autoGenerateColumns is true and there are columns defined auto-generated columns will render after the explicitly defined ones.
  	 * Since auto-generated columns don't have width defined consider setting [defaultColumnWidth](ui.iggrid#options:defaultColumnWidth) as well.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoGenerateColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn
  ): scala.Boolean = js.native
  /**
  	 * If set to true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the remaining empty space of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autofitLastColumn,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgColumnWidth,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight
  ): scala.Double = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.avgRowHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption
  ): java.lang.String = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered
  ): CaptionRenderedEvent = js.native
  /**
  	 * Event fired after the caption has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendered,
    optionValue: CaptionRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering
  ): CaptionRenderingEvent = js.native
  /**
  	 * Event fired before the caption starts its rendering.
  	 * Return false in order to cancel caption rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.captionRendering,
    optionValue: CaptionRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Caption text that will be shown above the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caption,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick
  ): CellClickEvent = js.native
  /**
  	 * Event fired when a cell is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellClick,
    optionValue: CellClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick
  ): CellRightClickEvent = js.native
  /**
  	 * Event fired when a cell is right clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellRightClick,
    optionValue: CellRightClickEvent
  ): scala.Unit = js.native
  /**
  	 * Property name of the array of child data in a hierarchical data source.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childDataKey
  ): java.lang.String = js.native
  /**
  	 * Property name of the array of child data in a hierarchical data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.childDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the collapse indicator tooltip text.
  	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the collapse indicator tooltip text.
  	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.collapseTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization
  ): js.Any = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnVirtualization,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns
  ): js.Array[IgGridColumn] = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified
  ): ColumnsCollectionModifiedEvent = js.native
  /**
  	 * Event fired after the columns colection has been modified(e.g. a column is hidden)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnsCollectionModified,
    optionValue: ColumnsCollectionModifiedEvent
  ): scala.Unit = js.native
  /**
  	 * An array of column objects. Checkout the [Columns and Layout](http://www.igniteui.com/help/iggrid-columns-and-layout#defining-columns) topic for details on configuring the columns array.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columns,
    optionValue: js.Array[IgGridColumn]
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created
  ): CreatedEvent = js.native
  /**
  	 * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.created,
    optionValue: CreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding
  ): DataBindingEvent = js.native
  /**
  	 * Event fired before data binding takes place.
  	 *
  	 * Return false in order to cancel data binding.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBinding,
    optionValue: DataBindingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after data binding is complete.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound
  ): DataBoundEvent = js.native
  /**
  	 * Event fired after data binding is complete.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataBound,
    optionValue: DataBoundEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered
  ): DataRenderedEvent = js.native
  /**
  	 * Event fired after all of the data records in the grid table body have been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendered,
    optionValue: DataRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering
  ): DataRenderingEvent = js.native
  /**
  	 * Event fired before the TBODY holding the data records starts its rendering.
  	 * Return false in order to cancel data records rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataRendering,
    optionValue: DataRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource
  ): js.Array[_] | js.Object | java.lang.String = js.native
  /**
  	 * Options object to configure data source-specific settings
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceSettings
  ): IgTreeGridDataSourceSettings = js.native
  /**
  	 * Options object to configure data source-specific settings
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceSettings,
    optionValue: IgTreeGridDataSourceSettings
  ): scala.Unit = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType
  ): java.lang.String = js.native
  /**
  	 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl
  ): java.lang.String = js.native
  /**
  	 * Sets a remote URL as a data source, from which data will be retrieved using the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Can be any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an $.ig.DataSource itself
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataSource,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default column width that will be set for all columns, that don't have [column width](ui.iggrid#options:columns.width) defined. Can also be set as '*', in which case the width auto-size based on the content of the column cells (including the header text).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Fired when the grid is destroyed
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed
  ): DestroyedEvent = js.native
  /**
  	 * Fired when the grid is destroyed
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.destroyed,
    optionValue: DestroyedEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables rendering of hover styles when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableHoverStyles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets to the tree grid if data is loaded on demand from a remote server. Default is false.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRemoteLoadOnDemand
  ): scala.Boolean = js.native
  /**
  	 * Sets to the tree grid if data is loaded on demand from a remote server. Default is false.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRemoteLoadOnDemand,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables grid adjusting its dimensions when its [width](ui.iggrid#options:width) and/or [height](ui.iggrid#options:height) is set in percent (%) and grid parent DOM container is resized.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableResizeContainerCheck,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates
  ): scala.Boolean = js.native
  /**
  	 * Enables/Disables serializing client date as UTC ISO 8061 string instead of using the local time and zone values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableUTCDates,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the expansion indicator tooltip text.
  	 * Use option [locale.expandTooltipText](ui.igtreegrid#options:locale.expandTooltipText).
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the expansion indicator tooltip text.
  	 * Use option [locale.expandTooltipText](ui.igtreegrid#options:locale.expandTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.expandTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay
  ): java.lang.String = js.native
  /**
  	 * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserIconDisplay,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features
  ): js.Array[IgGridFeature] = js.native
  /**
  	 * List of grid feature definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly. [Here you can find detailed documentation for all igGrid features](http://www.igniteui.com/help/iggrid-features-landing-page)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.features,
    optionValue: js.Array[IgGridFeature]
  ): scala.Unit = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters
  ): scala.Boolean = js.native
  /**
  	 * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedFooters will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooters,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders
  ): scala.Boolean = js.native
  /**
  	 * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If [virtualization](ui.iggrid#options:virtualization) is enabled, fixedHeaders will always act as if it's true, no matter which value is set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaders,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered
  ): FooterRenderedEvent = js.native
  /**
  	 * Event fired after the footer has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendered,
    optionValue: FooterRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering
  ): FooterRenderingEvent = js.native
  /**
  	 * Event fired before the footer starts its rendering.
  	 *
  	 * Return false in order to cancel footer rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.footerRendering,
    optionValue: FooterRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.foreignKey
  ): java.lang.String = js.native
  /**
  	 * Gets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.foreignKeyRootValue
  ): scala.Double | java.lang.String = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.foreignKeyRootValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.foreignKeyRootValue,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.foreignKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered
  ): HeaderCellRenderedEvent = js.native
  /**
  	 * Event fired after every TH in the grid header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerCellRendered,
    optionValue: HeaderCellRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered
  ): HeaderRenderedEvent = js.native
  /**
  	 * Event fired after the header has been rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendered,
    optionValue: HeaderRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering
  ): HeaderRenderingEvent = js.native
  /**
  	 * Event fired before the header starts its rendering.
  	 * Return false in order to cancel header rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerRendering,
    optionValue: HeaderRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row - (if any), etc. [Here you can find more info about setting igGrid height](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indentation
  ): java.lang.String = js.native
  /**
  	 * Sets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.indentation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth
  ): scala.Double = js.native
  /**
  	 * Sets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialExpandDepth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialIndentationLevel
  ): scala.Double = js.native
  /**
  	 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.initialIndentationLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest
  ): scala.Boolean = js.native
  /**
  	 * When dataSource is a remote URL, defines whether to set the type of the remote data source to JSONP.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.jsonpRequest,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform
  ): scala.Boolean = js.native
  /**
  	 * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on [columns](ui.iggrid#options:columns) defined. Otherwise only the subset of data properties used in the [columns](ui.iggrid#options:columns) defined will be extracted in a new object and used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.localSchemaTransform,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgTreeGridLocale = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgTreeGridLocale
  ): scala.Unit = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns
  ): scala.Boolean = js.native
  /**
  	 * Merge unbound columns values inside data source when data source is remote. If true then the unbound columns are merged to the data source at runtime on the server. Note that data source is expanded with the new data and this could cause performance issues when the data is huge. If mergeUnboundColumns is false then the unbound data is sent and merged on the client. This option is used by the [igGrid MVC Helper](http://www.igniteui.com/help/iggrid-developing-asp-net-mvc-applications-with-iggrid).
  	 * Checkout [Populating Unbound Columns Remotely (igGrid)](http://www.igniteui.com/help/iggrid-unboundcolumns-populating-with-data-remotely) topic for more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mergeUnboundColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey
  ): java.lang.String = js.native
  /**
  	 * Key of the column containing unique identifiers for the data records.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.primaryKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes
  ): scala.Boolean = js.native
  /**
  	 * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". Checkboxes are not rendered for boolean values in columns with a [column template](ui.iggrid#options:columns.template).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderCheckboxes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderExpansionCellFunction
  ): java.lang.String | js.Object = js.native
  /**
  	 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderExpansionCellFunction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderExpansionCellFunction,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Specify whether to render non-data column which contains expander indicators
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderExpansionIndicatorColumn
  ): scala.Boolean = js.native
  /**
  	 * Specify whether to render non-data column which contains expander indicators
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderExpansionIndicatorColumn,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFirstDataCellFunction
  ): java.lang.String | js.Object = js.native
  /**
  	 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFirstDataCellFunction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFirstDataCellFunction,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered
  ): RenderedEvent = js.native
  /**
  	 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendered,
    optionValue: RenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering
  ): RenderingEvent = js.native
  /**
  	 * Event fired before the grid starts rendering (all contents).
  	 * This event is fired only when the grid is being initialized.
  	 * It will not be fired if the grid is rebound to its data
  	 * (for example, when calling the dataBind() API method
  	 * or when changing the page size (when paging is enabled)).
  	 * Return false in order to cancel grid rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rendering,
    optionValue: RenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError
  ): RequestErrorEvent = js.native
  /**
  	 * Event fired if there is an error in the request, when the grid is doing a remote operation,
  	 * such as data binding, paging, sorting, etc.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestError,
    optionValue: RequestErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType
  ): java.lang.String = js.native
  /**
  	 * Sets the HTTP verb to be used to issue the requests to a remote data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requestType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType
  ): java.lang.String = js.native
  /**
  	 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseContentType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey
  ): java.lang.String = js.native
  /**
  	 * See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey). This is the property in the responses where data records are held, if the response is wrapped.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseDataKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated. See [$.ig.DataSource responseTotalRecCountKey](ig.datasource#options:settings.responseTotalRecCountKey). Property in the response specifying the total number of records on the server.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.responseTotalRecCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings
  ): IgTreeGridRestSettings = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.restSettings,
    optionValue: IgTreeGridRestSettings
  ): scala.Unit = js.native
  /**
  	 * Fired after a row is collapsed
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsed
  ): RowCollapsedEvent = js.native
  /**
  	 * Fired after a row is collapsed
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsed,
    optionValue: RowCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when a row is about to be collapsed.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsing
  ): RowCollapsingEvent = js.native
  /**
  	 * Fired when a row is about to be collapsed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowCollapsing,
    optionValue: RowCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when a row is expanded.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanded
  ): RowExpandedEvent = js.native
  /**
  	 * Fired when a row is expanded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanded,
    optionValue: RowExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Fired when a row is about to be expanded.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanding
  ): RowExpandingEvent = js.native
  /**
  	 * Fired when a row is about to be expanded.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowExpanding,
    optionValue: RowExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization
  ): scala.Boolean = js.native
  /**
  	 * Enables virtualization for rows only. [Here you can find more info about igGrid row virtualization](http://www.igniteui.com/help/iggrid-virtualization-overview)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowVirtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered
  ): RowsRenderedEvent = js.native
  /**
  	 * Event fired after data rows are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendered,
    optionValue: RowsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering
  ): RowsRenderingEvent = js.native
  /**
  	 * Event fired before actual data rows (TRs) are rendered.
  	 * Return false in order to cancel rows rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowsRendering,
    optionValue: RowsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated
  ): SchemaGeneratedEvent = js.native
  /**
  	 * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.schemaGenerated,
    optionValue: SchemaGeneratedEvent
  ): scala.Unit = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings
  ): IgGridScrollSettings = js.native
  /**
  	 * Settings related to content scrolling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSettings,
    optionValue: IgGridScrollSettings
  ): scala.Unit = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog
  ): scala.Boolean = js.native
  /**
  	 * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be performed instead of GET.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.serializeTransactionLog,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showExpansionIndicator
  ): scala.Boolean = js.native
  /**
  	 * Sets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showExpansionIndicator,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid footer.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFooter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader
  ): scala.Boolean = js.native
  /**
  	 * Controls the visibility of the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showHeader,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * Initial tabIndex attribute that will be set on all focusable elements.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine
  ): java.lang.String = js.native
  /**
  	 * The templating engine that will be used to render the grid [column templates](ui.iggrid#options:columns.template). [Here you can find](http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/05/30/using-different-template-engines-with-ignite-ui-controls.aspx) how to use templating engines other than igTemplating and jsRender.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.templatingEngine,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl
  ): java.lang.String = js.native
  /**
  	 * URL to which updating requests will be made.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.updateUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization
  ): scala.Boolean = js.native
  /**
  	 * Determines row virtualization mode. For igTreeGrid only continuous virtualization can be used.
  	 *
  	 * continuous  renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode
  ): java.lang.String = js.native
  /**
  	 * Determines row virtualization mode. For igTreeGrid only continuous virtualization can be used.
  	 *
  	 * continuous  renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep
  ): scala.Double = js.native
  /**
  	 * Number of pixels to scroll the grid by, when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. If "null" the step will be equal to the [avgRowHeight](ui.iggrid#options:avgRowHeight).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualizationMouseWheelStep,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Enables/disables column and row virtualization at the same time. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data. [Here you can find more info about the performance guidelines when using the igGrid](http://www.igniteui.com/help/iggrid-performance-guide)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.virtualization,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Defines the grid width in pixels or percents. [Here you can find more info about setting igGrid width](http://www.igniteui.com/help/iggrid-columns-and-layout#width-height).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGrid(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTreeGrid(options: IgTreeGrid): JQuery = js.native
  def igTreeGridColumnFixing(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event which is fired when column fixing operation is finished
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixed
  ): ColumnFixedEvent = js.native
  /**
  	 * Event which is fired when column fixing operation is finished
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixed,
    optionValue: ColumnFixedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column fixing operation is initiated.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixing
  ): ColumnFixingEvent = js.native
  /**
  	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixingRefused
  ): ColumnFixingRefusedEvent = js.native
  /**
  	 * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixingRefused,
    optionValue: ColumnFixingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column fixing operation is initiated.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnFixing,
    optionValue: ColumnFixingEvent
  ): scala.Unit = js.native
  /**
  	 * List of column settings that specifies custom column fixing options on a per column basis.
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridColumnFixingColumnSetting] = js.native
  /**
  	 * List of column settings that specifies custom column fixing options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridColumnFixingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is done
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixed
  ): ColumnUnfixedEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation is done
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixed,
    optionValue: ColumnUnfixedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is initiated
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixing
  ): ColumnUnfixingEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixingRefused
  ): ColumnUnfixingRefusedEvent = js.native
  /**
  	 * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixingRefused,
    optionValue: ColumnUnfixingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when column unfixing operation is initiated
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnUnfixing,
    optionValue: ColumnUnfixingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextFixedColumn
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextFixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextFixedColumn).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextFixedColumn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextUnfixedColumn
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Text of the feature chooser button for unfixing a currently fixed column. Use option [locale.featureChooserTextUnfixedColumn](ui.iggridcolumnfixing#options:locale.featureChooserTextUnfixedColumn).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextUnfixedColumn,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixNondataColumns
  ): scala.Boolean = js.native
  /**
  	 * Specify initial fixing of all non data columns. Non-data columns are columns in the grid rendered for specific features, like the row selectors feature. The column containing the row numbering is such a column. This option is applicable when [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is set to left. For a full column fixing configuration summary please refer to [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#configuration-summary).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixNondataColumns,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection
  ): java.lang.String = js.native
  /**
  	 * Configures which side the fixed columns of the grid will be rendered on. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#direction) out of more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Gets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerFixButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *             Sets the tooltip text on the column fixing header icon when column is not fixed. Use option [locale.headerFixButtonText](ui.iggridcolumnfixing#options:locale.headerFixButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerFixButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Gets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerUnfixButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *                 Sets the tooltip text on the column fixing header icon when column is fixed. Use option [locale.headerUnfixButtonText](ui.iggridcolumnfixing#options:locale.headerUnfixButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.headerUnfixButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridColumnFixingLocale = js.native
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridColumnFixingLocale
  ): scala.Unit = js.native
  /**
  	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Minimal visible area in pixels for the unfixed columns. If the end user tries to fix a column(or columns), which causes the width of the fixed columns to grow such that the width of visible area of unfixed columns is less than this option then fixing will be canceled. Check [this topic](http://www.igniteui.com/help/iggrid-columnfixing-configuring#non-fixable-min-width) out for more information.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minimalVisibleAreaWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.populateDataRowsAttributes
  ): scala.Boolean = js.native
  /**
  	 * When true all the TR DOM attributes of the unfixed row will be copied to the fixed row. Note that when enabled this option negatively affects performance when fixing a column.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.populateDataRowsAttributes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta
  ): scala.Double = js.native
  /**
  	 * Scroll delta in pixels when scrolling with the mouse wheel or the keyboard in the fixed columns area of the grid.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets whether to show the column fixing buttons in header cells/feature chooser.
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFixButtons
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to show the column fixing buttons in header cells/feature chooser.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFixButtons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
  	 *
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncRowHeights
  ): scala.Boolean = js.native
  /**
  	 * Enable row height sync for the fixed and unfixed portion of the grid. If you're observing row misalignment, please refer to [this article](http://www.igniteui.com/help/iggrid-known-issues#misalignment-ie9).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnFixing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.syncRowHeights,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridColumnFixing(options: IgTreeGridColumnFixing): JQuery = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_checkAndSyncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkAndSyncHeights): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_checkFixingAllowed(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkFixingAllowed, columns: js.Array[_]): scala.Boolean = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_checkUnfixingAllowed(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkUnfixingAllowed, columns: js.Array[_]): scala.Boolean = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_fixColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn, colIdentifier: js.Object): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_fixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn,
    colIdentifier: js.Object,
    target: java.lang.String
  ): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_fixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.fixColumn,
    colIdentifier: js.Object,
    target: java.lang.String,
    after: scala.Boolean
  ): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_fixDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixDataSkippedColumns): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_fixNonDataColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixNonDataColumns): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_getWidthOfFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns): scala.Double = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_getWidthOfFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns, fCols: js.Array[_]): scala.Double = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_getWidthOfFixedColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns,
    fCols: js.Array[_],
    excludeNonDataColumns: scala.Boolean
  ): scala.Double = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_getWidthOfFixedColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getWidthOfFixedColumns,
    fCols: js.Array[_],
    excludeNonDataColumns: scala.Boolean,
    includeHidden: scala.Boolean
  ): scala.Double = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_isGroupHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.isGroupHeader, colKey: java.lang.String): scala.Boolean = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridColumnFixing): JQuery = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_syncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_syncHeights(methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights, check: scala.Boolean): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_syncHeights(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.syncHeights,
    check: scala.Boolean,
    clearRowsHeights: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_syncRowsHeights(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.syncRowsHeights,
    $trs: js.Array[_],
    $anotherRows: js.Array[_]
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixAllColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixAllColumns): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn, colIdentifier: js.Object): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn,
    colIdentifier: js.Object,
    target: java.lang.String
  ): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixColumn,
    colIdentifier: js.Object,
    target: java.lang.String,
    after: scala.Boolean
  ): js.Object = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixDataSkippedColumns): scala.Unit = js.native
  @JSName("igTreeGridColumnFixing")
  def igTreeGridColumnFixing_unfixNonDataColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.unfixNonDataColumns): scala.Unit = js.native
  def igTreeGridColumnMoving(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets if header cells should include an additional button that opens a moving helper dropdown.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addMovingDropdown
  ): scala.Boolean = js.native
  /**
  	 * Sets if header cells should include an additional button that opens a moving helper dropdown.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addMovingDropdown,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation is canceled
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragCanceled
  ): ColumnDragCanceledEvent = js.native
  /**
  	 * Event which is fired when a drag operation is canceled
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragCanceled,
    optionValue: ColumnDragCanceledEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation ends on a column header
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragEnd
  ): ColumnDragEndEvent = js.native
  /**
  	 * Event which is fired when a drag operation ends on a column header
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragEnd,
    optionValue: ColumnDragEndEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a drag operation begins on a column header
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragStart
  ): ColumnDragStartEvent = js.native
  /**
  	 * Event which is fired when a drag operation begins on a column header
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnDragStart,
    optionValue: ColumnDragStartEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation completes
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoved
  ): ColumnMovedEvent = js.native
  /**
  	 * Event which is fired when a column moving operation completes
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoved,
    optionValue: ColumnMovedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation is initiated
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoving
  ): ColumnMovingEvent = js.native
  /**
  	 * Controls containment behavior of column moving dialog.
  	 *
  	 *                 owner  The dialog will be draggable only in the grid area
  	 *                 window  The dialog will be draggable in the whole window area
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMovingDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior of column moving dialog.
  	 *
  	 *                 owner  The dialog will be draggable only in the grid area
  	 *                 window  The dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMovingDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is fired when a column moving operation is initiated
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnMoving,
    optionValue: ColumnMovingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies moving options on a per column basis.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridColumnMovingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies moving options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridColumnMovingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the opacity of the drag markup, while a column header is being dragged.
  	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
  	 * will be used with priority over this one.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragHelperOpacity
  ): scala.Double = js.native
  /**
  	 * Sets the opacity of the drag markup, while a column header is being dragged.
  	 * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
  	 * will be used with priority over this one.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dragHelperOpacity,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveFirstText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveFirstText](ui.iggridcolumnmoving#options:locale.dropDownMoveFirstText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveFirstText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLastText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move last dropdown button. Use option [locale.dropDownMoveLastText](ui.iggridcolumnmoving#options:locale.dropDownMoveLastText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLastText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLeftText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move left dropdown button. Use option [locale.dropDownMoveLeftText](ui.iggridcolumnmoving#options:locale.dropDownMoveLeftText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveLeftText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveRightText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for the move right dropdown button. Use option [locale.dropDownMoveRightText](ui.iggridcolumnmoving#options:locale.dropDownMoveRightText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownMoveRightText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSubmenuText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser submenu button. Use option [locale.featureChooserSubmenuText](ui.iggridcolumnmoving#options:locale.featureChooserSubmenuText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSubmenuText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets whether the contents of the column being dragged will get hidden. The option is only
  	 * relevant in immediate moving mode.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideHeaderContentsDuringDrag
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the contents of the column being dragged will get hidden. The option is only
  	 * relevant in immediate moving mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideHeaderContentsDuringDrag,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridColumnMovingLocale = js.native
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridColumnMovingLocale
  ): scala.Unit = js.native
  /**
  	 * Specify the drag-and-drop mode for the feature
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Specify the drag-and-drop mode for the feature
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specify the way columns will be rearranged
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.moveType
  ): java.lang.String = js.native
  /**
  	 * Specify the way columns will be rearranged
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.moveType,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingAcceptanceTolerance
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingAcceptanceTolerance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time in milliseconds for animation duration to show/hide modal dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each move up button in the column moving dialog. Use option [locale.movingDialogCaptionButtonAsc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each move down button in the column moving dialog. Use option [locale.movingDialogCaptionButtonDesc](ui.iggridcolumnmoving#options:locale.movingDialogCaptionButtonDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionButtonDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the column moving dialog. Use option [locale.movingDialogCaptionText](ui.iggridcolumnmoving#options:locale.movingDialogCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the moving dialog has been closed.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosed
  ): MovingDialogClosedEvent = js.native
  /**
  	 * Event fired after the moving dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosed,
    optionValue: MovingDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the moving dialog is closed.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosing
  ): MovingDialogClosingEvent = js.native
  /**
  	 * Event fired before the moving dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogClosing,
    optionValue: MovingDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the model dialog are rendered.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendered
  ): MovingDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the model dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendered,
    optionValue: MovingDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the model dialog are rendered.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendering
  ): MovingDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the model dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogContentsRendering,
    optionValue: MovingDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDisplayText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser entry. Use option [locale.movingDialogDisplayText](ui.iggridcolumnmoving#options:locale.movingDialogDisplayText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDisplayText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when column moving is completed through dragging it in the moving dialog
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoved
  ): MovingDialogDragColumnMovedEvent = js.native
  /**
  	 * Event fired when column moving is completed through dragging it in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoved,
    optionValue: MovingDialogDragColumnMovedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when column moving is initiated through dragging it in the moving dialog
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoving
  ): MovingDialogDragColumnMovingEvent = js.native
  /**
  	 * Event fired when column moving is initiated through dragging it in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragColumnMoving,
    optionValue: MovingDialogDragColumnMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the moving dialog changes its position.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragged
  ): MovingDialogDraggedEvent = js.native
  /**
  	 * Event fired every time the moving dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDragged,
    optionValue: MovingDialogDraggedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets markup for drop tooltip in column moving dialog
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipMarkup
  ): java.lang.String = js.native
  /**
  	 * Sets markup for drop tooltip in column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipMarkup,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text for drop tooltip in column moving dialog. Use option [locale.movingDialogDropTooltipText](ui.iggridcolumnmoving#options:locale.movingDialogDropTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogDropTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets height of column moving dialog
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogHeight
  ): scala.Double = js.native
  /**
  	 * Sets height of column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when move down button is pressed in the moving dialog
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveDownButtonPressed
  ): MovingDialogMoveDownButtonPressedEvent = js.native
  /**
  	 * Event fired when move down button is pressed in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveDownButtonPressed,
    optionValue: MovingDialogMoveDownButtonPressedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when move up button is pressed in the moving dialog
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveUpButtonPressed
  ): MovingDialogMoveUpButtonPressedEvent = js.native
  /**
  	 * Event fired when move up button is pressed in the moving dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogMoveUpButtonPressed,
    optionValue: MovingDialogMoveUpButtonPressedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpened
  ): MovingDialogOpenedEvent = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpened,
    optionValue: MovingDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the moving dialog is opened.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpening
  ): MovingDialogOpeningEvent = js.native
  /**
  	 * Event fired before the moving dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogOpening,
    optionValue: MovingDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of column moving dialog
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogWidth
  ): scala.Double = js.native
  /**
  	 * Sets width of column moving dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingScrollTolerance
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingScrollTolerance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingToolTipMove
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for the feature chooser submenu button. Use option [locale.movingToolTipMove](ui.iggridcolumnmoving#options:locale.movingToolTipMove).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.movingToolTipMove,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets the length (in pixels) of each individual scroll operation
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta
  ): scala.Double = js.native
  /**
  	 * Sets the length (in pixels) of each individual scroll operation
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollDelta,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
  	 *
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSpeedMultiplier
  ): scala.Double = js.native
  /**
  	 * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridColumnMoving(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.scrollSpeedMultiplier,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTreeGridColumnMoving(options: IgTreeGridColumnMoving): JQuery = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridColumnMoving")
  def igTreeGridColumnMoving_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridColumnMoving): JQuery = js.native
  def igTreeGridFiltering(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of filtering. Delegates all filtering functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeEditorsVisible
  ): scala.Boolean = js.native
  /**
  	 * Defines whether to render editors in advanced [mode](ui.iggridfiltering#options:mode). If false, no editors will be rendered in the advanced [mode](ui.iggridfiltering#options:mode).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeEditorsVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeHeaderButtonLocation
  ): java.lang.String = js.native
  /**
  	 * Location of the advanced filtering button when [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is false (i.e. when the button is rendered in the header).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.advancedModeHeaderButtonLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive
  ): scala.Boolean = js.native
  /**
  	 * Enables or disables the filtering case sensitivity. Works only for local filtering. If true, it case sensitive filtering is performed. If false, filtering is case insensitive.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies custom filtering options on a per column basis.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridFilteringColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies custom filtering options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridFilteringColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired after the filtering has been executed and results are rendered.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltered
  ): DataFilteredEvent = js.native
  /**
  	 * Event fired after the filtering has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltered,
    optionValue: DataFilteredEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a filtering operation is executed (remote request or local).
  	 * Return false in order to cancel filtering operation.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltering
  ): DataFilteringEvent = js.native
  /**
  	 * Event fired before a filtering operation is executed (remote request or local).
  	 * Return false in order to cancel filtering operation.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataFiltering,
    optionValue: DataFilteringEvent
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayMode
  ): js.Any = js.native
  /**
  	 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.displayMode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Event fired after a filter column dropdown is completely closed.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed
  ): DropDownClosedEvent = js.native
  /**
  	 * Event fired after a filter column dropdown is completely closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosed,
    optionValue: DropDownClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the filter dropdown starts closing.
  	 * Return false in order to cancel dropdown closing.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing
  ): DropDownClosingEvent = js.native
  /**
  	 * Event fired before the filter dropdown starts closing.
  	 * Return false in order to cancel dropdown closing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownClosing,
    optionValue: DropDownClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the filter dropdown is opened for a specific column.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened
  ): DropDownOpenedEvent = js.native
  /**
  	 * Event fired after the filter dropdown is opened for a specific column.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpened,
    optionValue: DropDownOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the filter dropdown is opened for a specific column.
  	 * Return false in order to cancel dropdown opening.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening
  ): DropDownOpeningEvent = js.native
  /**
  	 * Event fired before the filter dropdown is opened for a specific column.
  	 * Return false in order to cancel dropdown opening.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownOpening,
    optionValue: DropDownOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextAdvancedFilter
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter [mode](ui.iggridfiltering#options:mode) is advanced. Use option [locale.featureChooserTextAdvancedFilter](ui.iggridfiltering#options:locale.featureChooserTextAdvancedFilter).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextAdvancedFilter,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is hidden and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserTextHide](ui.iggridfiltering#options:locale.featureChooserTextHide).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserTextHide,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Feature chooser text when filter is shown and filter [mode](ui.iggridfiltering#options:mode) is simple. Use option [locale.featureChooserText](ui.iggridfiltering#options:locale.featureChooserText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterButtonLocation
  ): java.lang.String = js.native
  /**
  	 * The filtering button for filter dropdowns can be rendered either on the left of the filter editor, or on the right.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterButtonLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDelay
  ): scala.Double = js.native
  /**
  	 * Time in milliseconds for which widget will wait between keystrokes before sending filtering requests.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Add button width - in the advanced filter dialog.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Add button width - in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddButtonWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
  	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionDropDownTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for options in dropdown in add condition area in the filter dialog. The default template is "<option value='${value}'>${text}</option>"
  	 * and it is used when [filterDialogAddConditionTemplate](ui.iggridfiltering#options:filterDialogAddConditionTemplate) is applied
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionDropDownTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for add condition area in the filter dialog. The default template is "<div><span>${label1}</span><div><input></input></div><span>${label2}</span></div>".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogAddConditionTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the advanced filter dialog has been closed.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosed
  ): FilterDialogClosedEvent = js.native
  /**
  	 * Event fired after the advanced filter dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosed,
    optionValue: FilterDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the advanced filter dialog is closed.
  	 * Return false in order to cancel filtering dialog closing.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosing
  ): FilterDialogClosingEvent = js.native
  /**
  	 * Event fired before the advanced filter dialog is closed.
  	 * Return false in order to cancel filtering dialog closing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogClosing,
    optionValue: FilterDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the column chooser dropdowns in the advanced filter dialog.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the column chooser dropdowns in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogColumnDropDownDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The filter dialog will be draggable only within the grid area.
  	 * window  The filter dialog will be draggable within the whole window area.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The filter dialog will be draggable only within the grid area.
  	 * window  The filter dialog will be draggable within the whole window area.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the advanced filter dialog are rendered.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendered
  ): FilterDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the advanced filter dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendered,
    optionValue: FilterDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the advanced filter dialog are rendered.
  	 * Return false in order to cancel filtering dialog rendering.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendering
  ): FilterDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the advanced filter dialog are rendered.
  	 * Return false in order to cancel filtering dialog rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogContentsRendering,
    optionValue: FilterDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the filtering expression input boxes in the advanced filter dialog.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the filtering expression input boxes in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogExprInputDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after a filter row is added to the advanced filter dialog.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdded
  ): FilterDialogFilterAddedEvent = js.native
  /**
  	 * Event fired after a filter row is added to the advanced filter dialog.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdded,
    optionValue: FilterDialogFilterAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a filter row is added to the advanced filter dialog.
  	 * Return false in order to cancel filter adding to the advanced filtering dialog.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdding
  ): FilterDialogFilterAddingEvent = js.native
  /**
  	 * Event fired before a filter row is added to the advanced filter dialog.
  	 * Return false in order to cancel filter adding to the advanced filtering dialog.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterAdding,
    optionValue: FilterDialogFilterAddingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
  	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterConditionTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for options in condition list in filter dialog. The default template is "<option value='${condition}'>${text}</option>"
  	 * and it is used for custimizing DOM elemenent with attribute "data-af-cond".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterConditionTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Width of the filtering condition dropdowns in the advanced filter dialog.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the filtering condition dropdowns in the advanced filter dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterDropDownDefaultWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Custom template for filter dialog.
  	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
  	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
  	 * NOTE: The template is supported only with <tr />.
  	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for filter dialog.
  	 * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
  	 * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
  	 * NOTE: The template is supported only with <tr />.
  	 * The default template is "<tr data-af-row><td><input data-af-col/></td><td><input data-af-cond/></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>".
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFilterTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when the OK button in the advanced filter dialog is pressed.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFiltering
  ): FilterDialogFilteringEvent = js.native
  /**
  	 * Event fired when the OK button in the advanced filter dialog is pressed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogFiltering,
    optionValue: FilterDialogFilteringEvent
  ): scala.Unit = js.native
  /**
  	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default filter dialog height (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMaxFilterCount
  ): scala.Double = js.native
  /**
  	 * Maximum number of filter rows in the advanced filtering dialog. If this number is exceeded, an error message will be rendered.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMaxFilterCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the advanced filter dialog changes its position.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMoving
  ): FilterDialogMovingEvent = js.native
  /**
  	 * Event fired every time the advanced filter dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogMoving,
    optionValue: FilterDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the Ok and Cancel buttons in the advanced filtering dialogs.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOkCancelButtonWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after the advanced filter dialog is already opened.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpened
  ): FilterDialogOpenedEvent = js.native
  /**
  	 * Event fired after the advanced filter dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpened,
    optionValue: FilterDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the advanced filtering dialog is opened.
  	 * Return false in order to cancel filter dialog opening.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpening
  ): FilterDialogOpeningEvent = js.native
  /**
  	 * Event fired before the advanced filtering dialog is opened.
  	 * Return false in order to cancel filter dialog opening.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogOpening,
    optionValue: FilterDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Default filter dialog width (used for Advanced filtering [mode](ui.iggridfiltering#options:mode)).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Animation duration in milliseconds for the [filterDropDownAnimations](ui.iggridfiltering#options:filterDropDownAnimations).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Type of animations for the column filter dropdowns.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimations
  ): java.lang.String = js.native
  /**
  	 * Type of animations for the column filter dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownAnimations,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Height of the column filter dropdowns.
  	 *
  	 * string  The height of the column filter dropdowns in pixels (0px).
  	 * number  The height of the column filter dropdowns in pixels as a number (0).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownHeight
  ): js.Any = js.native
  /**
  	 * Height of the column filter dropdowns.
  	 *
  	 * string  The height of the column filter dropdowns in pixels (0px).
  	 * number  The height of the column filter dropdowns in pixels as a number (0).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownHeight,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Enable/disable filter icons visibility.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownItemIcons
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable filter icons visibility.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownItemIcons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Width of the column filter dropdowns.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Width of the column filter dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterDropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey
  ): java.lang.String = js.native
  /**
  	 * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterExprUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enable/disable footer visibility with summary info about the filter.
  	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
  	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryAlwaysVisible
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable footer visibility with summary info about the filter.
  	 * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
  	 * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryAlwaysVisible,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
  	 * Supported options:
  	 * ${currentPageMatches} (filtering)
  	 * ${totalMatches} (filtering)
  	 * ${startRecord} (paging)
  	 * ${endRecord} (paging)
  	 * ${recordCount} (paging)
  	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryInPagerTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
  	 * Supported options:
  	 * ${currentPageMatches} (filtering)
  	 * ${totalMatches} (filtering)
  	 * ${startRecord} (paging)
  	 * ${endRecord} (paging)
  	 * ${recordCount} (paging)
  	 * Use option [locale.collapseTooltipText](ui.igtreegrid#options:locale.collapseTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryInPagerTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'. Use option [locale.filterSummaryTemplate](ui.iggridfiltering#options:locale.filterSummaryTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.filterSummaryTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specifies from which data bound level to be applied filtering - 0 is the first level
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fromLevel
  ): scala.Double = js.native
  /**
  	 * Specifies from which data bound level to be applied filtering - 0 is the first level
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fromLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labels
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns. Use option [locale](ui.iggridfiltering#options:locale).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labels,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgTreeGridFilteringLocale = js.native
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgTreeGridFilteringLocale
  ): scala.Unit = js.native
  /**
  	 * Gets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
  	 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
  	 * This is used mainly for internal purposes.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.matchFiltering
  ): java.lang.String = js.native
  /**
  	 * Sets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
  	 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
  	 * This is used mainly for internal purposes.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.matchFiltering,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Default is 'simple' for non-virtualized grids, and 'advanced' when [virtualization](ui.iggrid#options:virtualization) is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullTexts
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * List of configurable and localized null texts that will be used for the filter editors. Use option [locale](ui.iggridfiltering#options:locale).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nullTexts,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables filtering persistence between states.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables filtering persistence between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The property in the response that will hold the total number of records in the data source
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey
  ): java.lang.String = js.native
  /**
  	 * The property in the response that will hold the total number of records in the data source
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFC
  ): scala.Boolean = js.native
  /**
  	 * Render in [Feature Chooser](http://www.igniteui.com/help/iggrid-feature-chooser)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFC,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFilterButton
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable filter button visibility. If false, no filter dropdown buttons will be rendered and a predefined list of filters will not be rendered for the columns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderFilterButton,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showEmptyConditions
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showEmptyConditions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showNullConditions
  ): scala.Boolean = js.native
  /**
  	 * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showNullConditions,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
  	 *
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLevel
  ): scala.Double = js.native
  /**
  	 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom tooltip template for the filter button, when a filter is applied. Use option [locale.tooltipTemplate](ui.iggridfiltering#options:locale.tooltipTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridFiltering(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridFiltering(options: IgTreeGridFiltering): JQuery = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_filter(methodName: igniteDashUiLib.igniteDashUiLibStrings.filter, expressions: js.Array[_]): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_filter(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.filter,
    expressions: js.Array[_],
    updateUI: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_filter(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.filter,
    expressions: js.Array[_],
    updateUI: scala.Boolean,
    addedFromAdvanced: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_getFilteringMatchesCount(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFilteringMatchesCount): scala.Double = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridFiltering): JQuery = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_requiresFilteringExpression(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.requiresFilteringExpression,
    filterCondition: java.lang.String
  ): scala.Boolean = js.native
  @JSName("igTreeGridFiltering")
  def igTreeGridFiltering_toggleFilterRowByFeatureChooser(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleFilterRowByFeatureChooser,
    event: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridHiding(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets time of milliseconds for animation duration to show/hide modal dialog
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time of milliseconds for animation duration to show/hide modal dialog
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Apply in column chooser is clicked
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyClick
  ): ColumnChooserButtonApplyClickEvent = js.native
  /**
  	 * Event fired when button Apply in column chooser is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyClick,
    optionValue: ColumnChooserButtonApplyClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which apply changes in modal dialog. Use option [locale.columnChooserButtonApplyText](ui.iggridhiding#options:locale.columnChooserButtonApplyText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonApplyText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancel changes in modal dialog. Use option [locale.columnChooserButtonCancelText](ui.iggridhiding#options:locale.columnChooserButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Reset in column chooser is clicked
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonResetClick
  ): ColumnChooserButtonResetClickEvent = js.native
  /**
  	 * Event fired when button Reset in column chooser is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserButtonResetClick,
    optionValue: ColumnChooserButtonResetClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The caption of the column chooser dialog. Use option [locale.columnChooserCaptionText](ui.iggridhiding#options:locale.columnChooserCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser has been closed.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosed
  ): ColumnChooserClosedEvent = js.native
  /**
  	 * Event fired after the column chooser has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosed,
    optionValue: ColumnChooserClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the column chooser is closed.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosing
  ): ColumnChooserClosingEvent = js.native
  /**
  	 * Event fired before the column chooser is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserClosing,
    optionValue: ColumnChooserClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The column chooser dialog will be draggable only in the grid area
  	 * window  The column chooser dialog will be draggable in the whole window area
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior.
  	 *
  	 * owner  The column chooser dialog will be draggable only in the grid area
  	 * window  The column chooser dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the column chooser are rendered.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendered
  ): ColumnChooserContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the column chooser are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendered,
    optionValue: ColumnChooserContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the column chooser are rendered.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendering
  ): ColumnChooserContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the column chooser are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserContentsRendering,
    optionValue: ColumnChooserContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserDisplayText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog. Use option [locale.columnChooserDisplayText](ui.iggridhiding#options:locale.columnChooserDisplayText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserDisplayText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The default column chooser height.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHeight
  ): java.lang.String = js.native
  /**
  	 * The default column chooser height.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideOnClick
  ): scala.Boolean = js.native
  /**
  	 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to hide column. Use option [locale.columnChooserHideText](ui.iggridhiding#options:locale.columnChooserHideText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserHideText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the column chooser changes its position.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserMoving
  ): ColumnChooserMovingEvent = js.native
  /**
  	 * Event fired every time the column chooser changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserMoving,
    optionValue: ColumnChooserMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpened
  ): ColumnChooserOpenedEvent = js.native
  /**
  	 * Event fired after the column chooser is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpened,
    optionValue: ColumnChooserOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the column chooser is opened.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpening
  ): ColumnChooserOpeningEvent = js.native
  /**
  	 * Event fired before the column chooser is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserOpening,
    optionValue: ColumnChooserOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserResetButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text label for reset button. Use option [locale.columnChooserResetButtonLabel](ui.iggridhiding#options:locale.columnChooserResetButtonLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserResetButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserShowText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the column chooser to show column. Use option [locale.columnChooserShowText](ui.iggridhiding#options:locale.columnChooserShowText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserShowText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The default column chooser width.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserWidth
  ): java.lang.String = js.native
  /**
  	 * The default column chooser width.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnChooserWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the hiding has been executed and results are rendered.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidden
  ): ColumnHiddenEvent = js.native
  /**
  	 * Event fired after the hiding has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidden,
    optionValue: ColumnHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHideText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text used in the drop down tools menu(Feature Chooser) to hide a column. Use option [locale.columnHideText](ui.iggridhiding#options:locale.columnHideText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHideText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHiding
  ): ColumnHidingEvent = js.native
  /**
  	 * Event fired when trying to hide all columns in fixed or unfixed area.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidingRefused
  ): ColumnHidingRefusedEvent = js.native
  /**
  	 * Event fired when trying to hide all columns in fixed or unfixed area.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHidingRefused,
    optionValue: ColumnHidingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnHiding,
    optionValue: ColumnHidingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridHidingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies hiding options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridHidingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired before a showing operation is executed.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowing
  ): ColumnShowingEvent = js.native
  /**
  	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowingRefused
  ): ColumnShowingRefusedEvent = js.native
  /**
  	 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowingRefused,
    optionValue: ColumnShowingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a showing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShowing,
    optionValue: ColumnShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the showing has been executed and results are rendered.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShown
  ): ColumnShownEvent = js.native
  /**
  	 * Event fired after the showing has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnShown,
    optionValue: ColumnShownEvent
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The duration of the dropdown animation in milliseconds.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration
  ): scala.Double = js.native
  /**
  	 * The duration of the dropdown animation in milliseconds.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dropDownAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width in pixels of the hidden column indicator in the header.
  	 *
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorHeaderWidth
  ): scala.Double = js.native
  /**
  	 * The width in pixels of the hidden column indicator in the header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorHeaderWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorTooltipText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * The text displayed in the tooltip of the hidden column indicator. Use option [locale.hiddenColumnIndicatorTooltipText](ui.iggridhiding#options:locale.hiddenColumnIndicatorTooltipText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hiddenColumnIndicatorTooltipText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridHidingLocale = js.native
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridHidingLocale
  ): scala.Unit = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiColumnHiding
  ): MultiColumnHidingEvent = js.native
  /**
  	 * Event fired before a hiding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridHiding(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multiColumnHiding,
    optionValue: MultiColumnHidingEvent
  ): scala.Unit = js.native
  def igTreeGridHiding(options: IgTreeGridHiding): JQuery = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_hideColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn, column: js.Object): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_hideColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_hideColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumnChooser): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_hideMultiColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideMultiColumns, columns: js.Array[_]): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_hideMultiColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideMultiColumns,
    columns: js.Array[_],
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_isToRenderButtonReset(methodName: igniteDashUiLib.igniteDashUiLibStrings.isToRenderButtonReset): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridHiding): JQuery = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_removeColumnChooserResetButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeColumnChooserResetButton): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_renderColumnChooserResetButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderColumnChooserResetButton): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_resetHidingColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.resetHidingColumnChooser): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_showColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn, column: js.Object): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_showColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_showColumnChooser(methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumnChooser): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_showMultiColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.showMultiColumns, columns: js.Array[_]): scala.Unit = js.native
  @JSName("igTreeGridHiding")
  def igTreeGridHiding_showMultiColumns(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showMultiColumns,
    columns: js.Array[_],
    callback: js.Function
  ): scala.Unit = js.native
  def igTreeGridMultiColumnHeaders(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Event fired after the group collapsing has been executed and results are rendered.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsed
  ): GroupCollapsedEvent = js.native
  /**
  	 * Event fired after the group collapsing has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsed,
    optionValue: GroupCollapsedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a group collapsing operation is executed.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsing
  ): GroupCollapsingEvent = js.native
  /**
  	 * Event fired before a group collapsing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupCollapsing,
    optionValue: GroupCollapsingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the group expanding has been executed and results are rendered.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanded
  ): GroupExpandedEvent = js.native
  /**
  	 * Event fired after the group expanding has been executed and results are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanded,
    optionValue: GroupExpandedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a group expanding operation is executed.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanding
  ): GroupExpandingEvent = js.native
  /**
  	 * Event fired before a group expanding operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.groupExpanding,
    optionValue: GroupExpandingEvent
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridMultiColumnHeaders(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridMultiColumnHeaders(options: IgTreeGridMultiColumnHeaders): JQuery = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_collapseGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_collapseGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_expandGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.expandGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_expandGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_getMultiColumnHeaders(methodName: igniteDashUiLib.igniteDashUiLibStrings.getMultiColumnHeaders): js.Array[_] = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    options: IgTreeGridMultiColumnHeaders
  ): JQuery = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_toggleGroup(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleGroup, groupKey: java.lang.String): scala.Unit = js.native
  @JSName("igTreeGridMultiColumnHeaders")
  def igTreeGridMultiColumnHeaders_toggleGroup(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleGroup,
    groupKey: java.lang.String,
    callback: js.Function
  ): scala.Unit = js.native
  def igTreeGridPaging(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.breadcrumbDelimiter
  ): java.lang.String = js.native
  /**
  	 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.breadcrumbDelimiter,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.breadcrumbKey
  ): java.lang.String = js.native
  /**
  	 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.breadcrumbKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
  	 * Use option [locale.contextRowLoadingText](ui.igtreegridpaging#options:locale.contextRowLoadingText)
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowLoadingText
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
  	 * Use option [locale.contextRowLoadingText](ui.igtreegridpaging#options:locale.contextRowLoadingText)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowLoadingText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowMode
  ): java.lang.String = js.native
  /**
  	 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired context row content is rendered.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRendered
  ): ContextRowRenderedEvent = js.native
  /**
  	 * Event fired context row content is rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRendered,
    optionValue: ContextRowRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before rendering context row content.
  	 * Return false in order to cancel this event.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRendering
  ): ContextRowRenderingEvent = js.native
  /**
  	 * Event fired before rendering context row content.
  	 * Return false in order to cancel this event.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRendering,
    optionValue: ContextRowRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
  	 * Use option [locale.contextRowRootText](ui.igtreegridpaging#options:locale.contextRowRootText)
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRootText
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
  	 * Use option [locale.contextRowRootText](ui.igtreegridpaging#options:locale.contextRowRootText)
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.contextRowRootText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownLeadingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Leading label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownLeadingLabel](ui.iggridpaging#options:locale.currentPageDropDownLeadingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownLeadingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page index drop down. Use option [locale.currentPageDropDownTooltip](ui.iggridpaging#options:locale.currentPageDropDownTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTrailingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing label text for the drop down from where the page index can be switched. Use option [locale.currentPageDropDownTrailingLabel](ui.iggridpaging#options:locale.currentPageDropDownTrailingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageDropDownTrailingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Current page index that's bound in the data source and rendered in the UI.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageIndex
  ): scala.Double = js.native
  /**
  	 * Current page index that's bound in the data source and rendered in the UI.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.currentPageIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Drop down width for the page size and page index drop downs.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultDropDownWidth
  ): scala.Double = js.native
  /**
  	 * Drop down width for the page size and page index drop downs.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultDropDownWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayOnPageChanged
  ): scala.Double = js.native
  /**
  	 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delayOnPageChanged,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the first page label. Use option [locale.firstPageLabelText](ui.iggridpaging#options:locale.firstPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the first page button. Use option [locale.firstPageTooltip](ui.iggridpaging#options:locale.firstPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the last page label. Use option [locale.lastPageLabelText](ui.iggridpaging#options:locale.lastPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the last page button. Use option [locale.lastPageTooltip](ui.iggridpaging#options:locale.lastPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lastPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgTreeGridPagingLocale = js.native
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgTreeGridPagingLocale
  ): scala.Unit = js.native
  /**
  	 * Sets gets paging mode.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Sets gets paging mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the next page label. Use option [locale.nextPageLabelText](ui.iggridpaging#options:locale.nextPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the next page button. Use option [locale.nextPageTooltip](ui.iggridpaging#options:locale.nextPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.nextPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageCountLimit
  ): scala.Double = js.native
  /**
  	 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageCountLimit,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after the page index is changed , but before grid data rebinds
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanged
  ): PageIndexChangedEvent = js.native
  /**
  	 * Event fired after the page index is changed , but before grid data rebinds
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanged,
    optionValue: PageIndexChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the page index is changed.
  	 * Return false in order to cancel page index changing.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanging
  ): PageIndexChangingEvent = js.native
  /**
  	 * Event fired before the page index is changed.
  	 * Return false in order to cancel page index changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexChanging,
    optionValue: PageIndexChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageIndexUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of records loaded and displayed per page.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSize
  ): scala.Double = js.native
  /**
  	 * Event fired after the page size is changed from the page size dropdown.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanged
  ): PageSizeChangedEvent = js.native
  /**
  	 * Event fired after the page size is changed from the page size dropdown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanged,
    optionValue: PageSizeChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the page size is about to be changed from the page size dropdown.
  	 * Return false in order to cancel page size changing.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanging
  ): PageSizeChangingEvent = js.native
  /**
  	 * Event fired when the page size is about to be changed from the page size dropdown.
  	 * Return false in order to cancel page size changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeChanging,
    optionValue: PageSizeChangingEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownLabel](ui.iggridpaging#options:locale.pageSizeDropDownLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLocation
  ): java.lang.String = js.native
  /**
  	 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownLocation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the page size drop down. Use option [locale.pageSizeDropDownTooltip](ui.iggridpaging#options:locale.pageSizeDropDownTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTrailingLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
  	 * Use option [locale.pageSizeDropDownTrailingLabel](ui.iggridpaging#options:locale.pageSizeDropDownTrailingLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeDropDownTrailingLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeList
  ): js.Any = js.native
  /**
  	 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeList,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeUrlKey
  ): java.lang.String = js.native
  /**
  	 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSizeUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Number of records loaded and displayed per page.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageSize,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
  	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageTooltipFormat
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
  	 * Use option [locale.pageTooltipFormat](ui.iggridpaging#options:locale.pageTooltipFormat).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pageTooltipFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
  	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
  	 * Use option [locale.pagerRecordsLabelTemplate](ui.iggridpaging#options:locale.pagerRecordsLabelTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the pager records label. Use option [locale.pagerRecordsLabelTooltip](ui.iggridpaging#options:locale.pagerRecordsLabelTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRecordsLabelTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the pager footer is rendered
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendered
  ): PagerRenderedEvent = js.native
  /**
  	 * Event fired after the pager footer is rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendered,
    optionValue: PagerRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the pager footer is rendered (the whole area below the grid records).
  	 *  Event fired after the page size is changed from the page size dropdown.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendering
  ): PagerRenderingEvent = js.native
  /**
  	 * Event fired before the pager footer is rendered (the whole area below the grid records).
  	 *  Event fired after the page size is changed from the page size dropdown.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pagerRendering,
    optionValue: PagerRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables/disables paging persistence between states.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables paging persistence between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageLabelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Text for the previous page label. Use option [locale.prevPageLabelText](ui.iggridpaging#options:locale.prevPageLabelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageLabelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Tooltip text for the previous page button. Use option [locale.prevPageTooltip](ui.iggridpaging#options:locale.prevPageTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.prevPageTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey
  ): java.lang.String = js.native
  /**
  	 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.recordCountKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderContextRowFunc
  ): js.Function | java.lang.String = js.native
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderContextRowFunc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.renderContextRowFunc,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to render the first and last page navigation buttons.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFirstLastPages
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to render the first and last page navigation buttons.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFirstLastPages,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPageSizeDropDown
  ): scala.Boolean = js.native
  /**
  	 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPageSizeDropDown,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to show summary label for the currently rendered records or not.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPagerRecordsLabel
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to show summary label for the currently rendered records or not.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPagerRecordsLabel,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Option specifying whether to render the previous and next page navigation buttons.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPrevNextPages
  ): scala.Boolean = js.native
  /**
  	 * Option specifying whether to render the previous and next page navigation buttons.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showPrevNextPages,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
  	 *
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visiblePageCount
  ): scala.Double = js.native
  /**
  	 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridPaging(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visiblePageCount,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igTreeGridPaging(options: IgTreeGridPaging): JQuery = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_getContextRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContextRow): js.Object = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_getContextRowTextArea(methodName: igniteDashUiLib.igniteDashUiLibStrings.getContextRowTextArea): js.Object = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridPaging): JQuery = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_pageIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageIndex): scala.Double = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_pageIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageIndex, index: scala.Double): scala.Double = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_pageSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageSize): scala.Double = js.native
  @JSName("igTreeGridPaging")
  def igTreeGridPaging_pageSize(methodName: igniteDashUiLib.igniteDashUiLibStrings.pageSize, size: scala.Double): scala.Double = js.native
  def igTreeGridResizing(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Resize the column to the size of the longest currently visible cell value.
  	 *
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDoubleClickToResize
  ): scala.Boolean = js.native
  /**
  	 * Resize the column to the size of the longest currently visible cell value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowDoubleClickToResize,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after the resizing has been executed and results are rendered
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResized
  ): ColumnResizedEvent = js.native
  /**
  	 * Event fired after the resizing has been executed and results are rendered
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResized,
    optionValue: ColumnResizedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a resizing operation is executed.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizing
  ): ColumnResizingEvent = js.native
  /**
  	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizingRefused
  ): ColumnResizingRefusedEvent = js.native
  /**
  	 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizingRefused,
    optionValue: ColumnResizingRefusedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a resizing operation is executed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnResizing,
    optionValue: ColumnResizingEvent
  ): scala.Unit = js.native
  /**
  	 * A list of column settings that specifies resizing options on a per column basis.
  	 *
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridResizingColumnSetting] = js.native
  /**
  	 * A list of column settings that specifies resizing options on a per column basis.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridResizingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
  	 *
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferredResizing
  ): scala.Boolean = js.native
  /**
  	 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deferredResizing,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
  	 *
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.handleThreshold
  ): scala.Double = js.native
  /**
  	 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.handleThreshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridResizing(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridResizing(options: IgTreeGridResizing): JQuery = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridResizing): JQuery = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_resize(methodName: igniteDashUiLib.igniteDashUiLibStrings.resize, column: js.Object): scala.Unit = js.native
  @JSName("igTreeGridResizing")
  def igTreeGridResizing_resize(methodName: igniteDashUiLib.igniteDashUiLibStrings.resize, column: js.Object, width: js.Object): scala.Unit = js.native
  def igTreeGridRowSelectors(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxMode
  ): java.lang.String = js.native
  /**
  	 * The type of checkboxes rendered in the row selector. Can be set only at initialization.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row selector checkbox had changed state.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanged
  ): CheckBoxStateChangedEvent = js.native
  /**
  	 * Event fired after a row selector checkbox had changed state.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanged,
    optionValue: CheckBoxStateChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when a row selector checkbox is changing.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanging
  ): CheckBoxStateChangingEvent = js.native
  /**
  	 * Event fired when a row selector checkbox is changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.checkBoxStateChanging,
    optionValue: CheckBoxStateChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom template for "deselect all" overlay with paging
  	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deselectAllForPagingTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for "deselect all" overlay with paging
  	 * Element with attribute data-rs-deselect-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deselectAllForPagingTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Determines whether the row selectors column should contain checkboxes
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableCheckBoxes
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the row selectors column should contain checkboxes
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableCheckBoxes,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Determines whether the row selectors column should contain row numbering
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRowNumbering
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the row selectors column should contain row numbering
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableRowNumbering,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableSelectAllForPaging
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableSelectAllForPaging,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridRowSelectorsLocale = js.native
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridRowSelectorsLocale
  ): scala.Unit = js.native
  /**
  	 * Determines whether the selection feature is required for the row selectors. If set to "false"
  	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
  	 * not available.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requireSelection
  ): scala.Boolean = js.native
  /**
  	 * Determines whether the selection feature is required for the row selectors. If set to "false"
  	 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
  	 * not available.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requireSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The seed to be added to the default numbering
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowNumberingSeed
  ): scala.Double = js.native
  /**
  	 * The seed to be added to the default numbering
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowNumberingSeed,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row selector is clicked.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorClicked
  ): RowSelectorClickedEvent = js.native
  /**
  	 * Event fired after a row selector is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorClicked,
    optionValue: RowSelectorClickedEvent
  ): scala.Unit = js.native
  /**
  	 * Defines width of the row selector`s column in pixels or percentage.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Defines width of the row selector`s column in pixels or percentage.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorColumnWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Determines row numbering format.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorNumberingMode
  ): java.lang.String = js.native
  /**
  	 * Determines row numbering format.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectorNumberingMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Custom template for "select all" overlay with paging
  	 * Element with attribute data-rs-select-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectAllForPagingTemplate
  ): java.lang.String = js.native
  /**
  	 * Custom template for "select all" overlay with paging
  	 * Element with attribute data-rs-select-all is used for sellecting all the records
  	 * Element with attribute data-rs-close-all is used for closing the overlay
  	 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
  	 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.selectAllForPagingTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
  	 *
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCheckBoxesOnFocus
  ): scala.Boolean = js.native
  /**
  	 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridRowSelectors(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showCheckBoxesOnFocus,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridRowSelectors(options: IgTreeGridRowSelectors): JQuery = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_changeCheckState(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.changeCheckState,
    index: scala.Double,
    toCheck: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_changeCheckStateById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.changeCheckStateById,
    rowId: js.Object,
    toCheck: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_checkStateById(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkStateById, rowId: js.Object): java.lang.String = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_checkedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkedRows): js.Array[_] = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridRowSelectors): JQuery = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_partiallyCheckedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.partiallyCheckedRows): js.Array[_] = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_toggleCheckState(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleCheckState, index: scala.Double): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_toggleCheckStateById(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleCheckStateById, rowId: js.Object): scala.Unit = js.native
  @JSName("igTreeGridRowSelectors")
  def igTreeGridRowSelectors_uncheckedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.uncheckedRows): js.Array[_] = js.native
  def igTreeGridSelection(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activation
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activation,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after a cell becomes active (focus style applied).
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged
  ): ActiveCellChangedEvent = js.native
  /**
  	 * Event fired after a cell becomes active (focus style applied).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanged,
    optionValue: ActiveCellChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a cell becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active cell changing.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanging
  ): ActiveCellChangingEvent = js.native
  /**
  	 * Event fired before a cell becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active cell changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeCellChanging,
    optionValue: ActiveCellChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row becomes active (focus style applied).
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanged
  ): ActiveRowChangedEvent = js.native
  /**
  	 * Event fired after a row becomes active (focus style applied).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanged,
    optionValue: ActiveRowChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a row becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active row changing.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanging
  ): ActiveRowChangingEvent = js.native
  /**
  	 * Event fired before a row becomes active (focus style applied) (cancellable).
  	 * Return false in order to cancel active row changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.activeRowChanging,
    optionValue: ActiveRowChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowMultipleRangeSelection
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowMultipleRangeSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell(s) are selected.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanged
  ): CellSelectionChangedEvent = js.native
  /**
  	 * Event fired after cell(s) are selected.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanged,
    optionValue: CellSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell(s) are about to be selected (cancellable).
  	 * Return false in order to cancel cell selection changing.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanging
  ): CellSelectionChangingEvent = js.native
  /**
  	 * Event fired before cell(s) are about to be selected (cancellable).
  	 * Return false in order to cancel cell selection changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cellSelectionChanging,
    optionValue: CellSelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * Defines type of the selection.
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Defines type of the selection.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseDragSelect
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mouseDragSelect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleCellSelectOnClick
  ): scala.Boolean = js.native
  /**
  	 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleCellSelectOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables / Disables multiple selection of cells and rows - depending on the mode
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleSelection
  ): scala.Boolean = js.native
  /**
  	 * Enables / Disables multiple selection of cells and rows - depending on the mode
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleSelection,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables / disables selection persistance between states.
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables / disables selection persistance between states.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired after row(s) are selected.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanged
  ): RowSelectionChangedEvent = js.native
  /**
  	 * Event fired after row(s) are selected.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanged,
    optionValue: RowSelectionChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row(s) are about to be selected (cancellable).
  	 * Return false in order to cancel selection changing.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanging
  ): RowSelectionChangingEvent = js.native
  /**
  	 * Event fired before row(s) are about to be selected (cancellable).
  	 * Return false in order to cancel selection changing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowSelectionChanging,
    optionValue: RowSelectionChangingEvent
  ): scala.Unit = js.native
  /**
  	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.skipChildren
  ): scala.Boolean = js.native
  /**
  	 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.skipChildren,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.touchDragSelect
  ): scala.Boolean = js.native
  /**
  	 * Deprecated="true" Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.touchDragSelect,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
  	 *
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround
  ): scala.Boolean = js.native
  /**
  	 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSelection(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridSelection(options: IgTreeGridSelection): JQuery = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_activeCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeCell): js.Object = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_activeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeRow): js.Object = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_clearSelection(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearSelection): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_deselectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCell,
    row: scala.Double,
    col: scala.Double
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_deselectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCell,
    row: scala.Double,
    col: scala.Double,
    isFixed: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_deselectCellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectCellById,
    id: js.Object,
    colKey: java.lang.String
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_deselectRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectRow, index: scala.Double): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_deselectRowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselectRowById, id: js.Object): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridSelection): JQuery = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCell,
    row: scala.Double,
    col: scala.Double
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCell,
    row: scala.Double,
    col: scala.Double,
    isFixed: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectCellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.selectCellById,
    id: js.Object,
    colKey: java.lang.String
  ): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectRow, index: scala.Double): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectRowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectRowById, id: js.Object): scala.Unit = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectedCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCell): js.Object = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectedCells(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCells): js.Array[_] = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectedRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRow): js.Object = js.native
  @JSName("igTreeGridSelection")
  def igTreeGridSelection_selectedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRows): js.Array[_] = js.native
  def igTreeGridSorting(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Defines local or remote sorting operations.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`
  ): java.lang.String = js.native
  /**
  	 * Defines local or remote sorting operations.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.`type`,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applySortedColumnCss
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.applySortedColumnCss,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive
  ): scala.Boolean = js.native
  /**
  	 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.caseSensitive,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridSortingColumnSetting] = js.native
  /**
  	 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridSortingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired after the column has already been sorted and data - re-rendered.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorted
  ): ColumnSortedEvent = js.native
  /**
  	 * Event fired after the column has already been sorted and data - re-rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorted,
    optionValue: ColumnSortedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before sorting is invoked for a certain column.
  	 * Return false in order to cancel column sorting.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorting
  ): ColumnSortingEvent = js.native
  /**
  	 * Event fired before sorting is invoked for a certain column.
  	 * Return false in order to cancel column sorting.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSorting,
    optionValue: ColumnSortingEvent
  ): scala.Unit = js.native
  /**
  	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customSortFunction
  ): js.Function = js.native
  /**
  	 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.customSortFunction,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortAsc](ui.iggridsorting#options:locale.featureChooserSortAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
  	 * Use option [locale.featureChooserSortDesc](ui.iggridsorting#options:locale.featureChooserSortDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserSortDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the text of the feature chooser sorting button.
  	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the text of the feature chooser sorting button.
  	 * Use option [locale.featureChooserText](ui.iggridsorting#options:locale.featureChooserText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.featureChooserText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection
  ): java.lang.String = js.native
  /**
  	 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.firstSortDirection,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specifies from which data bound level to be applied sorting - 0 is the first level
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fromLevel
  ): scala.Double = js.native
  /**
  	 * Specifies from which data bound level to be applied sorting - 0 is the first level
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fromLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgGridSortingLocale = js.native
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgGridSortingLocale
  ): scala.Unit = js.native
  /**
  	 * Gets time of milliseconds for animation duration to show/hide modal dialog.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets time of milliseconds for animation duration to show/hide modal dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when button Apply in modal dialog is clicked
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick
  ): ModalDialogButtonApplyClickEvent = js.native
  /**
  	 * Event fired when button Apply in modal dialog is clicked
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyClick,
    optionValue: ModalDialogButtonApplyClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which apply changes in modal dialog.
  	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which apply changes in modal dialog.
  	 * Use option [locale.modalDialogButtonApplyText](ui.iggridsorting#options:locale.modalDialogButtonApplyText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonApplyText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
  	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
  	 * Use option [locale.modalDialogButtonCancelText](ui.iggridsorting#options:locale.modalDialogButtonCancelText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonCancelText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when the button to reset sorting is clicked.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick
  ): ModalDialogButtonResetClickEvent = js.native
  /**
  	 * Event fired when the button to reset sorting is clicked.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonResetClick,
    optionValue: ModalDialogButtonResetClickEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when button to unsort column is clicked in modal dialog
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonUnsortClick
  ): ModalDialogButtonUnsortClickEvent = js.native
  /**
  	 * Event fired when button to unsort column is clicked in modal dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogButtonUnsortClick,
    optionValue: ModalDialogButtonUnsortClickEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each ascending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each ascending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonAsc](ui.iggridsorting#options:locale.modalDialogCaptionButtonAsc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonAsc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for each descending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for each descending sorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonDesc](ui.iggridsorting#options:locale.modalDialogCaptionButtonDesc).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonDesc,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption for unsort button in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUnsort
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption for unsort button in multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionButtonUnsort](ui.iggridsorting#options:locale.modalDialogCaptionButtonUnsort).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionButtonUnsort,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets caption text for multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets caption text for multiple sorting dialog.
  	 * Use option [locale.modalDialogCaptionText](ui.iggridsorting#options:locale.modalDialogCaptionText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogCaptionText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed
  ): ModalDialogClosedEvent = js.native
  /**
  	 * Event fired after the modal dialog has been closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosed,
    optionValue: ModalDialogClosedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing
  ): ModalDialogClosingEvent = js.native
  /**
  	 * Event fired before the modal dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogClosing,
    optionValue: ModalDialogClosingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered
  ): ModalDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendered,
    optionValue: ModalDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering
  ): ModalDialogContentsRenderingEvent = js.native
  /**
  	 * Event fired before the contents of the modal dialog are rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogContentsRendering,
    optionValue: ModalDialogContentsRenderingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets height of multiple sorting dialog.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets height of multiple sorting dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving
  ): ModalDialogMovingEvent = js.native
  /**
  	 * Event fired every time the modal dialog changes its position.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogMoving,
    optionValue: ModalDialogMovingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened
  ): ModalDialogOpenedEvent = js.native
  /**
  	 * Event fired after the modal dialog is already opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpened,
    optionValue: ModalDialogOpenedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening
  ): ModalDialogOpeningEvent = js.native
  /**
  	 * Event fired before the modal dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogOpening,
    optionValue: ModalDialogOpeningEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets reset button text in multiple sorting dialog.
  	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogResetButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets reset button text in multiple sorting dialog.
  	 * Use option [locale.modalDialogResetButton](ui.iggridsorting#options:locale.modalDialogResetButton).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogResetButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets sortby button text for each unsorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortByButtonText
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets sortby button text for each unsorted column in multiple sorting dialog.
  	 * Use option [locale.modalDialogSortByButtonText](ui.iggridsorting#options:locale.modalDialogSortByButtonText).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortByButtonText,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortClick
  ): ModalDialogSortClickEvent = js.native
  /**
  	 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortClick,
    optionValue: ModalDialogSortClickEvent
  ): scala.Unit = js.native
  /**
  	 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortOnClick
  ): scala.Boolean = js.native
  /**
  	 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortOnClick,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortingChanged
  ): ModalDialogSortingChangedEvent = js.native
  /**
  	 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogSortingChanged,
    optionValue: ModalDialogSortingChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Gets width of multiple sorting dialog.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets width of multiple sorting dialog.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.modalDialogWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Defines single column sorting or multiple column sorting.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): java.lang.String = js.native
  /**
  	 * Defines single column sorting or multiple column sorting.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Enables/disables sorting persistence when the grid is rebound.
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist
  ): scala.Boolean = js.native
  /**
  	 * Enables/disables sorting persistence when the grid is rebound.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.persist,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKey
  ): java.lang.String = js.native
  /**
  	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyAscValue
  ): java.lang.String = js.native
  /**
  	 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyAscValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyDescValue
  ): java.lang.String = js.native
  /**
  	 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKeyDescValue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortUrlKey,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Controls containment behavior of multiple sorting dialog.
  	 *
  	 * owner  The multi sorting dialog will be draggable only in the grid area
  	 * window  The multi sorting dialog will be draggable in the whole window area
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortingDialogContainment
  ): java.lang.String = js.native
  /**
  	 * Controls containment behavior of multiple sorting dialog.
  	 *
  	 * owner  The multi sorting dialog will be draggable only in the grid area
  	 * window  The multi sorting dialog will be draggable in the whole window area
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sortingDialogContainment,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
  	 *
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLevel
  ): scala.Double = js.native
  /**
  	 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.toLevel,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
  	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unsortedColumnTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
  	 * Use option [locale.unsortedColumnTooltip](ui.iggridsorting#options:locale.unsortedColumnTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridSorting(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.unsortedColumnTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridSorting(options: IgTreeGridSorting): JQuery = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_clearSorting(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearSorting): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_closeMultipleSortingDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.closeMultipleSortingDialog): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_isColumnSorted(methodName: igniteDashUiLib.igniteDashUiLibStrings.isColumnSorted, columnKey: java.lang.String): scala.Boolean = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_openMultipleSortingDialog(methodName: igniteDashUiLib.igniteDashUiLibStrings.openMultipleSortingDialog): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridSorting): JQuery = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_removeDialogClearButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeDialogClearButton): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_renderMultipleSortingDialogContent(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.renderMultipleSortingDialogContent,
    isToCallEvents: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_sortColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.sortColumn,
    index: js.Object,
    direction: js.Object,
    header: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_sortMultiple(methodName: igniteDashUiLib.igniteDashUiLibStrings.sortMultiple): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_sortMultiple(methodName: igniteDashUiLib.igniteDashUiLibStrings.sortMultiple, exprs: js.Array[_]): scala.Unit = js.native
  @JSName("igTreeGridSorting")
  def igTreeGridSorting_unsortColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.unsortColumn,
    index: js.Object,
    header: js.Object
  ): scala.Unit = js.native
  def igTreeGridTooltips(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): IgGridTooltipsColumnSettings = js.native
  /**
  	 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: IgGridTooltipsColumnSettings
  ): scala.Unit = js.native
  /**
  	 * The left position of the tooltip relative to the mouse cursor
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorLeftOffset
  ): scala.Double = js.native
  /**
  	 * Sets the left position of the tooltip relative to the mouse cursor
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorLeftOffset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The top position of the tooltip relative to the mouse cursor
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorTopOffset
  ): scala.Double = js.native
  /**
  	 * Sets the top position of the tooltip relative to the mouse cursor
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cursorTopOffset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The time tooltip fades in and out when showing/hiding
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fadeTimespan
  ): scala.Double = js.native
  /**
  	 * Sets the time tooltip fades in and out when showing/hiding
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fadeTimespan,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
  	 * cursor gets outside of the cell.
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideDelay
  ): scala.Double = js.native
  /**
  	 * Type="integer" The time in milliseconds after which tooltip hides when mouse
  	 * cursor gets outside of the cell.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hideDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * The time in milliseconds after which tooltip will show when
  	 * mouse cursor is hovered over a cell.
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDelay
  ): scala.Double = js.native
  /**
  	 * The time in milliseconds after which tooltip will show when
  	 * mouse cursor is hovered over a cell.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Controls the tooltip's style
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.style
  ): java.lang.String = js.native
  /**
  	 * Controls the tooltip's style
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.style,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden
  ): TooltipHiddenEvent = js.native
  /**
  	 * Event fired after a tooltip is hidden
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHidden,
    optionValue: TooltipHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding
  ): TooltipHidingEvent = js.native
  /**
  	 * Event fired when the mouse has left an element and the tooltip is about to hide
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipHiding,
    optionValue: TooltipHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing
  ): TooltipShowingEvent = js.native
  /**
  	 * Event fired when the mouse has hovered on an element long enough to display a tooltip
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShowing,
    optionValue: TooltipShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown
  ): TooltipShownEvent = js.native
  /**
  	 * Event fired after a tooltip is shown
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tooltipShown,
    optionValue: TooltipShownEvent
  ): scala.Unit = js.native
  /**
  	 * Determines the tooltip visibility option
  	 *
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibility
  ): java.lang.String = js.native
  /**
  	 * Determines the tooltip visibility option
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridTooltips(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.visibility,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridTooltips(options: IgTreeGridTooltips): JQuery = js.native
  @JSName("igTreeGridTooltips")
  def igTreeGridTooltips_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridTooltips")
  def igTreeGridTooltips_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igTreeGridTooltips")
  def igTreeGridTooltips_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridTooltips")
  def igTreeGridTooltips_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridTooltips")
  def igTreeGridTooltips_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridTooltips): JQuery = js.native
  def igTreeGridUpdating(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Gets the label of the add child button in touch environment. Use option [locale.addChildButtonLabel](ui.igtreegridupdating#options:locale.addChildButtonLabel).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addChildButtonLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets the label of the add child button in touch environment. Use option [locale.addChildButtonLabel](ui.igtreegridupdating#options:locale.addChildButtonLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addChildButtonLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Gets the add child tooltip text. Use option [locale.enableAddChild](ui.igtreegridupdating#options:locale.enableAddChild).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addChildTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been deprecated as of the 2017.2 Volume release.
  	 * Sets the add child tooltip text. Use option [locale.enableAddChild](ui.igtreegridupdating#options:locale.enableAddChild).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addChildTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
  	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
  	 * Use option [locale.addRowLabel](ui.iggridupdating#options:locale.addRowLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
  	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
  	 * Use option [locale.addRowTooltip](ui.iggridupdating#options:locale.addRowTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.addRowTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
  	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
  	 * Use option [locale.cancelLabel](ui.iggridupdating#options:locale.cancelLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
  	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
  	 * Use option [locale.cancelTooltip](ui.iggridupdating#options:locale.cancelTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * A list of custom column options that specify editing and validation settings for a specific column.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings
  ): js.Array[IgGridUpdatingColumnSetting] = js.native
  /**
  	 * A list of custom column options that specify editing and validation settings for a specific column.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.columnSettings,
    optionValue: js.Array[IgGridUpdatingColumnSetting]
  ): scala.Unit = js.native
  /**
  	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
  	 * Return false in order to prevent the exception.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataDirty
  ): DataDirtyEvent = js.native
  /**
  	 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
  	 * Return false in order to prevent the exception.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dataDirty,
    optionValue: DataDirtyEvent
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
  	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
  	 * Use option [locale.deleteRowLabel](ui.iggridupdating#options:locale.deleteRowLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
  	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
  	 * Use option [locale.deleteRowTooltip](ui.iggridupdating#options:locale.deleteRowTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.deleteRowTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget
  ): java.lang.String = js.native
  /**
  	 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.dialogWidget,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
  	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneLabel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
  	 * Use option [locale.doneLabel](ui.iggridupdating#options:locale.doneLabel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneLabel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
  	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneTooltip
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
  	 * Use option [locale.doneTooltip](ui.iggridupdating#options:locale.doneTooltip).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.doneTooltip,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnded
  ): EditCellEndedEvent = js.native
  /**
  	 * Event fired after cell editing ends (including when row editing closes editing for a cell).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnded,
    optionValue: EditCellEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
  	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnding
  ): EditCellEndingEvent = js.native
  /**
  	 * Event fired before cell editing ends (including when row editing closes editing for a cell).
  	 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellEnding,
    optionValue: EditCellEndingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarted
  ): EditCellStartedEvent = js.native
  /**
  	 * Event fired after cell editing begins (including when row editing opens editing for a cell).
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarted,
    optionValue: EditCellStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
  	 * Return false in order to cancel editing.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarting
  ): EditCellStartingEvent = js.native
  /**
  	 * Event fired before cell editing begins (including when row editing opens editing for a cell).
  	 * Return false in order to cancel editing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editCellStarting,
    optionValue: EditCellStartingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the edit mode.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editMode
  ): java.lang.String = js.native
  /**
  	 * Sets the edit mode.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editMode,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after row editing ends.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnded
  ): EditRowEndedEvent = js.native
  /**
  	 * Event fired after row editing ends.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnded,
    optionValue: EditRowEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row editing ends.
  	 * Return false in order to prevent the grid from exiting edit mode.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnding
  ): EditRowEndingEvent = js.native
  /**
  	 * Event fired before row editing ends.
  	 * Return false in order to prevent the grid from exiting edit mode.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowEnding,
    optionValue: EditRowEndingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after row editing begins.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarted
  ): EditRowStartedEvent = js.native
  /**
  	 * Event fired after row editing begins.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarted,
    optionValue: EditRowStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before row editing begins.
  	 * Return false in order to cancel editing.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarting
  ): EditRowStartingEvent = js.native
  /**
  	 * Event fired before row editing begins.
  	 * Return false in order to cancel editing.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.editRowStarting,
    optionValue: EditRowStartingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets whether to enable or disable adding children to rows.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddChild
  ): scala.Boolean = js.native
  /**
  	 * Sets whether to enable or disable adding children to rows.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddChild,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddRow
  ): scala.Boolean = js.native
  /**
  	 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableAddRow,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDataDirtyException
  ): scala.Boolean = js.native
  /**
  	 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDataDirtyException,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets if deleting rows through the UI is enabled.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDeleteRow
  ): scala.Boolean = js.native
  /**
  	 * Sets if deleting rows through the UI is enabled.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enableDeleteRow,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excelNavigationMode
  ): scala.Boolean = js.native
  /**
  	 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.excelNavigationMode,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.generatePrimaryKeyValue
  ): GeneratePrimaryKeyValueEvent = js.native
  /**
  	 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.generatePrimaryKeyValue,
    optionValue: GeneratePrimaryKeyValueEvent
  ): scala.Unit = js.native
  /**
  	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalMoveOnEnter
  ): scala.Boolean = js.native
  /**
  	 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.horizontalMoveOnEnter,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit
  ): scala.Boolean = js.native
  /**
  	 * This option is inherited from a parent widget and it's not applicable for the igTreeGrid.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.inherit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgTreeGridUpdatingLocale = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgTreeGridUpdatingLocale
  ): scala.Unit = js.native
  /**
  	 * Event fired after adding a new row.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdded
  ): RowAddedEvent = js.native
  /**
  	 * Event fired after adding a new row.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdded,
    optionValue: RowAddedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before adding a new row.
  	 * Return false in order to cancel the adding of the new row to the data source.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdding
  ): RowAddingEvent = js.native
  /**
  	 * Event fired before adding a new row.
  	 * Return false in order to cancel the adding of the new row to the data source.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowAdding,
    optionValue: RowAddingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after a row is deleted.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleted
  ): RowDeletedEvent = js.native
  /**
  	 * Event fired after a row is deleted.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleted,
    optionValue: RowDeletedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before deleting a row.
  	 * Return false in order to cancel the row's deletion.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleting
  ): RowDeletingEvent = js.native
  /**
  	 * Event fired before deleting a row.
  	 * Return false in order to cancel the row's deletion.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowDeleting,
    optionValue: RowDeletingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is closed.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterClose
  ): RowEditDialogAfterCloseEvent = js.native
  /**
  	 * Event fired after the row edit dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterClose,
    optionValue: RowEditDialogAfterCloseEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is opened.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterOpen
  ): RowEditDialogAfterOpenEvent = js.native
  /**
  	 * Event fired after the row edit dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogAfterOpen,
    optionValue: RowEditDialogAfterOpenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the row edit dialog is closed.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeClose
  ): RowEditDialogBeforeCloseEvent = js.native
  /**
  	 * Event fired before the row edit dialog is closed.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeClose,
    optionValue: RowEditDialogBeforeCloseEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before the row edit dialog is opened.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeOpen
  ): RowEditDialogBeforeOpenEvent = js.native
  /**
  	 * Event fired before the row edit dialog is opened.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogBeforeOpen,
    optionValue: RowEditDialogBeforeOpenEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired after the row edit dialog is rendered.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogContentsRendered
  ): RowEditDialogContentsRenderedEvent = js.native
  /**
  	 * Event fired after the row edit dialog is rendered.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogContentsRendered,
    optionValue: RowEditDialogContentsRenderedEvent
  ): scala.Unit = js.native
  /**
  	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogOptions
  ): IgGridUpdatingRowEditDialogOptions = js.native
  /**
  	 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rowEditDialogOptions,
    optionValue: IgGridUpdatingRowEditDialogOptions
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler
  ): js.Function | java.lang.String = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesErrorHandler,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler
  ): js.Function | java.lang.String = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.saveChangesSuccessHandler,
    optionValue: js.Function
  ): scala.Unit = js.native
  /**
  	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDoneCancelButtons
  ): scala.Boolean = js.native
  /**
  	 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showDoneCancelButtons,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers
  ): java.lang.String | js.Array[_] = js.native
  /**
  	 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startEditTriggers,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance
  ): java.lang.String | scala.Double = js.native
  /**
  	 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.swipeDistance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validation
  ): scala.Boolean = js.native
  /**
  	 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validation,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
  	 *
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround
  ): scala.Boolean = js.native
  /**
  	 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igTreeGridUpdating(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.wrapAround,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igTreeGridUpdating(options: IgTreeGridUpdating): JQuery = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_addChild(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addChild,
    values: js.Object,
    parentId: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_addRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.addRow, values: js.Object): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_deleteRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.deleteRow, rowId: js.Object): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_editorForCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForCell, cell: java.lang.String): js.Object = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_editorForCell(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForCell,
    cell: java.lang.String,
    create: scala.Boolean
  ): js.Object = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_editorForKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.editorForKey, key: java.lang.String): js.Object = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_endEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_endEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit, update: scala.Boolean): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_endEdit(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.endEdit,
    update: scala.Boolean,
    raiseEvents: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_findInvalid(methodName: igniteDashUiLib.igniteDashUiLibStrings.findInvalid): java.lang.String = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_hideAddChildButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideAddChildButton): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_hideDeleteButton(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideDeleteButton): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_isEditing(methodName: igniteDashUiLib.igniteDashUiLibStrings.isEditing): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGridUpdating): JQuery = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_setCellValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setCellValue,
    rowId: js.Object,
    colKey: java.lang.String,
    value: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_showAddChildButtonFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.showAddChildButtonFor, row: js.Object): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_showDeleteButtonFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.showDeleteButtonFor, row: js.Object): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startAddChildFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddChildFor, parentId: js.Object): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startAddChildFor(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddChildFor,
    parentId: js.Object,
    raiseEvents: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startAddRowEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddRowEdit): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startAddRowEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startAddRowEdit, raiseEvents: scala.Boolean): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startEdit(methodName: igniteDashUiLib.igniteDashUiLibStrings.startEdit, rowId: js.Object, column: js.Object): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_startEdit(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.startEdit,
    rowId: js.Object,
    column: js.Object,
    raiseEvents: scala.Boolean
  ): scala.Boolean = js.native
  @JSName("igTreeGridUpdating")
  def igTreeGridUpdating_updateRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateRow, rowId: js.Object, values: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_activeCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeCell): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_activeRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.activeRow): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_allFixedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.allFixedRows): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_allRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.allRows): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_allTransactions(methodName: igniteDashUiLib.igniteDashUiLibStrings.allTransactions): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_autoSizeColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.autoSizeColumns): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_calculateAutoFitColumnWidth(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.calculateAutoFitColumnWidth,
    columnIndex: scala.Double
  ): scala.Double = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_cellAt(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.cellAt,
    x: scala.Double,
    y: scala.Double,
    isFixed: scala.Boolean
  ): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_cellById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.cellById,
    rowId: js.Object,
    columnKey: java.lang.String
  ): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_changeRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeRegional): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_children(methodName: igniteDashUiLib.igniteDashUiLibStrings.children): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_childrenWidgets(methodName: igniteDashUiLib.igniteDashUiLibStrings.childrenWidgets): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_collapseRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseRow, row: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_collapseRow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapseRow,
    row: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_columnByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.columnByKey, key: java.lang.String): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_columnByText(methodName: igniteDashUiLib.igniteDashUiLibStrings.columnByText, text: java.lang.String): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_commit(methodName: igniteDashUiLib.igniteDashUiLibStrings.commit): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_commit(methodName: igniteDashUiLib.igniteDashUiLibStrings.commit, rowId: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_dataSourceObject(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataSourceObject, dataSource: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_expandRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.expandRow, row: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_expandRow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandRow,
    row: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_findRecordByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.findRecordByKey, key: js.Object): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedBodyContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedBodyContainer): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedContainer): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedFooterContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedFooterContainer): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedFootersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedFootersTable): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedHeaderContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeaderContainer): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedHeadersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedHeadersTable): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedRowAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedRowAt, i: scala.Double): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedRows): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixedTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixedTable): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_fixingDirection(methodName: igniteDashUiLib.igniteDashUiLibStrings.fixingDirection): java.lang.String = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_footersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.footersTable): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getCellText(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getCellText,
    rowId: js.Object,
    colKey: java.lang.String
  ): java.lang.String = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getCellValue(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getCellValue,
    rowId: js.Object,
    colKey: java.lang.String
  ): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getColumnByTD(methodName: igniteDashUiLib.igniteDashUiLibStrings.getColumnByTD, $td: js.Object): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getDetachedRecord(methodName: igniteDashUiLib.igniteDashUiLibStrings.getDetachedRecord, t: js.Object): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getElementInfo(methodName: igniteDashUiLib.igniteDashUiLibStrings.getElementInfo, elem: stdLib.Element): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getUnboundColumnByKey(methodName: igniteDashUiLib.igniteDashUiLibStrings.getUnboundColumnByKey, key: java.lang.String): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getUnboundValues(methodName: igniteDashUiLib.igniteDashUiLibStrings.getUnboundValues, key: java.lang.String): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_getVisibleIndexByKey(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.getVisibleIndexByKey,
    columnKey: java.lang.String,
    includeDataSkip: scala.Boolean
  ): scala.Double = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_hasFixedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFixedColumns): scala.Boolean = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_hasFixedDataSkippedColumns(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasFixedDataSkippedColumns): scala.Boolean = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_hasVerticalScrollbar(methodName: igniteDashUiLib.igniteDashUiLibStrings.hasVerticalScrollbar): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_headersTable(methodName: igniteDashUiLib.igniteDashUiLibStrings.headersTable): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_hideColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.hideColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_immediateChildren(methodName: igniteDashUiLib.igniteDashUiLibStrings.immediateChildren): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_immediateChildrenWidgets(methodName: igniteDashUiLib.igniteDashUiLibStrings.immediateChildrenWidgets): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_isFixedColumn(methodName: igniteDashUiLib.igniteDashUiLibStrings.isFixedColumn, colKey: js.Object): scala.Boolean = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_isGroupHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.isGroupHeader, colKey: java.lang.String): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_moveColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.moveColumn,
    column: js.Object,
    target: js.Object,
    after: scala.Boolean,
    inDom: scala.Boolean,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTreeGrid): JQuery = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_pendingTransactions(methodName: igniteDashUiLib.igniteDashUiLibStrings.pendingTransactions): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_renderMultiColumnHeader(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderMultiColumnHeader, cols: js.Array[_]): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_renderNewChild(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewChild, rec: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_renderNewChild(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewChild,
    rec: js.Object,
    parentId: java.lang.String
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_renderNewRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewRow): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_renderNewRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.renderNewRow, rec: java.lang.String): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_resizeContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.resizeContainer): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rollback(methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback, rowId: js.Object): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rollback(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.rollback,
    rowId: js.Object,
    updateUI: scala.Boolean
  ): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rowAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.rowAt, i: scala.Double): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rowById(methodName: igniteDashUiLib.igniteDashUiLibStrings.rowById, rowId: js.Object): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rowById(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.rowById,
    rowId: js.Object,
    isFixed: scala.Boolean
  ): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_rows(methodName: igniteDashUiLib.igniteDashUiLibStrings.rows): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_saveChanges(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.saveChanges,
    success: js.Function,
    error: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_scrollContainer(methodName: igniteDashUiLib.igniteDashUiLibStrings.scrollContainer): stdLib.Element = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_selectedCell(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCell): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_selectedCells(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedCells): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_selectedRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRow): js.Object = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_selectedRows(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedRows): js.Array[_] = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_setColumnTemplate(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setColumnTemplate,
    col: js.Object,
    tmpl: java.lang.String
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_setColumnTemplate(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setColumnTemplate,
    col: js.Object,
    tmpl: java.lang.String,
    render: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_setUnboundValueByPK(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setUnboundValueByPK,
    col: java.lang.String,
    rowId: java.lang.String,
    `val`: js.Object,
    notToRender: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_setUnboundValues(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.setUnboundValues,
    key: java.lang.String,
    values: js.Array[_],
    removeOldValues: js.Object
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_showColumn(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.showColumn,
    column: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_toggleRow(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleRow, row: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_toggleRow(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleRow,
    row: js.Object,
    callback: js.Function
  ): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_totalRecordsCount(methodName: igniteDashUiLib.igniteDashUiLibStrings.totalRecordsCount): scala.Double = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_transactionsAsString(methodName: igniteDashUiLib.igniteDashUiLibStrings.transactionsAsString): java.lang.String = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_virtualScrollTo(methodName: igniteDashUiLib.igniteDashUiLibStrings.virtualScrollTo, scrollerPosition: js.Object): scala.Unit = js.native
  @JSName("igTreeGrid")
  def igTreeGrid_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  @JSName("igTree")
  def igTree_addNode(methodName: igniteDashUiLib.igniteDashUiLibStrings.addNode, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_addNode(methodName: igniteDashUiLib.igniteDashUiLibStrings.addNode, node: js.Object, parent: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_addNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addNode,
    node: js.Object,
    parent: js.Object,
    nodeIndex: scala.Double
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_applyChangesToNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.applyChangesToNode,
    element: js.Object,
    data: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igTree")
  def igTree_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igTree")
  def igTree_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igTree")
  def igTree_checkNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.checkNode,
    nodeObj: js.Object,
    cascadeDir: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_checkState(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkState, node: js.Object): java.lang.String = js.native
  @JSName("igTree")
  def igTree_checkedNodes(methodName: igniteDashUiLib.igniteDashUiLibStrings.checkedNodes): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_children(methodName: igniteDashUiLib.igniteDashUiLibStrings.children, parent: js.Object): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_childrenByPath(methodName: igniteDashUiLib.igniteDashUiLibStrings.childrenByPath, path: java.lang.String): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_clearSelection(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearSelection): scala.Unit = js.native
  @JSName("igTree")
  def igTree_collapse(methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse, node: java.lang.String): scala.Unit = js.native
  @JSName("igTree")
  def igTree_collapse(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.collapse,
    node: java.lang.String,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_dataBind(methodName: igniteDashUiLib.igniteDashUiLibStrings.dataBind): scala.Unit = js.native
  @JSName("igTree")
  def igTree_deselect(methodName: igniteDashUiLib.igniteDashUiLibStrings.deselect, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igTree")
  def igTree_expand(methodName: igniteDashUiLib.igniteDashUiLibStrings.expand, node: java.lang.String): scala.Unit = js.native
  @JSName("igTree")
  def igTree_expand(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expand,
    node: java.lang.String,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_expandToNode(methodName: igniteDashUiLib.igniteDashUiLibStrings.expandToNode, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_expandToNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.expandToNode,
    node: js.Object,
    toSelect: scala.Boolean
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_findImmediateNodesByText(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.findImmediateNodesByText,
    text: java.lang.String
  ): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_findImmediateNodesByText(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.findImmediateNodesByText,
    text: java.lang.String,
    parent: js.Object
  ): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_findNodesByText(methodName: igniteDashUiLib.igniteDashUiLibStrings.findNodesByText, text: java.lang.String): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_findNodesByText(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.findNodesByText,
    text: java.lang.String,
    parent: js.Object
  ): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_isChecked(methodName: igniteDashUiLib.igniteDashUiLibStrings.isChecked, node: js.Object): scala.Boolean = js.native
  @JSName("igTree")
  def igTree_isExpanded(methodName: igniteDashUiLib.igniteDashUiLibStrings.isExpanded, node: js.Object): scala.Boolean = js.native
  @JSName("igTree")
  def igTree_isSelected(methodName: igniteDashUiLib.igniteDashUiLibStrings.isSelected, node: js.Object): scala.Boolean = js.native
  @JSName("igTree")
  def igTree_nodeByIndex(methodName: igniteDashUiLib.igniteDashUiLibStrings.nodeByIndex, index: scala.Double): js.Object = js.native
  @JSName("igTree")
  def igTree_nodeByIndex(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.nodeByIndex,
    index: scala.Double,
    parent: js.Object
  ): js.Object = js.native
  @JSName("igTree")
  def igTree_nodeByPath(methodName: igniteDashUiLib.igniteDashUiLibStrings.nodeByPath, nodePath: java.lang.String): js.Object = js.native
  @JSName("igTree")
  def igTree_nodeDataFor(methodName: igniteDashUiLib.igniteDashUiLibStrings.nodeDataFor, path: java.lang.String): js.Object = js.native
  @JSName("igTree")
  def igTree_nodeFromElement(methodName: igniteDashUiLib.igniteDashUiLibStrings.nodeFromElement, element: java.lang.String): js.Object = js.native
  @JSName("igTree")
  def igTree_nodesByValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.nodesByValue, value: java.lang.String): js.Object = js.native
  @JSName("igTree")
  def igTree_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igTree")
  def igTree_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igTree")
  def igTree_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgTree): JQuery = js.native
  @JSName("igTree")
  def igTree_parentNode(methodName: igniteDashUiLib.igniteDashUiLibStrings.parentNode, node: js.Object): js.Object = js.native
  @JSName("igTree")
  def igTree_partiallyCheckNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.partiallyCheckNode,
    nodeObj: js.Object,
    cascadeDir: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_partiallyCheckedNodes(methodName: igniteDashUiLib.igniteDashUiLibStrings.partiallyCheckedNodes): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_removeAt(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeAt, path: java.lang.String): scala.Unit = js.native
  @JSName("igTree")
  def igTree_removeNodesByValue(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeNodesByValue, value: java.lang.String): scala.Unit = js.native
  @JSName("igTree")
  def igTree_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_select(methodName: igniteDashUiLib.igniteDashUiLibStrings.select, node: js.Object, event: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_selectedNode(methodName: igniteDashUiLib.igniteDashUiLibStrings.selectedNode): js.Object = js.native
  @JSName("igTree")
  def igTree_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_toggle(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggle, node: js.Object, event: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_toggleCheckstate(methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleCheckstate, node: js.Object): scala.Unit = js.native
  @JSName("igTree")
  def igTree_toggleCheckstate(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.toggleCheckstate,
    node: js.Object,
    event: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_transactionLog(methodName: igniteDashUiLib.igniteDashUiLibStrings.transactionLog): js.Array[_] = js.native
  @JSName("igTree")
  def igTree_uncheckNode(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.uncheckNode,
    nodeObj: js.Object,
    cascadeDir: js.Object
  ): scala.Unit = js.native
  @JSName("igTree")
  def igTree_uncheckedNodes(methodName: igniteDashUiLib.igniteDashUiLibStrings.uncheckedNodes): js.Array[_] = js.native
  def igUpload(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowedExtensions
  ): js.Array[_] = js.native
  /**
  	 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.allowedExtensions,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Get or set whether the file start upload automatically when it is selected. Default is false.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autostartupload
  ): scala.Boolean = js.native
  /**
  	 * Get or set whether the file start upload automatically when it is selected. Default is false.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autostartupload,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelAllClicked
  ): CancelAllClickedEvent = js.native
  /**
  	 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancelAllClicked,
    optionValue: CancelAllClickedEvent
  ): scala.Unit = js.native
  /**
  	 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.controlId
  ): java.lang.String = js.native
  /**
  	 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.controlId,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.css
  ): js.Any = js.native
  /**
  	 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.css,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when AJAX Request to get file size throws error.
  	 * Use option [locale.errorMessageAJAXRequestFileSize](ui.igupload#options:locale.errorMessageAJAXRequestFileSize).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageAJAXRequestFileSize
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when AJAX Request to get file size throws error.
  	 * Use option [locale.errorMessageAJAXRequestFileSize](ui.igupload#options:locale.errorMessageAJAXRequestFileSize).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageAJAXRequestFileSize,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when ajax call to send cancel upload command.
  	 * Use option [locale.errorMessageCancelUpload](ui.igupload#options:locale.errorMessageCancelUpload).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageCancelUpload
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when ajax call to send cancel upload command.
  	 * Use option [locale.errorMessageCancelUpload](ui.igupload#options:locale.errorMessageCancelUpload).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageCancelUpload,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to drop more than 1 file and mode is single.
  	 * Use option [locale.errorMessageDropMultipleFilesWhenSingleModel](ui.igupload#options:locale.errorMessageDropMultipleFilesWhenSingleModel).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageDropMultipleFilesWhenSingleModel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to drop more than 1 file and mode is single.
  	 * Use option [locale.errorMessageDropMultipleFilesWhenSingleModel](ui.igupload#options:locale.errorMessageDropMultipleFilesWhenSingleModel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageDropMultipleFilesWhenSingleModel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when ajax call to get file status throws error.
  	 * Use option [locale.errorMessageGetFileStatus](ui.igupload#options:locale.errorMessageGetFileStatus).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageGetFileStatus
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when ajax call to get file status throws error.
  	 * Use option [locale.errorMessageGetFileStatus](ui.igupload#options:locale.errorMessageGetFileStatus).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageGetFileStatus,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
  	 * Use option [locale.errorMessageMaxFileSizeExceeded](ui.igupload#options:locale.errorMessageMaxFileSizeExceeded).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxFileSizeExceeded
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set message shown when max file size of the uploaded file exceeds the limit.
  	 * Use option [locale.errorMessageMaxFileSizeExceeded](ui.igupload#options:locale.errorMessageMaxFileSizeExceeded).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxFileSizeExceeded,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when maximum simultaneous files is less or equal to 0.
  	 * Use option [locale.errorMessageMaxSimultaneousFiles](ui.igupload#options:locale.errorMessageMaxSimultaneousFiles).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxSimultaneousFiles
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when maximum simultaneous files is less or equal to 0.
  	 * Use option [locale.errorMessageMaxSimultaneousFiles](ui.igupload#options:locale.errorMessageMaxSimultaneousFiles).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxSimultaneousFiles,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when maximum allowed files exceeded.
  	 * Use option [locale.errorMessageMaxUploadedFiles](ui.igupload#options:locale.errorMessageMaxUploadedFiles).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxUploadedFiles
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when maximum allowed files exceeded.
  	 * Use option [locale.errorMessageMaxUploadedFiles](ui.igupload#options:locale.errorMessageMaxUploadedFiles).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageMaxUploadedFiles,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when file is not found.
  	 * Use option [locale.errorMessageNoSuchFile](ui.igupload#options:locale.errorMessageNoSuchFile).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageNoSuchFile
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when file is not found.
  	 * Use option [locale.errorMessageNoSuchFile](ui.igupload#options:locale.errorMessageNoSuchFile).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageNoSuchFile,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *  Get or set error message different from the other messages.
  	 * Use option [locale.errorMessageOther](ui.igupload#options:locale.errorMessageOther).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageOther
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 *  Get or set error message different from the other messages.
  	 * Use option [locale.errorMessageOther](ui.igupload#options:locale.errorMessageOther).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageOther,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to remove non existing file.
  	 * Use option [locale.errorMessageTryToRemoveNonExistingFile](ui.igupload#options:locale.errorMessageTryToRemoveNonExistingFile).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageTryToRemoveNonExistingFile
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to remove non existing file.
  	 * Use option [locale.errorMessageTryToRemoveNonExistingFile](ui.igupload#options:locale.errorMessageTryToRemoveNonExistingFile).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageTryToRemoveNonExistingFile,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to start non existing file.
  	 * Use option [locale.errorMessageTryToStartNonExistingFile](ui.igupload#options:locale.errorMessageTryToStartNonExistingFile).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageTryToStartNonExistingFile
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when trying to start non existing file.
  	 * Use option [locale.errorMessageTryToStartNonExistingFile](ui.igupload#options:locale.errorMessageTryToStartNonExistingFile).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageTryToStartNonExistingFile,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when file extension validation failed.
  	 * Use option [locale.errorMessageValidatingFileExtension](ui.igupload#options:locale.errorMessageValidatingFileExtension).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageValidatingFileExtension
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set error message when file extension validation failed.
  	 * Use option [locale.errorMessageValidatingFileExtension](ui.igupload#options:locale.errorMessageValidatingFileExtension).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessageValidatingFileExtension,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set icon css classes for specified file extension
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileExtensionIcons
  ): IgUploadFileExtensionIcons = js.native
  /**
  	 * Set icon css classes for specified file extension
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileExtensionIcons,
    optionValue: IgUploadFileExtensionIcons
  ): scala.Unit = js.native
  /**
  	 * It is fired when validating file extensions
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileExtensionsValidating
  ): FileExtensionsValidatingEvent = js.native
  /**
  	 * It is fired when validating file extensions
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileExtensionsValidating,
    optionValue: FileExtensionsValidatingEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
  	 * Return false in order to cancel uploading file.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSelected
  ): FileSelectedEvent = js.native
  /**
  	 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
  	 * Return false in order to cancel uploading file.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSelected,
    optionValue: FileSelectedEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
  	 * Return false in order to cancel selecting file.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSelecting
  ): FileSelectingEvent = js.native
  /**
  	 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
  	 * Return false in order to cancel selecting file.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSelecting,
    optionValue: FileSelectingEvent
  ): scala.Unit = js.native
  /**
  	 * The number of digits after the decimal point.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSizeDecimalDisplay
  ): scala.Double = js.native
  /**
  	 * The number of digits after the decimal point.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSizeDecimalDisplay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Get or set file size metrics how to be shown files size.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSizeMetric
  ): js.Any = js.native
  /**
  	 * Get or set file size metrics how to be shown files size.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileSizeMetric,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploadAborted
  ): FileUploadAbortedEvent = js.native
  /**
  	 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploadAborted,
    optionValue: FileUploadAbortedEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the uploaded event. Fired when the file is uploaded
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploaded
  ): FileUploadedEvent = js.native
  /**
  	 * Defines the name of the uploaded event. Fired when the file is uploaded
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploaded,
    optionValue: FileUploadedEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
  	 * Return false in order to cancel uploading file.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploading
  ): FileUploadingEvent = js.native
  /**
  	 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
  	 * Return false in order to cancel uploading file.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fileUploading,
    optionValue: FileUploadingEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for browse button in main container.
  	 * Use option [locale.labelAddButton](ui.igupload#options:locale.labelAddButton).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelAddButton
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for browse button in main container.
  	 * Use option [locale.labelAddButton](ui.igupload#options:locale.labelAddButton).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelAddButton,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
  	 * Use option [locale.labelClearAllButton](ui.igupload#options:locale.labelClearAllButton).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelClearAllButton
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
  	 * Use option [locale.labelClearAllButton](ui.igupload#options:locale.labelClearAllButton).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelClearAllButton,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for show/hide details button when main container is shown.
  	 * Use option [locale.labelHideDetails](ui.igupload#options:locale.labelHideDetails).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelHideDetails
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for show/hide details button when main container is shown.
  	 * Use option [locale.labelHideDetails](ui.igupload#options:locale.labelHideDetails).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelHideDetails,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set filename when it could not be shown the whole file name and should be shorten.
  	 * Use option [locale.labelProgressBarFileNameContinue](ui.igupload#options:locale.labelProgressBarFileNameContinue).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelProgressBarFileNameContinue
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set filename when it could not be shown the whole file name and should be shorten.
  	 * Use option [locale.labelProgressBarFileNameContinue](ui.igupload#options:locale.labelProgressBarFileNameContinue).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelProgressBarFileNameContinue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for show/hide details button when main container is hidden.
  	 * Use option [locale.labelShowDetails](ui.igupload#options:locale.labelShowDetails).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelShowDetails
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for show/hide details button when main container is hidden.
  	 * Use option [locale.labelShowDetails](ui.igupload#options:locale.labelShowDetails).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelShowDetails,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
  	 * Use option [locale.labelSummaryProgressBarTemplate](ui.igupload#options:locale.labelSummaryProgressBarTemplate).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressBarTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
  	 * Use option [locale.labelSummaryProgressBarTemplate](ui.igupload#options:locale.labelSummaryProgressBarTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressBarTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
  	 * Use option [locale.labelSummaryProgressButtonCancel](ui.igupload#options:locale.labelSummaryProgressButtonCancel).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonCancel
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
  	 * Use option [locale.labelSummaryProgressButtonCancel](ui.igupload#options:locale.labelSummaryProgressButtonCancel).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonCancel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
  	 * Use option [locale.labelSummaryProgressButtonContinue](ui.igupload#options:locale.labelSummaryProgressButtonContinue).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonContinue
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
  	 * Use option [locale.labelSummaryProgressButtonContinue](ui.igupload#options:locale.labelSummaryProgressButtonContinue).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonContinue,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label when upload is finished. Shown only in multiple upload mode.
  	 * Use option [locale.labelSummaryProgressButtonDone](ui.igupload#options:locale.labelSummaryProgressButtonDone).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonDone
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label when upload is finished. Shown only in multiple upload mode.
  	 * Use option [locale.labelSummaryProgressButtonDone](ui.igupload#options:locale.labelSummaryProgressButtonDone).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryProgressButtonDone,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
  	 * Use option [locale.labelSummaryTemplate](ui.igupload#options:locale.labelSummaryTemplate).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryTemplate
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
  	 * Use option [locale.labelSummaryTemplate](ui.igupload#options:locale.labelSummaryTemplate).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelSummaryTemplate,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
  	 * Use option [locale.labelUploadButton](ui.igupload#options:locale.labelUploadButton).
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelUploadButton
  ): java.lang.String = js.native
  /**
  	 * This option has been removed as of 2017.2 Volume release.
  	 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
  	 * Use option [locale.labelUploadButton](ui.igupload#options:locale.labelUploadButton).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.labelUploadButton,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgUploadLocale = js.native
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgUploadLocale
  ): scala.Unit = js.native
  /**
  	 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxFileSize
  ): js.Any = js.native
  /**
  	 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxFileSize,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Get or set count of files that could be uploaded at the same time.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxSimultaneousFilesUploads
  ): scala.Double = js.native
  /**
  	 * Get or set count of files that could be uploaded at the same time.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxSimultaneousFilesUploads,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Get or set the maximum number of allowed files to upload.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxUploadedFiles
  ): scala.Double = js.native
  /**
  	 * Get or set the maximum number of allowed files to upload.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxUploadedFiles,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode
  ): js.Any = js.native
  /**
  	 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.mode,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleFiles
  ): scala.Boolean = js.native
  /**
  	 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.multipleFiles,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the file upload error event. Fired when error is occurred.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onError
  ): OnErrorEvent = js.native
  /**
  	 * Defines the name of the file upload error event. Fired when error is occurred.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onError,
    optionValue: OnErrorEvent
  ): scala.Unit = js.native
  /**
  	 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onFormDataSubmit
  ): OnFormDataSubmitEvent = js.native
  /**
  	 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onFormDataSubmit,
    optionValue: OnFormDataSubmitEvent
  ): scala.Unit = js.native
  /**
  	 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onXHRLoad
  ): OnXHRLoadEvent = js.native
  /**
  	 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onXHRLoad,
    optionValue: OnXHRLoadEvent
  ): scala.Unit = js.native
  /**
  	 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressUrl
  ): java.lang.String = js.native
  /**
  	 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Get or set whether to show File Extension icon
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFileExtensionIcon
  ): scala.Boolean = js.native
  /**
  	 * Get or set whether to show File Extension icon
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showFileExtensionIcon,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Get or set URL for uploading.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.uploadUrl
  ): java.lang.String = js.native
  /**
  	 * Get or set URL for uploading.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.uploadUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Get or set whether to use only one request for sending data, when you are sending more than one file.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useSingleRequest
  ): scala.Boolean = js.native
  /**
  	 * Get or set whether to use only one request for sending data, when you are sending more than one file.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.useSingleRequest,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
  	 *
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): scala.Double | java.lang.String = js.native
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igUpload(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igUpload(options: IgUpload): JQuery = js.native
  @JSName("igUpload")
  def igUpload_addDataField(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addDataField,
    formData: js.Object,
    field: js.Object
  ): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_addDataFields(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.addDataFields,
    formData: js.Object,
    fields: js.Array[_]
  ): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_cancelAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.cancelAll): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_cancelUpload(methodName: igniteDashUiLib.igniteDashUiLibStrings.cancelUpload, formNumber: scala.Double): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_clearAll(methodName: igniteDashUiLib.igniteDashUiLibStrings.clearAll): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_getFileInfo(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFileInfo, fileIndex: scala.Double): js.Object = js.native
  @JSName("igUpload")
  def igUpload_getFileInfoData(methodName: igniteDashUiLib.igniteDashUiLibStrings.getFileInfoData): js.Object = js.native
  @JSName("igUpload")
  def igUpload_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igUpload")
  def igUpload_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igUpload")
  def igUpload_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgUpload): JQuery = js.native
  @JSName("igUpload")
  def igUpload_startUpload(methodName: igniteDashUiLib.igniteDashUiLibStrings.startUpload, formNumber: scala.Double): scala.Unit = js.native
  @JSName("igUpload")
  def igUpload_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igValidator(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.creditCard
  ): scala.Boolean | js.Object = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.creditCard,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.creditCard,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.custom
  ): js.Function | java.lang.String | js.Object = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.custom,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * /Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.custom,
    optionValue: js.Function
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.custom,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependant on JavaScript Date parsing which will accept a wide range of values.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.date
  ): scala.Boolean | js.Object = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.date,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependant on JavaScript Date parsing which will accept a wide range of values.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.date,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.email
  ): scala.Boolean | js.Object = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.email,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.email,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a requirement for the value in this field to be the same as another input element or editor control.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.equalTo
  ): java.lang.String | js.Object = js.native
  /**
  	 * /Sets a requirement for the value in this field to be the same as another input element or editor control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.equalTo,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.equalTo,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Event raised for invalid field after value was validated but before any action takes effect.
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.error
  ): ErrorEvent = js.native
  /**
  	 * Event which is raised after error message was hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorHidden
  ): ErrorHiddenEvent = js.native
  /**
  	 * Event which is raised after error message was hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorHidden,
    optionValue: ErrorHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before error message is hidden.
  	 * Return false in order to keep the error message displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorHiding
  ): ErrorHidingEvent = js.native
  /**
  	 * Event which is raised before error message is hidden.
  	 * Return false in order to keep the error message displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorHiding,
    optionValue: ErrorHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessage
  ): java.lang.String = js.native
  /**
  	 * /Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorMessage,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before error message is displayed.
  	 * Return false in order to prevent error message display.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorShowing
  ): ErrorShowingEvent = js.native
  /**
  	 * Event which is raised before error message is displayed.
  	 * Return false in order to prevent error message display.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorShowing,
    optionValue: ErrorShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after error message was displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorShown
  ): ErrorShownEvent = js.native
  /**
  	 * Event which is raised after error message was displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.errorShown,
    optionValue: ErrorShownEvent
  ): scala.Unit = js.native
  /**
  	 * Event raised for invalid field after value was validated but before any action takes effect.
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.error,
    optionValue: ErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets if all rules for a field should be checked, so even if one fails the rest will continue executing.
  	 * Note: This will not force checks on an empty field for rules that don't normally execute without a value.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.executeAllRules
  ): scala.Boolean = js.native
  /**
  	 * /Sets if all rules for a field should be checked, so even if one fails the rest will continue executing.
  	 * Note: This will not force checks on an empty field for rules that don't normally execute without a value.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.executeAllRules,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets a list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
  	 * Applicable options are also inherited from the global control configuration if not set.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fields
  ): js.Array[IgValidatorField] = js.native
  /**
  	 * A list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
  	 * Applicable options are also inherited from the global control configuration if not set.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fields,
    optionValue: js.Array[IgValidatorField]
  ): scala.Unit = js.native
  /**
  	 * Event triggered on Validator instance level after failed validation on form submit event.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formError
  ): FormErrorEvent = js.native
  /**
  	 * Event triggered on Validator instance level after failed validation on form submit event.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formError,
    optionValue: FormErrorEvent
  ): scala.Unit = js.native
  /**
  	 * Event triggered on Validator instance level after successful validation on form submit event.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formSuccess
  ): FormSuccessEvent = js.native
  /**
  	 * Event triggered on Validator instance level after successful validation on form submit event.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formSuccess,
    optionValue: FormSuccessEvent
  ): scala.Unit = js.native
  /**
  	 * Event triggered on Validator instance level after validation on form submit event..
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formValidated
  ): FormValidatedEvent = js.native
  /**
  	 * Event triggered on Validator instance level after validation on form submit event..
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formValidated,
    optionValue: FormValidatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event triggered on Validator instance level before handling a form submit event.
  	 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return error.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formValidating
  ): FormValidatingEvent = js.native
  /**
  	 * Event triggered on Validator instance level before handling a form submit event.
  	 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return error.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.formValidating,
    optionValue: FormValidatingEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lengthRange
  ): js.Array[_] | js.Object = js.native
  /**
  	 * /Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lengthRange,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lengthRange,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.messageTarget
  ): stdLib.Element = js.native
  /**
  	 * /Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.messageTarget,
    optionValue: stdLib.Element
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.notificationOptions
  ): js.Any = js.native
  /**
  	 * /Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.notificationOptions,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.number
  ): scala.Boolean | js.Object = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.number,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.number,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether validation is triggered when the editor loses focus.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onblur
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether validation is triggered when the editor loses focus.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onblur,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether validation is triggered when the text in editor changes.
  	 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
  	 * As it can cause excessive messages with text-based fields, the initial validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onchange
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether validation is triggered when the text in editor changes.
  	 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
  	 * As it can cause excessive messages with text-based fields, the initial validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onchange,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
  	 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onsubmit
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
  	 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.onsubmit,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the option to show a label indication next to optional fields.
  	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.optionalIndication
  ): scala.Boolean = js.native
  /**
  	 * /Sets the option to show a label indication next to optional fields.
  	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.optionalIndication,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets regular expression validation rule options.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pattern
  ): java.lang.String | js.Object = js.native
  /**
  	 * /Sets regular expression validation rule options.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pattern,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pattern,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets option to validate if a value was entered (not empty text, selected item, etc.)
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.required
  ): scala.Boolean | js.Object = js.native
  /**
  	 * Gets/Sets the option to show an asterisks indication next to required fields.
  	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requiredIndication
  ): scala.Boolean = js.native
  /**
  	 * /Sets the option to show an asterisks indication next to required fields.
  	 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.requiredIndication,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.required,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * /Sets option to validate if a value was entered (not empty text, selected item, etc.)
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.required,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Event raised for valid field after value was validated but before any action takes effect.
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.success
  ): SuccessEvent = js.native
  /**
  	 * Event which is raised after success message was hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successHidden
  ): SuccessHiddenEvent = js.native
  /**
  	 * Event which is raised after success message was hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successHidden,
    optionValue: SuccessHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before success message is hidden.
  	 * Return false in order to keep success message displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successHiding
  ): SuccessHidingEvent = js.native
  /**
  	 * Event which is raised before success message is hidden.
  	 * Return false in order to keep success message displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successHiding,
    optionValue: SuccessHidingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successMessage
  ): java.lang.String = js.native
  /**
  	 * /Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successMessage,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event which is raised before success message is displayed.
  	 * Return false in order to prevent success message display.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successShowing
  ): SuccessShowingEvent = js.native
  /**
  	 * Event which is raised before success message is displayed.
  	 * Return false in order to prevent success message display.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successShowing,
    optionValue: SuccessShowingEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after success message was displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successShown
  ): SuccessShownEvent = js.native
  /**
  	 * Event which is raised after success message was displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.successShown,
    optionValue: SuccessShownEvent
  ): scala.Unit = js.native
  /**
  	 * Event raised for valid field after value was validated but before any action takes effect.
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.success,
    optionValue: SuccessEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
  	 * Note: This will not affect required fields on form submit.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.threshold
  ): scala.Double = js.native
  /**
  	 * /Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
  	 * Note: This will not affect required fields on form submit.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.threshold,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event which is raised after value was validated but before any action takes effect.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validated
  ): ValidatedEvent = js.native
  /**
  	 * Event which is raised after value was validated but before any action takes effect.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validated,
    optionValue: ValidatedEvent
  ): scala.Unit = js.native
  /**
  	 * Event which is raised on validation before default validation logic is applied.
  	 * Return false in order to cancel the event and consider the field valid.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validating
  ): ValidatingEvent = js.native
  /**
  	 * Event which is raised on validation before default validation logic is applied.
  	 * Return false in order to cancel the event and consider the field valid.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.validating,
    optionValue: ValidatingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a minimum and/or maximum value. Null values are ignored.
  	 *
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueRange
  ): js.Array[_] | js.Object = js.native
  /**
  	 * /Sets a minimum and/or maximum value. Null values are ignored.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueRange,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  def igValidator(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.valueRange,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igValidator(options: IgValidator): JQuery = js.native
  @JSName("igValidator")
  def igValidator_addField(methodName: igniteDashUiLib.igniteDashUiLibStrings.addField, field: js.Object): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_getErrorMessages(methodName: igniteDashUiLib.igniteDashUiLibStrings.getErrorMessages): js.Array[_] = js.native
  @JSName("igValidator")
  def igValidator_getErrorMessages(methodName: igniteDashUiLib.igniteDashUiLibStrings.getErrorMessages, field: js.Object): js.Array[_] = js.native
  @JSName("igValidator")
  def igValidator_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_hide(methodName: igniteDashUiLib.igniteDashUiLibStrings.hide, field: js.Object): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_isMessageDisplayed(methodName: igniteDashUiLib.igniteDashUiLibStrings.isMessageDisplayed): scala.Boolean = js.native
  @JSName("igValidator")
  def igValidator_isMessageDisplayed(methodName: igniteDashUiLib.igniteDashUiLibStrings.isMessageDisplayed, field: js.Object): scala.Boolean = js.native
  @JSName("igValidator")
  def igValidator_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid): scala.Boolean = js.native
  @JSName("igValidator")
  def igValidator_isValid(methodName: igniteDashUiLib.igniteDashUiLibStrings.isValid, field: js.Object): scala.Boolean = js.native
  @JSName("igValidator")
  def igValidator_notifier(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifier): js.Object = js.native
  @JSName("igValidator")
  def igValidator_notifier(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifier, field: js.Object): js.Object = js.native
  @JSName("igValidator")
  def igValidator_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igValidator")
  def igValidator_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igValidator")
  def igValidator_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgValidator): JQuery = js.native
  @JSName("igValidator")
  def igValidator_removeField(methodName: igniteDashUiLib.igniteDashUiLibStrings.removeField, field: js.Object): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_updateField(methodName: igniteDashUiLib.igniteDashUiLibStrings.updateField, field: js.Object): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_updateField(
    methodName: igniteDashUiLib.igniteDashUiLibStrings.updateField,
    field: js.Object,
    fieldOptions: js.Object
  ): scala.Unit = js.native
  @JSName("igValidator")
  def igValidator_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate): scala.Boolean = js.native
  @JSName("igValidator")
  def igValidator_validate(methodName: igniteDashUiLib.igniteDashUiLibStrings.validate, field: js.Object): scala.Boolean = js.native
  def igVideoPlayer(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets/Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autohide
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autohide,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the video should start playing immediately after the control is loaded.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoplay
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the video should start playing immediately after the control is loaded.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.autoplay,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the banner is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerClick
  ): BannerClickEvent = js.native
  /**
  	 * Occurs when the banner is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerClick,
    optionValue: BannerClickEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when the banner is hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerHidden
  ): BannerHiddenEvent = js.native
  /**
  	 * Occurs when the banner is hidden.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerHidden,
    optionValue: BannerHiddenEvent
  ): scala.Unit = js.native
  /**
  	 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerVisible
  ): BannerVisibleEvent = js.native
  /**
  	 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bannerVisible,
    optionValue: BannerVisibleEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets an array of banner objects that will show the banners when the video clip is played.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.banners
  ): js.Array[IgVideoPlayerBanner] = js.native
  /**
  	 * /Sets an array of banner objects that will show the banners when the video clip is played.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.banners,
    optionValue: js.Array[IgVideoPlayerBanner]
  ): scala.Unit = js.native
  /**
  	 * Occurs when a bookmark is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkClick
  ): BookmarkClickEvent = js.native
  /**
  	 * Occurs when a bookmark is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkClick,
    optionValue: BookmarkClickEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when a bookmark is hit.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkHit
  ): BookmarkHitEvent = js.native
  /**
  	 * Occurs when a bookmark is hit.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarkHit,
    optionValue: BookmarkHitEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets an array of bookmarks that will be displayed in the video player control.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarks
  ): js.Array[IgVideoPlayerBookmark] = js.native
  /**
  	 * /Sets an array of bookmarks that will be displayed in the video player control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.bookmarks,
    optionValue: js.Array[IgVideoPlayerBookmark]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls. When this option is set to true, no [commercials](ui.igvideoplayer#options:commercials) will be displayed as they are not supported.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserControls
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls. When this option is set to true, no [commercials](ui.igvideoplayer#options:commercials) will be displayed as they are not supported.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserControls,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when browser does not support HTML 5 video.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported
  ): BrowserNotSupportedEvent = js.native
  /**
  	 * Occurs when browser does not support HTML 5 video.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.browserNotSupported,
    optionValue: BrowserNotSupportedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when a chunk of data is buffered.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buffering
  ): BufferingEvent = js.native
  /**
  	 * Occurs when a chunk of data is buffered.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.buffering,
    optionValue: BufferingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the center big button hide delay.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHideDelay
  ): scala.Double = js.native
  /**
  	 * /Sets the center big button hide delay.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.centerButtonHideDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets an array of commercials objects that will be displayed when the video is playing. Note that [broswerControls](ui.igvideoplayer#options:browserControls) doesn't support commercials.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.commercials
  ): IgVideoPlayerCommercials = js.native
  /**
  	 * /Sets an array of commercials objects that will be displayed when the video is playing. Note that [broswerControls](ui.igvideoplayer#options:browserControls) doesn't support commercials.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.commercials,
    optionValue: IgVideoPlayerCommercials
  ): scala.Unit = js.native
  /**
  	 * Occurs when the video has ended.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ended
  ): EndedEvent = js.native
  /**
  	 * Occurs when the video has ended.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.ended,
    optionValue: EndedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when igVideoPlayer enters full screen mode.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enterFullScreen
  ): EnterFullScreenEvent = js.native
  /**
  	 * Occurs when igVideoPlayer enters full screen mode.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.enterFullScreen,
    optionValue: EnterFullScreenEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when igVideoPlayer exits full screen mode.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.exitFullScreen
  ): ExitFullScreenEvent = js.native
  /**
  	 * Occurs when igVideoPlayer exits full screen mode.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.exitFullScreen,
    optionValue: ExitFullScreenEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just  100% width and height to the control.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fullscreen
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.fullscreen,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): IgVideoPlayerLocale = js.native
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: IgVideoPlayerLocale
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the video to start again after it has ended.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loop
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the video to start again after it has ended.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.loop,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the video volume is muted.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.muted
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the video volume is muted.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.muted,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the video is paused.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.paused
  ): PausedEvent = js.native
  /**
  	 * Occurs when the video is paused.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.paused,
    optionValue: PausedEvent
  ): scala.Unit = js.native
  /**
  	 * Occurs when video gets playing.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.playing
  ): PlayingEvent = js.native
  /**
  	 * Occurs when video gets playing.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.playing,
    optionValue: PlayingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a URL to an image to show, when no video data is available.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.posterUrl
  ): java.lang.String = js.native
  /**
  	 * /Sets a URL to an image to show, when no video data is available.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.posterUrl,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preload
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.preload,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Occurs when the video has advanced the playback position.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progress
  ): ProgressEvent = js.native
  /**
  	 * Gets/Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressLabelFormat
  ): java.lang.String = js.native
  /**
  	 * /Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progressLabelFormat,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Occurs when the video has advanced the playback position.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.progress,
    optionValue: ProgressEvent
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Occurs when a related video is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.relatedVideoClick
  ): RelatedVideoClickEvent = js.native
  /**
  	 * Occurs when a related video is clicked.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.relatedVideoClick,
    optionValue: RelatedVideoClickEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets an array of related videos that will be displayed when video playback has ended.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.relatedVideos
  ): js.Array[IgVideoPlayerRelatedVideo] = js.native
  /**
  	 * /Sets an array of related videos that will be displayed when video playback has ended.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.relatedVideos,
    optionValue: js.Array[IgVideoPlayerRelatedVideo]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets whether the control seek tool tip will be shown when hovering the video progress bar.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showSeekTime
  ): scala.Boolean = js.native
  /**
  	 * /Sets whether the control seek tool tip will be shown when hovering the video progress bar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.showSeekTime,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sources
  ): js.Array[_] = js.native
  /**
  	 * /Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.sources,
    optionValue: js.Array[_]
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets video title.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title
  ): java.lang.String = js.native
  /**
  	 * /Sets video title.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.title,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the video volume. It can be between 0.0 and 1.0.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volume
  ): scala.Double = js.native
  /**
  	 * Gets/Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeAutohideDelay
  ): scala.Double = js.native
  /**
  	 * /Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volumeAutohideDelay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * /Sets the video volume. It can be between 0.0 and 1.0.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.volume,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Occurs when igVideoPlayer is waiting for data from the server.
  	 *
  	 * Function takes arguments evt and ui.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.waiting
  ): WaitingEvent = js.native
  /**
  	 * Occurs when igVideoPlayer is waiting for data from the server.
  	 *
  	 * Function takes arguments evt and ui.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.waiting,
    optionValue: WaitingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets/Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
  	 *
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * /Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igVideoPlayer(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igVideoPlayer(options: IgVideoPlayer): JQuery = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_currentTime(methodName: igniteDashUiLib.igniteDashUiLibStrings.currentTime, `val`: scala.Double): scala.Double = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_duration(methodName: igniteDashUiLib.igniteDashUiLibStrings.duration): scala.Double = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_ended(methodName: igniteDashUiLib.igniteDashUiLibStrings.ended): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_hideAdMessage(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideAdMessage): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_hideBanner(methodName: igniteDashUiLib.igniteDashUiLibStrings.hideBanner, index: scala.Double): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgVideoPlayer): JQuery = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_pause(methodName: igniteDashUiLib.igniteDashUiLibStrings.pause): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_paused(methodName: igniteDashUiLib.igniteDashUiLibStrings.paused): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_play(methodName: igniteDashUiLib.igniteDashUiLibStrings.play): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_playCommercial(methodName: igniteDashUiLib.igniteDashUiLibStrings.playCommercial, commercial: js.Object): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_resetCommercialsShow(methodName: igniteDashUiLib.igniteDashUiLibStrings.resetCommercialsShow): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_screenshot(methodName: igniteDashUiLib.igniteDashUiLibStrings.screenshot): js.Object = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_screenshot(methodName: igniteDashUiLib.igniteDashUiLibStrings.screenshot, scaleFactor: scala.Double): js.Object = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_seeking(methodName: igniteDashUiLib.igniteDashUiLibStrings.seeking): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_showBanner(methodName: igniteDashUiLib.igniteDashUiLibStrings.showBanner, index: scala.Double): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_supportsH264BaselineVideo(methodName: igniteDashUiLib.igniteDashUiLibStrings.supportsH264BaselineVideo): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_supportsOggTheoraVideo(methodName: igniteDashUiLib.igniteDashUiLibStrings.supportsOggTheoraVideo): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_supportsVideo(methodName: igniteDashUiLib.igniteDashUiLibStrings.supportsVideo): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_supportsWebmVideo(methodName: igniteDashUiLib.igniteDashUiLibStrings.supportsWebmVideo): scala.Boolean = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_togglePlay(methodName: igniteDashUiLib.igniteDashUiLibStrings.togglePlay): scala.Unit = js.native
  @JSName("igVideoPlayer")
  def igVideoPlayer_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  def igWidget(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igWidget(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  def igWidget(options: IgWidget): JQuery = js.native
  @JSName("igWidget")
  def igWidget_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igWidget")
  def igWidget_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igWidget")
  def igWidget_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igWidget")
  def igWidget_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igWidget")
  def igWidget_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igWidget")
  def igWidget_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igWidget")
  def igWidget_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgWidget): JQuery = js.native
  def igZoomSlider(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actualPixelScalingRatio
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.actualPixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areThumbCalloutsEnabled
  ): scala.Boolean = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.areThumbCalloutsEnabled,
    optionValue: scala.Boolean
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barExtent
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barExtent,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.barStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.endInset
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.endInset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutTextColor
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherCalloutTextColor,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherShadeStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbHeight
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbRidgesBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbRidgesBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbWidth
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.higherThumbWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutTextColor
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerCalloutTextColor,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerShadeStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbHeight
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbHeight,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbRidgesBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbRidgesBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbWidth
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.lowerThumbWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxZoomWidth
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.maxZoomWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minZoomWidth
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.minZoomWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation
  ): java.lang.String = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.orientation,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panTransitionDuration
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.panTransitionDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets  the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio
  ): scala.Double = js.native
  /**
  	 * Sets the scaling value used to affect the pixel density of the control.
  	 * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
  	 * to appear blurry.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.pixelScalingRatio,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged
  ): PropertyChangedEvent = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.propertyChanged,
    optionValue: PropertyChangedEvent
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbOutline
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbOutline,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbRidgesBrush
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbRidgesBrush,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbStrokeThickness
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.rangeThumbStrokeThickness,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolvingAxisValue
  ): ResolvingAxisValueEvent = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.resolvingAxisValue,
    optionValue: ResolvingAxisValueEvent
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startInset
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.startInset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbCalloutTextStyle
  ): js.Any = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.thumbCalloutTextStyle,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackEndInset
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackEndInset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackStartInset
  ): scala.Double = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.trackStartInset,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect
  ): js.Any = js.native
  /**
  	 * Occurs just after the current ZoomSlider's window rectangle is changed.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged
  ): WindowRectChangedEvent = js.native
  /**
  	 * Occurs just after the current ZoomSlider's window rectangle is changed.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRectChanged,
    optionValue: WindowRectChangedEvent
  ): scala.Unit = js.native
  def igZoomSlider(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowRect,
    optionValue: js.Any
  ): scala.Unit = js.native
  def igZoomSlider(options: IgZoomSlider): JQuery = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_flush(methodName: igniteDashUiLib.igniteDashUiLibStrings.flush): scala.Unit = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_notifySizeChanged(methodName: igniteDashUiLib.igniteDashUiLibStrings.notifySizeChanged): scala.Unit = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igZoomSlider")
  def igZoomSlider_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgZoomSlider): JQuery = js.native
  def igZoombar(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  /**
  	 * Gets how the target widget's clone is rendered inside the Zoombar.
  	 * object A valid set of properties to initialize the clone with.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.clone
  ): java.lang.String | js.Object = js.native
  /**
  	 * Sets how the target widget's clone is rendered inside the Zoombar.
  	 * object A valid set of properties to initialize the clone with.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.clone,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.clone,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets the default zoom in percentages.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultZoomWindow
  ): IgZoombarDefaultZoomWindow = js.native
  /**
  	 * Sets the default zoom in percentages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.defaultZoomWindow,
    optionValue: IgZoombarDefaultZoomWindow
  ): scala.Unit = js.native
  /**
  	 * Gets the height of the Zoombar.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height
  ): scala.Double | java.lang.String = js.native
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Sets the height of the Zoombar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.height,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the animation duration (in milliseconds) when hover style is applied or removed from elements.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hoverStyleAnimationDuration
  ): scala.Double = js.native
  /**
  	 * Sets the animation duration (in milliseconds) when hover style is applied or removed from elements.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.hoverStyleAnimationDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language
  ): java.lang.String = js.native
  /**
  	 * Set/Get the locale language setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.language,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale
  ): js.Any = js.native
  /**
  	 * Set/Get the locale setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.locale,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Gets a provider class which interfaces the widget that is being zoomed.
  	 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.provider
  ): js.Any = js.native
  /**
  	 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
  	 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.providerCreated
  ): ProviderCreatedEvent = js.native
  /**
  	 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
  	 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.providerCreated,
    optionValue: ProviderCreatedEvent
  ): scala.Unit = js.native
  /**
  	 * Sets a provider class which interfaces the widget that is being zoomed.
  	 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.provider,
    optionValue: js.Any
  ): scala.Unit = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional
  ): java.lang.String | js.Object = js.native
  /**
  	 * Set/Get the regional setting for the widget.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.regional,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Initial tabIndex for the Zoombar container elements.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex
  ): scala.Double = js.native
  /**
  	 * Initial tabIndex for the Zoombar container elements.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.tabIndex,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the element on which the widget the Zoombar is attached to is initialized.
  	 * object A valid jQuery object, the first element of which is that element.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target
  ): java.lang.String | js.Object = js.native
  /**
  	 * Sets the element on which the widget the Zoombar is attached to is initialized.
  	 * object A valid jQuery object, the first element of which is that element.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.target,
    optionValue: js.Object
  ): scala.Unit = js.native
  /**
  	 * Gets the width of the Zoombar.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width
  ): java.lang.String | scala.Double = js.native
  /**
  	 * Sets the width of the Zoombar.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.width,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user stops dragging the zoom window.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragEnded
  ): WindowDragEndedEvent = js.native
  /**
  	 * Event fired when the user stops dragging the zoom window.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragEnded,
    optionValue: WindowDragEndedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user attemtps to stop dragging the zoom window.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragEnding
  ): WindowDragEndingEvent = js.native
  /**
  	 * Event fired when the user attemtps to stop dragging the zoom window.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragEnding,
    optionValue: WindowDragEndingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user starts dragging the zoom window.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragStarted
  ): WindowDragStartedEvent = js.native
  /**
  	 * Event fired when the user starts dragging the zoom window.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragStarted,
    optionValue: WindowDragStartedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user attempts to drag the zoom window.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragStarting
  ): WindowDragStartingEvent = js.native
  /**
  	 * Event fired when the user attempts to drag the zoom window.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragStarting,
    optionValue: WindowDragStartingEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user drags the zoom window.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragging
  ): WindowDraggingEvent = js.native
  /**
  	 * Event fired when the user drags the zoom window.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowDragging,
    optionValue: WindowDraggingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPanDuration
  ): scala.Double = js.native
  /**
  	 * Sets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowPanDuration,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Event fired after the user resizes the zoom window with the window"s handles.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResized
  ): WindowResizedEvent = js.native
  /**
  	 * Event fired after the user resizes the zoom window with the window"s handles.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResized,
    optionValue: WindowResizedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired when the user resizes the zoom window with the window"s handles.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResizing
  ): WindowResizingEvent = js.native
  /**
  	 * Event fired when the user resizes the zoom window with the window"s handles.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.windowResizing,
    optionValue: WindowResizingEvent
  ): scala.Unit = js.native
  /**
  	 * Gets when the zoom effect is applied.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomAction
  ): java.lang.String = js.native
  /**
  	 * Sets when the zoom effect is applied.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomAction,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  /**
  	 * Event fired after a zoom action is applied.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomChanged
  ): ZoomChangedEvent = js.native
  /**
  	 * Event fired after a zoom action is applied.
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomChanged,
    optionValue: ZoomChangedEvent
  ): scala.Unit = js.native
  /**
  	 * Event fired before a zoom action is applied
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomChanging
  ): ZoomChangingEvent = js.native
  /**
  	 * Event fired before a zoom action is applied
  	 *
  	 * @optionValue Define event handler function.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomChanging,
    optionValue: ZoomChangingEvent
  ): scala.Unit = js.native
  /**
  	 * The minimal width the zoom window can have in percentages.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomWindowMinWidth
  ): scala.Double = js.native
  /**
  	 * The minimal width the zoom window can have in percentages.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomWindowMinWidth,
    optionValue: scala.Double
  ): scala.Unit = js.native
  /**
  	 * Gets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
  	 *
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomWindowMoveDistance
  ): scala.Double = js.native
  /**
  	 * Sets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
  	 *
  	 *
  	 * @optionValue New value to be set.
  	 */
  def igZoombar(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.zoomWindowMoveDistance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def igZoombar(options: IgZoombar): JQuery = js.native
  @JSName("igZoombar")
  def igZoombar_changeGlobalLanguage(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalLanguage): scala.Unit = js.native
  @JSName("igZoombar")
  def igZoombar_changeGlobalRegional(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeGlobalRegional): scala.Unit = js.native
  @JSName("igZoombar")
  def igZoombar_changeLocale(methodName: igniteDashUiLib.igniteDashUiLibStrings.changeLocale, $container: js.Object): scala.Unit = js.native
  @JSName("igZoombar")
  def igZoombar_clone(methodName: igniteDashUiLib.igniteDashUiLibStrings.clone): stdLib.Element = js.native
  @JSName("igZoombar")
  def igZoombar_container(methodName: igniteDashUiLib.igniteDashUiLibStrings.container): stdLib.Element = js.native
  @JSName("igZoombar")
  def igZoombar_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("igZoombar")
  def igZoombar_id(methodName: igniteDashUiLib.igniteDashUiLibStrings.id): java.lang.String = js.native
  @JSName("igZoombar")
  def igZoombar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("igZoombar")
  def igZoombar_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("igZoombar")
  def igZoombar_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: IgZoombar): JQuery = js.native
  @JSName("igZoombar")
  def igZoombar_widget(methodName: igniteDashUiLib.igniteDashUiLibStrings.widget): scala.Unit = js.native
  @JSName("igZoombar")
  def igZoombar_zoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.zoom): js.Object = js.native
  @JSName("igZoombar")
  def igZoombar_zoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.zoom, left: scala.Double): js.Object = js.native
  @JSName("igZoombar")
  def igZoombar_zoom(methodName: igniteDashUiLib.igniteDashUiLibStrings.zoom, left: scala.Double, width: scala.Double): js.Object = js.native
  def mouseWrapper(methodName: java.lang.String, methodParams: js.Any*): js.Any = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel
  ): java.lang.String = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.cancel,
    optionValue: java.lang.String
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.capture
  ): CaptureEvent = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.capture,
    optionValue: CaptureEvent
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delay
  ): scala.Double = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.delay,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.distance
  ): scala.Double = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.distance,
    optionValue: scala.Double
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag
  ): DragEvent = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.drag,
    optionValue: DragEvent
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.start
  ): StartEvent = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.start,
    optionValue: StartEvent
  ): scala.Unit = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stop
  ): StopEvent = js.native
  def mouseWrapper(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: igniteDashUiLib.igniteDashUiLibStrings.stop,
    optionValue: StopEvent
  ): scala.Unit = js.native
  def mouseWrapper(options: MouseWrapper): JQuery = js.native
  @JSName("mouseWrapper")
  def mouseWrapper_destroy(methodName: igniteDashUiLib.igniteDashUiLibStrings.destroy): scala.Unit = js.native
  @JSName("mouseWrapper")
  def mouseWrapper_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, optionName: java.lang.String): js.Any = js.native
  @JSName("mouseWrapper")
  def mouseWrapper_option(
    optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option,
    optionName: java.lang.String,
    optionValue: js.Any
  ): JQuery = js.native
  @JSName("mouseWrapper")
  def mouseWrapper_option(optionLiteral: igniteDashUiLib.igniteDashUiLibStrings.option, options: MouseWrapper): JQuery = js.native
}

