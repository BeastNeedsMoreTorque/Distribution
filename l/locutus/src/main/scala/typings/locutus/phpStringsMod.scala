package typings.locutus

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("locutus/php/strings", JSImport.Namespace)
@js.native
object phpStringsMod extends js.Object {
  def addcslashes(): js.Any = js.native
  def addcslashes(str: js.Any): js.Any = js.native
  def addcslashes(str: js.Any, charlist: js.Any): js.Any = js.native
  def addslashes(): js.Any = js.native
  def addslashes(str: js.Any): js.Any = js.native
  def bin2hex(): js.Any = js.native
  def bin2hex(s: js.Any): js.Any = js.native
  def chop(): js.Any = js.native
  def chop(str: js.Any): js.Any = js.native
  def chop(str: js.Any, charlist: js.Any): js.Any = js.native
  def chr(): js.Any = js.native
  def chr(codePt: js.Any): js.Any = js.native
  def chunk_split(): js.Any = js.native
  def chunk_split(body: js.Any): js.Any = js.native
  def chunk_split(body: js.Any, chunklen: js.Any): js.Any = js.native
  def chunk_split(body: js.Any, chunklen: js.Any, end: js.Any): js.Any = js.native
  def convert_cyr_string(): js.Any = js.native
  def convert_cyr_string(str: js.Any): js.Any = js.native
  def convert_cyr_string(str: js.Any, from: js.Any): js.Any = js.native
  def convert_cyr_string(str: js.Any, from: js.Any, to: js.Any): js.Any = js.native
  def convert_uuencode(): js.Any = js.native
  def convert_uuencode(str: js.Any): js.Any = js.native
  def count_chars(): js.Any = js.native
  def count_chars(str: js.Any): js.Any = js.native
  def count_chars(str: js.Any, mode: js.Any): js.Any = js.native
  def crc32(): js.Any = js.native
  def crc32(str: js.Any): js.Any = js.native
  def echo(args: js.Any*): js.Any = js.native
  def explode(args: js.Any*): js.Any = js.native
  def get_html_translation_table(args: js.Any*): js.Any = js.native
  def hex2bin(): js.Any = js.native
  def hex2bin(s: js.Any): js.Any = js.native
  def html_entity_decode(): js.Any = js.native
  def html_entity_decode(string: js.Any): js.Any = js.native
  def html_entity_decode(string: js.Any, quoteStyle: js.Any): js.Any = js.native
  def htmlentities(): js.Any = js.native
  def htmlentities(string: js.Any): js.Any = js.native
  def htmlentities(string: js.Any, quoteStyle: js.Any): js.Any = js.native
  def htmlentities(string: js.Any, quoteStyle: js.Any, charset: js.Any): js.Any = js.native
  def htmlentities(string: js.Any, quoteStyle: js.Any, charset: js.Any, doubleEncode: js.Any): js.Any = js.native
  def htmlspecialchars(): js.Any = js.native
  def htmlspecialchars(string: js.Any): js.Any = js.native
  def htmlspecialchars(string: js.Any, quoteStyle: js.Any): js.Any = js.native
  def htmlspecialchars(string: js.Any, quoteStyle: js.Any, charset: js.Any): js.Any = js.native
  def htmlspecialchars(string: js.Any, quoteStyle: js.Any, charset: js.Any, doubleEncode: js.Any): js.Any = js.native
  def htmlspecialchars_decode(): js.Any = js.native
  def htmlspecialchars_decode(string: js.Any): js.Any = js.native
  def htmlspecialchars_decode(string: js.Any, quoteStyle: js.Any): js.Any = js.native
  def implode(args: js.Any*): js.Any = js.native
  def join(): js.Any = js.native
  def join(glue: js.Any): js.Any = js.native
  def join(glue: js.Any, pieces: js.Any): js.Any = js.native
  def lcfirst(): js.Any = js.native
  def lcfirst(str: js.Any): js.Any = js.native
  def levenshtein(): js.Any = js.native
  def levenshtein(s1: js.Any): js.Any = js.native
  def levenshtein(s1: js.Any, s2: js.Any): js.Any = js.native
  def levenshtein(s1: js.Any, s2: js.Any, costIns: js.Any): js.Any = js.native
  def levenshtein(s1: js.Any, s2: js.Any, costIns: js.Any, costRep: js.Any): js.Any = js.native
  def levenshtein(s1: js.Any, s2: js.Any, costIns: js.Any, costRep: js.Any, costDel: js.Any): js.Any = js.native
  def localeconv(): js.Any = js.native
  def ltrim(): js.Any = js.native
  def ltrim(str: js.Any): js.Any = js.native
  def ltrim(str: js.Any, charlist: js.Any): js.Any = js.native
  def md5(): js.Any = js.native
  def md5(str: js.Any): js.Any = js.native
  def md5_file(): js.Any = js.native
  def md5_file(str_filename: js.Any): js.Any = js.native
  def metaphone(): js.Any = js.native
  def metaphone(word: js.Any): js.Any = js.native
  def metaphone(word: js.Any, maxPhonemes: js.Any): js.Any = js.native
  def money_format(): js.Any = js.native
  def money_format(format: js.Any): js.Any = js.native
  def money_format(format: js.Any, number: js.Any): js.Any = js.native
  def nl2br(): js.Any = js.native
  def nl2br(str: js.Any): js.Any = js.native
  def nl2br(str: js.Any, isXhtml: js.Any): js.Any = js.native
  def nl_langinfo(): js.Any = js.native
  def nl_langinfo(item: js.Any): js.Any = js.native
  def number_format(): js.Any = js.native
  def number_format(number: js.Any): js.Any = js.native
  def number_format(number: js.Any, decimals: js.Any): js.Any = js.native
  def number_format(number: js.Any, decimals: js.Any, decPoint: js.Any): js.Any = js.native
  def number_format(number: js.Any, decimals: js.Any, decPoint: js.Any, thousandsSep: js.Any): js.Any = js.native
  def ord(): js.Any = js.native
  def ord(string: js.Any): js.Any = js.native
  def parse_str(): js.Any = js.native
  def parse_str(str: js.Any): js.Any = js.native
  def parse_str(str: js.Any, array: js.Any): js.Any = js.native
  def printf(args: js.Any*): js.Any = js.native
  def quoted_printable_decode(): js.Any = js.native
  def quoted_printable_decode(str: js.Any): js.Any = js.native
  def quoted_printable_encode(): js.Any = js.native
  def quoted_printable_encode(str: js.Any): js.Any = js.native
  def quotemeta(): js.Any = js.native
  def quotemeta(str: js.Any): js.Any = js.native
  def rtrim(): js.Any = js.native
  def rtrim(str: js.Any): js.Any = js.native
  def rtrim(str: js.Any, charlist: js.Any): js.Any = js.native
  def setlocale(): js.Any = js.native
  def setlocale(category: js.Any): js.Any = js.native
  def setlocale(category: js.Any, locale: js.Any): js.Any = js.native
  def sha1(): js.Any = js.native
  def sha1(str: js.Any): js.Any = js.native
  def sha1_file(): js.Any = js.native
  def sha1_file(str_filename: js.Any): js.Any = js.native
  def similar_text(): js.Any = js.native
  def similar_text(first: js.Any): js.Any = js.native
  def similar_text(first: js.Any, second: js.Any): js.Any = js.native
  def similar_text(first: js.Any, second: js.Any, percent: js.Any): js.Any = js.native
  def soundex(): js.Any = js.native
  def soundex(str: js.Any): js.Any = js.native
  def split(): js.Any = js.native
  def split(delimiter: js.Any): js.Any = js.native
  def split(delimiter: js.Any, string: js.Any): js.Any = js.native
  def sprintf(args: js.Any*): js.Any = js.native
  def sscanf(args: js.Any*): js.Any = js.native
  def str_getcsv(): js.Any = js.native
  def str_getcsv(input: js.Any): js.Any = js.native
  def str_getcsv(input: js.Any, delimiter: js.Any): js.Any = js.native
  def str_getcsv(input: js.Any, delimiter: js.Any, enclosure: js.Any): js.Any = js.native
  def str_getcsv(input: js.Any, delimiter: js.Any, enclosure: js.Any, escape: js.Any): js.Any = js.native
  def str_ireplace(): js.Any = js.native
  def str_ireplace(search: js.Any): js.Any = js.native
  def str_ireplace(search: js.Any, replace: js.Any): js.Any = js.native
  def str_ireplace(search: js.Any, replace: js.Any, subject: js.Any): js.Any = js.native
  def str_ireplace(search: js.Any, replace: js.Any, subject: js.Any, countObj: js.Any): js.Any = js.native
  def str_pad(): js.Any = js.native
  def str_pad(input: js.Any): js.Any = js.native
  def str_pad(input: js.Any, padLength: js.Any): js.Any = js.native
  def str_pad(input: js.Any, padLength: js.Any, padString: js.Any): js.Any = js.native
  def str_pad(input: js.Any, padLength: js.Any, padString: js.Any, padType: js.Any): js.Any = js.native
  def str_repeat(): js.Any = js.native
  def str_repeat(input: js.Any): js.Any = js.native
  def str_repeat(input: js.Any, multiplier: js.Any): js.Any = js.native
  def str_replace(): js.Any = js.native
  def str_replace(search: js.Any): js.Any = js.native
  def str_replace(search: js.Any, replace: js.Any): js.Any = js.native
  def str_replace(search: js.Any, replace: js.Any, subject: js.Any): js.Any = js.native
  def str_replace(search: js.Any, replace: js.Any, subject: js.Any, countObj: js.Any): js.Any = js.native
  def str_rot13(): js.Any = js.native
  def str_rot13(str: js.Any): js.Any = js.native
  def str_shuffle(args: js.Any*): js.Any = js.native
  def str_split(): js.Any = js.native
  def str_split(string: js.Any): js.Any = js.native
  def str_split(string: js.Any, splitLength: js.Any): js.Any = js.native
  def str_word_count(): js.Any = js.native
  def str_word_count(str: js.Any): js.Any = js.native
  def str_word_count(str: js.Any, format: js.Any): js.Any = js.native
  def str_word_count(str: js.Any, format: js.Any, charlist: js.Any): js.Any = js.native
  def strcasecmp(): js.Any = js.native
  def strcasecmp(fString1: js.Any): js.Any = js.native
  def strcasecmp(fString1: js.Any, fString2: js.Any): js.Any = js.native
  def strchr(): js.Any = js.native
  def strchr(haystack: js.Any): js.Any = js.native
  def strchr(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strchr(haystack: js.Any, needle: js.Any, bool: js.Any): js.Any = js.native
  def strcmp(): js.Any = js.native
  def strcmp(str1: js.Any): js.Any = js.native
  def strcmp(str1: js.Any, str2: js.Any): js.Any = js.native
  def strcoll(): js.Any = js.native
  def strcoll(str1: js.Any): js.Any = js.native
  def strcoll(str1: js.Any, str2: js.Any): js.Any = js.native
  def strcspn(): js.Any = js.native
  def strcspn(str: js.Any): js.Any = js.native
  def strcspn(str: js.Any, mask: js.Any): js.Any = js.native
  def strcspn(str: js.Any, mask: js.Any, start: js.Any): js.Any = js.native
  def strcspn(str: js.Any, mask: js.Any, start: js.Any, length: js.Any): js.Any = js.native
  def strip_tags(): js.Any = js.native
  def strip_tags(input: js.Any): js.Any = js.native
  def strip_tags(input: js.Any, allowed: js.Any): js.Any = js.native
  def stripos(): js.Any = js.native
  def stripos(fHaystack: js.Any): js.Any = js.native
  def stripos(fHaystack: js.Any, fNeedle: js.Any): js.Any = js.native
  def stripos(fHaystack: js.Any, fNeedle: js.Any, fOffset: js.Any): js.Any = js.native
  def stripslashes(): js.Any = js.native
  def stripslashes(str: js.Any): js.Any = js.native
  def stristr(): js.Any = js.native
  def stristr(haystack: js.Any): js.Any = js.native
  def stristr(haystack: js.Any, needle: js.Any): js.Any = js.native
  def stristr(haystack: js.Any, needle: js.Any, bool: js.Any): js.Any = js.native
  def strlen(): js.Any = js.native
  def strlen(string: js.Any): js.Any = js.native
  def strnatcasecmp(): js.Any = js.native
  def strnatcasecmp(str1: js.Any): js.Any = js.native
  def strnatcasecmp(str1: js.Any, str2: js.Any): js.Any = js.native
  def strnatcmp(): js.Any = js.native
  def strnatcmp(fString1: js.Any): js.Any = js.native
  def strnatcmp(fString1: js.Any, fString2: js.Any): js.Any = js.native
  def strnatcmp(fString1: js.Any, fString2: js.Any, fVersion: js.Any): js.Any = js.native
  def strncasecmp(): js.Any = js.native
  def strncasecmp(argStr1: js.Any): js.Any = js.native
  def strncasecmp(argStr1: js.Any, argStr2: js.Any): js.Any = js.native
  def strncasecmp(argStr1: js.Any, argStr2: js.Any, len: js.Any): js.Any = js.native
  def strncmp(): js.Any = js.native
  def strncmp(str1: js.Any): js.Any = js.native
  def strncmp(str1: js.Any, str2: js.Any): js.Any = js.native
  def strncmp(str1: js.Any, str2: js.Any, lgth: js.Any): js.Any = js.native
  def strpbrk(): js.Any = js.native
  def strpbrk(haystack: js.Any): js.Any = js.native
  def strpbrk(haystack: js.Any, charList: js.Any): js.Any = js.native
  def strpos(): js.Any = js.native
  def strpos(haystack: js.Any): js.Any = js.native
  def strpos(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strpos(haystack: js.Any, needle: js.Any, offset: js.Any): js.Any = js.native
  def strrchr(): js.Any = js.native
  def strrchr(haystack: js.Any): js.Any = js.native
  def strrchr(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strrev(): js.Any = js.native
  def strrev(string: js.Any): js.Any = js.native
  def strripos(): js.Any = js.native
  def strripos(haystack: js.Any): js.Any = js.native
  def strripos(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strripos(haystack: js.Any, needle: js.Any, offset: js.Any): js.Any = js.native
  def strrpos(): js.Any = js.native
  def strrpos(haystack: js.Any): js.Any = js.native
  def strrpos(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strrpos(haystack: js.Any, needle: js.Any, offset: js.Any): js.Any = js.native
  def strspn(): js.Any = js.native
  def strspn(str1: js.Any): js.Any = js.native
  def strspn(str1: js.Any, str2: js.Any): js.Any = js.native
  def strspn(str1: js.Any, str2: js.Any, start: js.Any): js.Any = js.native
  def strspn(str1: js.Any, str2: js.Any, start: js.Any, lgth: js.Any): js.Any = js.native
  def strstr(): js.Any = js.native
  def strstr(haystack: js.Any): js.Any = js.native
  def strstr(haystack: js.Any, needle: js.Any): js.Any = js.native
  def strstr(haystack: js.Any, needle: js.Any, bool: js.Any): js.Any = js.native
  def strtok(): js.Any = js.native
  def strtok(str: js.Any): js.Any = js.native
  def strtok(str: js.Any, tokens: js.Any): js.Any = js.native
  def strtolower(): js.Any = js.native
  def strtolower(str: js.Any): js.Any = js.native
  def strtoupper(): js.Any = js.native
  def strtoupper(str: js.Any): js.Any = js.native
  def strtr(): js.Any = js.native
  def strtr(str: js.Any): js.Any = js.native
  def strtr(str: js.Any, trFrom: js.Any): js.Any = js.native
  def strtr(str: js.Any, trFrom: js.Any, trTo: js.Any): js.Any = js.native
  def substr(): js.Any = js.native
  def substr(str: js.Any): js.Any = js.native
  def substr(str: js.Any, start: js.Any): js.Any = js.native
  def substr(str: js.Any, start: js.Any, len: js.Any): js.Any = js.native
  def substr_compare(): js.Any = js.native
  def substr_compare(mainStr: js.Any): js.Any = js.native
  def substr_compare(mainStr: js.Any, str: js.Any): js.Any = js.native
  def substr_compare(mainStr: js.Any, str: js.Any, offset: js.Any): js.Any = js.native
  def substr_compare(mainStr: js.Any, str: js.Any, offset: js.Any, length: js.Any): js.Any = js.native
  def substr_compare(mainStr: js.Any, str: js.Any, offset: js.Any, length: js.Any, caseInsensitivity: js.Any): js.Any = js.native
  def substr_count(): js.Any = js.native
  def substr_count(haystack: js.Any): js.Any = js.native
  def substr_count(haystack: js.Any, needle: js.Any): js.Any = js.native
  def substr_count(haystack: js.Any, needle: js.Any, offset: js.Any): js.Any = js.native
  def substr_count(haystack: js.Any, needle: js.Any, offset: js.Any, length: js.Any): js.Any = js.native
  def substr_replace(): js.Any = js.native
  def substr_replace(str: js.Any): js.Any = js.native
  def substr_replace(str: js.Any, replace: js.Any): js.Any = js.native
  def substr_replace(str: js.Any, replace: js.Any, start: js.Any): js.Any = js.native
  def substr_replace(str: js.Any, replace: js.Any, start: js.Any, length: js.Any): js.Any = js.native
  def trim(): js.Any = js.native
  def trim(str: js.Any): js.Any = js.native
  def trim(str: js.Any, charlist: js.Any): js.Any = js.native
  def ucfirst(): js.Any = js.native
  def ucfirst(str: js.Any): js.Any = js.native
  def ucwords(): js.Any = js.native
  def ucwords(str: js.Any): js.Any = js.native
  def vprintf(): js.Any = js.native
  def vprintf(format: js.Any): js.Any = js.native
  def vprintf(format: js.Any, args: js.Any): js.Any = js.native
  def vsprintf(): js.Any = js.native
  def vsprintf(format: js.Any): js.Any = js.native
  def vsprintf(format: js.Any, args: js.Any): js.Any = js.native
  def wordwrap(args: js.Any*): js.Any = js.native
}

