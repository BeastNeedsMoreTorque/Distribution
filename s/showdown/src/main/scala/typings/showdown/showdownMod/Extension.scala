package typings.showdown.showdownMod

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Extension extends js.Object {
  /**
    * Event listeners functions that called on the conversion, when the `event` occurs.
    */
  var listeners: js.UndefOr[StringDictionary[EventListener]] = js.undefined
  /**
    * Property defines the nature of said sub-extensions and can assume 2 values:
    *
    * * `lang`  - Language extensions add new markdown syntax to showdown.
    * * `output` - Output extensions (or modifiers) alter the HTML output generated by showdown.
    * * `listener` - Listener extensions for listening to a conversion event.
    */
  var `type`: String
}

object Extension {
  @scala.inline
  def apply(`type`: String, listeners: StringDictionary[EventListener] = null): Extension = {
    val __obj = js.Dynamic.literal()
    __obj.updateDynamic("type")(`type`)
    if (listeners != null) __obj.updateDynamic("listeners")(listeners)
    __obj.asInstanceOf[Extension]
  }
}

@JSImport("showdown", "extension")
@js.native
object extension extends js.Object {
  /**
    * Get a registered extension.
    *
    * @param name - The extension name.
    * @returns Returns the extension of the given `name`.
    * @throws Throws if `name` is not of type string.
    * @throws Throws if the extension is not exists.
    */
  def apply(name: String): js.Array[ShowdownExtension] = js.native
  def apply(name: String, ext: js.Array[ShowdownExtension]): Unit = js.native
  /**
    * Register a extension.
    *
    * @param name - The name of the new extension.
    * @param ext - The extension.
    * @throws Throws if `name` is not of type string.
    */
  def apply(name: String, ext: js.Function0[js.Array[ShowdownExtension] | ShowdownExtension]): Unit = js.native
  def apply(name: String, ext: ShowdownExtension): Unit = js.native
}

