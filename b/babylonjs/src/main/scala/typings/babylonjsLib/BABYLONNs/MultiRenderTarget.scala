package typings
package babylonjsLib.BABYLONNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A multi render target, like a render target provides the ability to render to a texture.
  * Unlike the render target, it can render to several draw buffers in one draw.
  * This is specially interesting in deferred rendering or for any effects requiring more than
  * just one color from a single pass.
  */
@JSGlobal("BABYLON.MultiRenderTarget")
@js.native
class MultiRenderTarget protected () extends RenderTargetTexture {
  /**
    * Instantiate a new multi render target texture.
    * A multi render target, like a render target provides the ability to render to a texture.
    * Unlike the render target, it can render to several draw buffers in one draw.
    * This is specially interesting in deferred rendering or for any effects requiring more than
    * just one color from a single pass.
    * @param name Define the name of the texture
    * @param size Define the size of the buffers to render to
    * @param count Define the number of target we are rendering into
    * @param scene Define the scene the texture belongs to
    * @param options Define the options used to create the multi render target
    */
  def this(name: java.lang.String, size: js.Any, count: scala.Double, scene: Scene) = this()
  def this(name: java.lang.String, size: js.Any, count: scala.Double, scene: Scene, options: IMultiRenderTargetOptions) = this()
  var _createInternalTextures: js.Any = js.native
  var _createTextures: js.Any = js.native
  var _internalTextures: js.Any = js.native
  var _multiRenderTargetOptions: js.Any = js.native
  var _textures: js.Any = js.native
  /**
    * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set
    */
  val depthTexture: Texture = js.native
  /**
    * Get if draw buffers are currently supported by the used hardware and browser.
    */
  val isSupported: scala.Boolean = js.native
  /**
    * Get the list of textures generated by the multi render target.
    */
  val textures: js.Array[Texture] = js.native
  /**
    * Release all the underlying texture used as draw buffers.
    */
  def releaseInternalTextures(): scala.Unit = js.native
  /**
    * Resize all the textures in the multi render target.
    * Be carrefull as it will recreate all the data in the new texture.
    * @param size Define the new size
    */
  def resize(size: js.Any): scala.Unit = js.native
}

