package typings
package fastifyDashRateDashLimitLib.fastifyDashRateDashLimitMod.fastifyRateLimitNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait FastifyRateLimitOptions[T] extends js.Object {
  /**
    * This plugin internally uses a lru cache to handle the clients, you can
    * change the size of the cache with this option.
    *
    * default: 5000
    */
  var cache: js.UndefOr[scala.Double] = js.undefined
  /**
    * Function to generate a unique identifier for each incoming request.
    *
    * default: (req) => req.ip
    */
  var keyGenerator: js.UndefOr[js.Function1[/* req */ T, java.lang.String]] = js.undefined
  /**
    * Is the maximum number of requests a single client can perform inside a
    * timeWindow.
    *
    * default: 1000
    */
  var max: js.UndefOr[scala.Double] = js.undefined
  /**
    * By default this plugins uses an in-memory store, which is fast but if
    * you application works on more than one server it is useless, since the
    * data is store locally. You can pass a Redis client here and magically
    * the issue is solved. To achieve the maximum speed, this plugins requires
    * the use of ioredis.
    *
    * default: null
    */
  var redis: js.UndefOr[ioredisLib.ioredisMod.IORedisNs.Redis] = js.undefined
  /**
    * If `true` it will skip errors generated by the storage (eg, redis not
    * reachable).
    *
    * default: false
    */
  var skipOnError: js.UndefOr[scala.Boolean] = js.undefined
  /**
    * The duration of the time window, can be expressed in milliseconds (as a
    * number) or as a string, see ms too see the supported formats
    *
    * default: 1000 * 60
    */
  var timeWindow: js.UndefOr[scala.Double] = js.undefined
  /**
    * Array of string of ips to exclude from rate limiting.
    *
    * default: []
    */
  var whitelist: js.UndefOr[js.Array[java.lang.String]] = js.undefined
}

