package typings.winrtDashUwp.WindowsNs.MediaNs.SpeechSynthesisNs

import typings.winrtDashUwp.WindowsNs.FoundationNs.CollectionsNs.IVectorView
import typings.winrtDashUwp.WindowsNs.FoundationNs.IPromiseWithIAsyncOperation
import typings.winrtDashUwp.WindowsNs.FoundationNs.IPromiseWithIAsyncOperationWithProgress
import typings.winrtDashUwp.WindowsNs.MediaNs.IMediaMarker
import typings.winrtDashUwp.WindowsNs.StorageNs.StreamsNs.IBuffer
import typings.winrtDashUwp.WindowsNs.StorageNs.StreamsNs.IInputStream
import typings.winrtDashUwp.WindowsNs.StorageNs.StreamsNs.IOutputStream
import typings.winrtDashUwp.WindowsNs.StorageNs.StreamsNs.IRandomAccessStream
import typings.winrtDashUwp.WindowsNs.StorageNs.StreamsNs.InputStreamOptions
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/** Supports reading and writing audio data generated by the speech synthesis engine (voice) to/from a random access stream. */
@JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesisStream")
@js.native
abstract class SpeechSynthesisStream () extends js.Object {
  /** Gets whether SpeechSynthesisStream can be read from. */
  var canRead: Boolean = js.native
  /** Gets a value that indicates whether SpeechSynthesisStream can be written to. */
  var canWrite: Boolean = js.native
  /** Gets the MIME type of the content of SpeechSynthesisStream . */
  var contentType: String = js.native
  /** Gets the collection of timeline markers associated with SpeechSynthesisStream . */
  var markers: IVectorView[IMediaMarker] = js.native
  /** Gets the position within SpeechSynthesisStream . */
  var position: Double = js.native
  /** Gets or sets the size of the SpeechSynthesisStream . */
  var size: Double = js.native
  /**
    * Creates a copy of SpeechSynthesisStream that references the same bytes as the original stream.
    * @return The new stream.
    */
  def cloneStream(): IRandomAccessStream = js.native
  /** Releases system resources that are exposed by SpeechSynthesisStream . */
  def close(): Unit = js.native
  /**
    * Flushes data asynchronously in a sequential stream.
    * @return An asynchronous operation. For more information, see FlushAsync method.
    */
  def flushAsync(): IPromiseWithIAsyncOperation[Boolean] = js.native
  /**
    * Retrieves an input stream at a specified location in SpeechSynthesisStream .
    * @param position The location in the stream at which to begin.
    * @return The input stream.
    */
  def getInputStreamAt(position: Double): IInputStream = js.native
  /**
    * Retrieves an output stream at a specified location in SpeechSynthesisStream .
    * @param position The location in the stream at which to begin.
    * @return The output stream.
    */
  def getOutputStreamAt(position: Double): IOutputStream = js.native
  /**
    * Reads data asynchronously in a sequential stream.
    * @param buffer The buffer into which the asynchronous read operation places the bytes that are read.
    * @param count The number of bytes to read that is less than or equal to the Capacity value.
    * @param options Specifies the type of the asynchronous read operation.
    * @return An asynchronous operation that includes progress updates. For more information, see ReadAsync method.
    */
  def readAsync(buffer: IBuffer, count: Double, options: InputStreamOptions): IPromiseWithIAsyncOperationWithProgress[IBuffer, Double] = js.native
  /**
    * Goes to the specified position within SpeechSynthesisStream .
    * @param position The desired position within the stream.
    */
  def seek(position: Double): Unit = js.native
  /**
    * Writes data asynchronously in a sequential stream.
    * @param buffer The buffer into which the asynchronous writer operation places the bytes to write.
    * @return An asynchronous operation that includes progress updates. For more information, see WriteAsync method.
    */
  def writeAsync(buffer: IBuffer): IPromiseWithIAsyncOperationWithProgress[Double, Double] = js.native
}

